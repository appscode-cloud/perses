{"version":3,"sources":["../../../src/model/pyroscope-client.ts"],"sourcesContent":["// Copyright 2025 The Perses Authors\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { fetch, RequestHeaders } from '@perses-dev/core';\nimport { DatasourceClient } from '@perses-dev/plugin-system';\nimport {\n  SearchProfilesParameters,\n  SearchProfilesResponse,\n  SearchProfileTypesParameters,\n  SearchProfileTypesResponse,\n  SearchLabelNamesParameters,\n  SearchLabelNamesResponse,\n  SearchLabelValuesParameters,\n  SearchLabelValuesResponse,\n} from './api-types';\n\ninterface PyroscopeClientOptions {\n  datasourceUrl: string;\n  headers?: RequestHeaders;\n}\n\nexport interface PyroscopeClient extends DatasourceClient {\n  options: PyroscopeClientOptions;\n  searchProfiles(params: SearchProfilesParameters, headers?: RequestHeaders): Promise<SearchProfilesResponse>;\n  searchProfileTypes(\n    params: SearchProfileTypesParameters,\n    headers: RequestHeaders,\n    body: Record<string, string | number>\n  ): Promise<SearchProfileTypesResponse>;\n  searchLabelNames(\n    params: SearchLabelNamesParameters,\n    headers: RequestHeaders,\n    body: Record<string, string | number>\n  ): Promise<SearchLabelNamesResponse>;\n  searchLabelValues(\n    params: SearchLabelValuesParameters,\n    headers: RequestHeaders,\n    body: Record<string, string | number>\n  ): Promise<SearchLabelValuesResponse>;\n  searchServices(params: SearchLabelValuesParameters, headers: RequestHeaders): Promise<SearchLabelValuesResponse>;\n}\n\nexport interface QueryOptions {\n  datasourceUrl: string;\n  headers?: RequestHeaders;\n}\n\nexport const executeRequest = async <T>(...args: Parameters<typeof global.fetch>): Promise<T> => {\n  const response = await fetch(...args);\n  try {\n    return await response.json();\n  } catch (e) {\n    console.error('Invalid response from server', e);\n    throw new Error('Invalid response from server');\n  }\n};\n\nfunction fetchWithGet<T, TResponse>(apiURI: string, params: T | null, queryOptions: QueryOptions): Promise<TResponse> {\n  const { datasourceUrl, headers = {} } = queryOptions;\n\n  let url = `${datasourceUrl}${apiURI}`;\n  if (params) {\n    url += '?' + new URLSearchParams(params);\n  }\n  const init = {\n    method: 'GET',\n    headers,\n  };\n\n  return executeRequest<TResponse>(url, init);\n}\n\nfunction fetchWithPost<T, TResponse>(\n  apiURI: string,\n  params: T | null,\n  queryOptions: QueryOptions,\n  body: Record<string, string | number>\n): Promise<TResponse> {\n  const { datasourceUrl, headers = {} } = queryOptions;\n\n  let url = `${datasourceUrl}${apiURI}`;\n  if (params) {\n    url += '?' + new URLSearchParams(params);\n  }\n  const init = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body),\n  };\n\n  return executeRequest<TResponse>(url, init);\n}\n\n/**\n * Returns profiling data.\n */\nexport function searchProfiles(\n  params: SearchProfilesParameters,\n  queryOptions: QueryOptions\n): Promise<SearchProfilesResponse> {\n  return fetchWithGet<SearchProfilesParameters, SearchProfilesResponse>('/pyroscope/render', params, queryOptions);\n}\n\n/**\n * Returns a list of all profile types.\n */\nexport function searchProfileTypes(\n  params: SearchProfileTypesParameters,\n  queryOptions: QueryOptions,\n  body: Record<string, string | number>\n): Promise<SearchProfileTypesResponse> {\n  return fetchWithPost<SearchProfileTypesParameters, SearchProfileTypesResponse>(\n    '/querier.v1.QuerierService/ProfileTypes',\n    params,\n    queryOptions,\n    body\n  );\n}\n\n/**\n * Returns a list of all label names.\n */\nexport function searchLabelNames(\n  params: SearchLabelNamesParameters,\n  queryOptions: QueryOptions,\n  body: Record<string, string | number>\n): Promise<SearchLabelNamesResponse> {\n  return fetchWithPost<SearchLabelNamesParameters, SearchLabelNamesResponse>(\n    '/querier.v1.QuerierService/LabelNames',\n    params,\n    queryOptions,\n    body\n  );\n}\n\n/**\n * Returns a list of all label values for a given label name.\n */\nexport function searchLabelValues(\n  params: SearchLabelValuesParameters,\n  queryOptions: QueryOptions,\n  body: Record<string, string | number>\n): Promise<SearchLabelValuesResponse> {\n  return fetchWithPost<SearchLabelValuesParameters, SearchLabelValuesResponse>(\n    '/querier.v1.QuerierService/LabelValues',\n    params,\n    queryOptions,\n    body\n  );\n}\n\n/**\n * Returns a list of all services.\n * This is a special case of label values where the label name is \"service_name\".\n */\nexport function searchServices(\n  params: SearchLabelValuesParameters,\n  queryOptions: QueryOptions\n): Promise<SearchLabelValuesResponse> {\n  return fetchWithPost<SearchLabelValuesParameters, SearchLabelValuesResponse>(\n    '/querier.v1.QuerierService/LabelValues',\n    params,\n    queryOptions,\n    { name: 'service_name' }\n  );\n}\n"],"names":["fetch","executeRequest","args","response","json","e","console","error","Error","fetchWithGet","apiURI","params","queryOptions","datasourceUrl","headers","url","URLSearchParams","init","method","fetchWithPost","body","JSON","stringify","searchProfiles","searchProfileTypes","searchLabelNames","searchLabelValues","searchServices","name"],"mappings":"AAAA,oCAAoC;AACpC,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AAEjC,SAASA,KAAK,QAAwB,mBAAmB;AA4CzD,OAAO,MAAMC,iBAAiB,OAAU,GAAGC;IACzC,MAAMC,WAAW,MAAMH,SAASE;IAChC,IAAI;QACF,OAAO,MAAMC,SAASC,IAAI;IAC5B,EAAE,OAAOC,GAAG;QACVC,QAAQC,KAAK,CAAC,gCAAgCF;QAC9C,MAAM,IAAIG,MAAM;IAClB;AACF,EAAE;AAEF,SAASC,aAA2BC,MAAc,EAAEC,MAAgB,EAAEC,YAA0B;IAC9F,MAAM,EAAEC,aAAa,EAAEC,UAAU,CAAC,CAAC,EAAE,GAAGF;IAExC,IAAIG,MAAM,GAAGF,gBAAgBH,QAAQ;IACrC,IAAIC,QAAQ;QACVI,OAAO,MAAM,IAAIC,gBAAgBL;IACnC;IACA,MAAMM,OAAO;QACXC,QAAQ;QACRJ;IACF;IAEA,OAAOb,eAA0Bc,KAAKE;AACxC;AAEA,SAASE,cACPT,MAAc,EACdC,MAAgB,EAChBC,YAA0B,EAC1BQ,IAAqC;IAErC,MAAM,EAAEP,aAAa,EAAEC,UAAU,CAAC,CAAC,EAAE,GAAGF;IAExC,IAAIG,MAAM,GAAGF,gBAAgBH,QAAQ;IACrC,IAAIC,QAAQ;QACVI,OAAO,MAAM,IAAIC,gBAAgBL;IACnC;IACA,MAAMM,OAAO;QACXC,QAAQ;QACRJ;QACAM,MAAMC,KAAKC,SAAS,CAACF;IACvB;IAEA,OAAOnB,eAA0Bc,KAAKE;AACxC;AAEA;;CAEC,GACD,OAAO,SAASM,eACdZ,MAAgC,EAChCC,YAA0B;IAE1B,OAAOH,aAA+D,qBAAqBE,QAAQC;AACrG;AAEA;;CAEC,GACD,OAAO,SAASY,mBACdb,MAAoC,EACpCC,YAA0B,EAC1BQ,IAAqC;IAErC,OAAOD,cACL,2CACAR,QACAC,cACAQ;AAEJ;AAEA;;CAEC,GACD,OAAO,SAASK,iBACdd,MAAkC,EAClCC,YAA0B,EAC1BQ,IAAqC;IAErC,OAAOD,cACL,yCACAR,QACAC,cACAQ;AAEJ;AAEA;;CAEC,GACD,OAAO,SAASM,kBACdf,MAAmC,EACnCC,YAA0B,EAC1BQ,IAAqC;IAErC,OAAOD,cACL,0CACAR,QACAC,cACAQ;AAEJ;AAEA;;;CAGC,GACD,OAAO,SAASO,eACdhB,MAAmC,EACnCC,YAA0B;IAE1B,OAAOO,cACL,0CACAR,QACAC,cACA;QAAEgB,MAAM;IAAe;AAE3B"}