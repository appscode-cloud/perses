{"version":3,"sources":["../../../../src/plugins/pyroscope-profile-query/query-editor-model.ts"],"sourcesContent":["// Copyright 2025 The Perses Authors\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { useState } from 'react';\nimport { produce } from 'immer';\nimport { OptionsEditorProps } from '@perses-dev/plugin-system';\nimport { PyroscopeProfileQuerySpec } from '../../model/profile-query-model';\nimport { LabelFilter } from '../../utils/types';\n\nexport type ProfileQueryEditorProps = OptionsEditorProps<PyroscopeProfileQuerySpec>;\n\n/**\n * Hook to manage `maxNodes` state to ensure panel preview rerender when maxNodes is changed.\n */\nexport function useMaxNodesState(props: ProfileQueryEditorProps): {\n  maxNodes: string;\n  handleMaxNodesChange: (e: string) => void;\n  maxNodesHasError: boolean;\n} {\n  const { onChange, value } = props;\n\n  const [maxNodes, setMaxNodes] = useState(value.maxNodes ? value.maxNodes.toString() : '');\n  const [lastSyncedMaxNodes, setLastSyncedMaxNodes] = useState(value.maxNodes);\n\n  if (value.maxNodes !== lastSyncedMaxNodes) {\n    setMaxNodes(value.maxNodes ? value.maxNodes.toString() : '');\n    setLastSyncedMaxNodes(value.maxNodes);\n  }\n\n  // maxNodes must be empty or an integer between 0 and max_flamegraph_nodes_max (0 < maxNodes <= max_flamegraph_nodes_max)\n  // what is the actual value of max_flamegraph_nodes_max?\n  // todo: add a constraint to the maxNodes related to max_flamegraph_nodes_max\n  const maxNodesHasError = !(maxNodes === '' || (/^[0-9]+$/.test(maxNodes) && parseInt(maxNodes) > 0));\n\n  // Update our local state as the user types\n  const handleMaxNodesChange = (e: string): void => {\n    setMaxNodes(e);\n    // Propagate changes to the panel immediately\n    onChange(\n      produce(value, (draft) => {\n        draft.maxNodes = e === '' ? undefined : parseInt(e);\n      })\n    );\n  };\n\n  return { maxNodes, handleMaxNodesChange, maxNodesHasError };\n}\n\n/**\n * Hook to manage `profileType` state to ensure panel preview rerender when profileType is changed.\n */\nexport function useProfileTypeState(props: ProfileQueryEditorProps): {\n  profileType: string;\n  handleProfileTypeChange: (e: string) => void;\n} {\n  const { onChange, value } = props;\n\n  const [profileType, setProfileType] = useState(value.profileType ? value.profileType : '');\n  const [lastSyncedProfileType, setLastSyncedProfileType] = useState(value.profileType);\n\n  if (value.profileType !== lastSyncedProfileType) {\n    setProfileType(value.profileType);\n    setLastSyncedProfileType(value.profileType);\n  }\n\n  // Update our local state as the user types\n  const handleProfileTypeChange = (e: string): void => {\n    setProfileType(e);\n    // Propagate changes to the panel immediately\n    onChange(\n      produce(value, (draft) => {\n        draft.profileType = e;\n      })\n    );\n  };\n\n  return { profileType, handleProfileTypeChange };\n}\n\n/**\n * Hook to manage `service` state to ensure panel preview rerender when service is changed.\n */\nexport function useServiceState(props: ProfileQueryEditorProps): {\n  service: string;\n  handleServiceChange: (e: string) => void;\n} {\n  const { onChange, value } = props;\n\n  const [service, setService] = useState(value.service ? value.service : '');\n  const [lastSyncedService, setLastSyncedService] = useState(value.service);\n\n  if (value.service !== lastSyncedService) {\n    setService(value.service || '');\n    setLastSyncedService(value.service);\n  }\n\n  // Update our local state as the user types\n  const handleServiceChange = (e: string): void => {\n    setService(e);\n    // Propagate changes to the panel immediately\n    onChange(\n      produce(value, (draft) => {\n        draft.service = e;\n      })\n    );\n  };\n\n  return { service, handleServiceChange };\n}\n\n/**\n * Hook to manage `filters` state to ensure panel preview rerender when filters is changed.\n */\nexport function useFiltersState(props: ProfileQueryEditorProps): {\n  filters: LabelFilter[];\n  handleFiltersChange: (f: LabelFilter[]) => void;\n} {\n  const { onChange, value } = props;\n\n  const [filters, setFilters] = useState(value.filters ? value.filters : []);\n\n  const handleFiltersChange = (f: LabelFilter[]): void => {\n    setFilters(f);\n\n    onChange(\n      produce(value, (draft) => {\n        draft.filters = f;\n      })\n    );\n  };\n\n  return { filters, handleFiltersChange };\n}\n"],"names":["useState","produce","useMaxNodesState","props","onChange","value","maxNodes","setMaxNodes","toString","lastSyncedMaxNodes","setLastSyncedMaxNodes","maxNodesHasError","test","parseInt","handleMaxNodesChange","e","draft","undefined","useProfileTypeState","profileType","setProfileType","lastSyncedProfileType","setLastSyncedProfileType","handleProfileTypeChange","useServiceState","service","setService","lastSyncedService","setLastSyncedService","handleServiceChange","useFiltersState","filters","setFilters","handleFiltersChange","f"],"mappings":"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"}