{"version":3,"sources":["../../../../src/plugins/pyroscope-profile-query/PyroscopeProfileQueryEditor.tsx"],"sourcesContent":["// Copyright 2025 The Perses Authors\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { DatasourceSelect, DatasourceSelectProps } from '@perses-dev/plugin-system';\nimport { useId } from '@perses-dev/components';\nimport { produce } from 'immer';\nimport { FormControl, InputLabel, Stack, TextField } from '@mui/material';\nimport { ReactElement } from 'react';\nimport {\n  DEFAULT_PYROSCOPE,\n  isDefaultPyroscopeSelector,\n  isPyroscopeDatasourceSelector,\n  PYROSCOPE_DATASOURCE_KIND,\n} from '../../model/pyroscope-selectors';\nimport { ProfileType, Service, Filters } from '../../components';\nimport {\n  ProfileQueryEditorProps,\n  useMaxNodesState,\n  useProfileTypeState,\n  useServiceState,\n  useFiltersState,\n} from './query-editor-model';\n\nexport function PyroscopeProfileQueryEditor(props: ProfileQueryEditorProps): ReactElement {\n  const { onChange, value } = props;\n  const { datasource } = value;\n  const selectedDatasource = datasource ?? DEFAULT_PYROSCOPE;\n  const datasourceSelectLabelID = useId('pyroscope-datasource-label');\n\n  const { maxNodes, handleMaxNodesChange, maxNodesHasError } = useMaxNodesState(props);\n  const { profileType, handleProfileTypeChange } = useProfileTypeState(props);\n  const { service, handleServiceChange } = useServiceState(props);\n  const { filters, handleFiltersChange } = useFiltersState(props);\n\n  const handleDatasourceChange: DatasourceSelectProps['onChange'] = (next) => {\n    // Check if the next value is a DatasourceSelector\n    if (typeof next === 'object' && 'kind' in next && 'name' in next) {\n      if (isPyroscopeDatasourceSelector(next)) {\n        onChange(\n          produce(value, (draft) => {\n            // If they're using the default, just omit the datasource prop (i.e. set to undefined)\n            const nextDatasource = isDefaultPyroscopeSelector(next) ? undefined : next;\n            draft.datasource = nextDatasource;\n          })\n        );\n        return;\n      }\n    }\n\n    throw new Error('Got unexpected non-Pyroscope datasource selector');\n  };\n\n  return (\n    <Stack spacing={2}>\n      <FormControl margin=\"dense\" fullWidth={false}>\n        <InputLabel id={datasourceSelectLabelID} shrink>\n          Pyroscope Datasource\n        </InputLabel>\n        <DatasourceSelect\n          datasourcePluginKind={PYROSCOPE_DATASOURCE_KIND}\n          value={selectedDatasource}\n          onChange={handleDatasourceChange}\n          labelId={datasourceSelectLabelID}\n          label=\"Pyroscope Datasource\"\n          notched\n        />\n      </FormControl>\n      <Stack\n        direction=\"row\"\n        spacing={0}\n        sx={{\n          flexWrap: 'wrap',\n          rowGap: 1,\n          gap: 2,\n        }}\n      >\n        <Service datasource={selectedDatasource} value={service} onChange={handleServiceChange} />\n        <ProfileType datasource={selectedDatasource} value={profileType} onChange={handleProfileTypeChange} />\n        <TextField\n          size=\"small\"\n          label=\"Max Nodes\"\n          value={maxNodes}\n          error={maxNodesHasError}\n          onChange={(e) => handleMaxNodesChange(e.target.value)}\n          sx={{ width: '110px' }}\n        />\n      </Stack>\n      <Filters datasource={selectedDatasource} value={filters} onChange={handleFiltersChange} />\n    </Stack>\n  );\n}\n"],"names":["DatasourceSelect","useId","produce","FormControl","InputLabel","Stack","TextField","DEFAULT_PYROSCOPE","isDefaultPyroscopeSelector","isPyroscopeDatasourceSelector","PYROSCOPE_DATASOURCE_KIND","ProfileType","Service","Filters","useMaxNodesState","useProfileTypeState","useServiceState","useFiltersState","PyroscopeProfileQueryEditor","props","onChange","value","datasource","selectedDatasource","datasourceSelectLabelID","maxNodes","handleMaxNodesChange","maxNodesHasError","profileType","handleProfileTypeChange","service","handleServiceChange","filters","handleFiltersChange","handleDatasourceChange","next","draft","nextDatasource","undefined","Error","spacing","margin","fullWidth","id","shrink","datasourcePluginKind","labelId","label","notched","direction","sx","flexWrap","rowGap","gap","size","error","e","target","width"],"mappings":"AAAA,oCAAoC;AACpC,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAEjC,SAASA,gBAAgB,QAA+B,4BAA4B;AACpF,SAASC,KAAK,QAAQ,yBAAyB;AAC/C,SAASC,OAAO,QAAQ,QAAQ;AAChC,SAASC,WAAW,EAAEC,UAAU,EAAEC,KAAK,EAAEC,SAAS,QAAQ,gBAAgB;AAE1E,SACEC,iBAAiB,EACjBC,0BAA0B,EAC1BC,6BAA6B,EAC7BC,yBAAyB,QACpB,kCAAkC;AACzC,SAASC,WAAW,EAAEC,OAAO,EAAEC,OAAO,QAAQ,mBAAmB;AACjE,SAEEC,gBAAgB,EAChBC,mBAAmB,EACnBC,eAAe,EACfC,eAAe,QACV,uBAAuB;AAE9B,OAAO,SAASC,4BAA4BC,KAA8B;IACxE,MAAM,EAAEC,QAAQ,EAAEC,KAAK,EAAE,GAAGF;IAC5B,MAAM,EAAEG,UAAU,EAAE,GAAGD;IACvB,MAAME,qBAAqBD,cAAcf;IACzC,MAAMiB,0BAA0BvB,MAAM;IAEtC,MAAM,EAAEwB,QAAQ,EAAEC,oBAAoB,EAAEC,gBAAgB,EAAE,GAAGb,iBAAiBK;IAC9E,MAAM,EAAES,WAAW,EAAEC,uBAAuB,EAAE,GAAGd,oBAAoBI;IACrE,MAAM,EAAEW,OAAO,EAAEC,mBAAmB,EAAE,GAAGf,gBAAgBG;IACzD,MAAM,EAAEa,OAAO,EAAEC,mBAAmB,EAAE,GAAGhB,gBAAgBE;IAEzD,MAAMe,yBAA4D,CAACC;QACjE,kDAAkD;QAClD,IAAI,OAAOA,SAAS,YAAY,UAAUA,QAAQ,UAAUA,MAAM;YAChE,IAAI1B,8BAA8B0B,OAAO;gBACvCf,SACElB,QAAQmB,OAAO,CAACe;oBACd,sFAAsF;oBACtF,MAAMC,iBAAiB7B,2BAA2B2B,QAAQG,YAAYH;oBACtEC,MAAMd,UAAU,GAAGe;gBACrB;gBAEF;YACF;QACF;QAEA,MAAM,IAAIE,MAAM;IAClB;IAEA,qBACE,MAAClC;QAAMmC,SAAS;;0BACd,MAACrC;gBAAYsC,QAAO;gBAAQC,WAAW;;kCACrC,KAACtC;wBAAWuC,IAAInB;wBAAyBoB,MAAM;kCAAC;;kCAGhD,KAAC5C;wBACC6C,sBAAsBnC;wBACtBW,OAAOE;wBACPH,UAAUc;wBACVY,SAAStB;wBACTuB,OAAM;wBACNC,OAAO;;;;0BAGX,MAAC3C;gBACC4C,WAAU;gBACVT,SAAS;gBACTU,IAAI;oBACFC,UAAU;oBACVC,QAAQ;oBACRC,KAAK;gBACP;;kCAEA,KAACzC;wBAAQU,YAAYC;wBAAoBF,OAAOS;wBAASV,UAAUW;;kCACnE,KAACpB;wBAAYW,YAAYC;wBAAoBF,OAAOO;wBAAaR,UAAUS;;kCAC3E,KAACvB;wBACCgD,MAAK;wBACLP,OAAM;wBACN1B,OAAOI;wBACP8B,OAAO5B;wBACPP,UAAU,CAACoC,IAAM9B,qBAAqB8B,EAAEC,MAAM,CAACpC,KAAK;wBACpD6B,IAAI;4BAAEQ,OAAO;wBAAQ;;;;0BAGzB,KAAC7C;gBAAQS,YAAYC;gBAAoBF,OAAOW;gBAASZ,UAAUa;;;;AAGzE"}