{"version":3,"sources":["../../../src/test/mock-trace-data.ts"],"sourcesContent":["// Copyright 2023 The Perses Authors\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { TraceData } from '@perses-dev/core';\n\n/**\n * Mock data we get from getTraceData() in @perses/tempo-plugin.\n */\nexport const MOCK_TRACE_SEARCH_RESULT: TraceData = {\n  searchResult: [\n    {\n      startTimeUnixMs: 1702915645000, // unix epoch time in milliseconds\n      durationMs: 100,\n      serviceStats: {\n        'service-name': {\n          spanCount: 10,\n        },\n        'second-service-name': {\n          spanCount: 3,\n          errorCount: 2,\n        },\n      },\n      traceId: '123',\n      rootServiceName: 'service-name',\n      rootTraceName: 'span-name',\n    },\n  ],\n  metadata: {\n    executedQueryString: '{duration > 500ms}',\n  },\n};\n\nexport const MOCK_TRACE_SEARCH_RESULT_EMPTY: TraceData = {\n  searchResult: [],\n  metadata: {\n    executedQueryString: '{duration > 500ms}',\n  },\n};\n\n/**\n * Mocks results obtained from useTraceQueries() in @perses/plugin-system/runtime.\n * This function uses then React TanStack function useQueries(fooQuery) to\n * handle fetching.\n */\nexport const MOCK_TRACE_SEARCH_RESULT_QUERY_RESULT = [\n  {\n    status: 'success',\n    fetchStatus: 'idle',\n    isLoading: false,\n    isSuccess: true,\n    isError: false,\n    data: MOCK_TRACE_SEARCH_RESULT,\n    dataUpdatedAt: 1666500979895,\n    definition: {\n      kind: 'TraceQuery',\n      spec: {\n        plugin: {\n          kind: 'TempoTraceQuery',\n          spec: {\n            query: '{}',\n            datasource: {\n              kind: 'TempoDatasource',\n              name: 'tempolocal',\n            },\n          },\n        },\n      },\n    },\n    error: null,\n    errorUpdatedAt: 0,\n    failureCount: 0,\n    errorUpdateCount: 0,\n    isFetched: true,\n    isFetchedAfterMount: true,\n    isFetching: false,\n    isRefetching: false,\n    isLoadingError: false,\n    isPaused: false,\n    isPlaceholderData: false,\n    isPreviousData: false,\n    isRefetchError: false,\n    isStale: true,\n  },\n];\n\nexport const MOCK_TRACE_SEARCH_RESULT_QUERY_RESULT_EMPTY = [\n  {\n    status: 'success',\n    fetchStatus: 'idle',\n    isLoading: false,\n    isSuccess: true,\n    isError: false,\n    data: MOCK_TRACE_SEARCH_RESULT_EMPTY,\n    dataUpdatedAt: 1666500979895,\n    error: null,\n    errorUpdatedAt: 0,\n    failureCount: 0,\n    errorUpdateCount: 0,\n    isFetched: true,\n    isFetchedAfterMount: true,\n    isFetching: false,\n    isRefetching: false,\n    isLoadingError: false,\n    isPaused: false,\n    isPlaceholderData: false,\n    isPreviousData: false,\n    isRefetchError: false,\n    isStale: true,\n  },\n];\n"],"names":["MOCK_TRACE_SEARCH_RESULT","searchResult","startTimeUnixMs","durationMs","serviceStats","spanCount","errorCount","traceId","rootServiceName","rootTraceName","metadata","executedQueryString","MOCK_TRACE_SEARCH_RESULT_EMPTY","MOCK_TRACE_SEARCH_RESULT_QUERY_RESULT","status","fetchStatus","isLoading","isSuccess","isError","data","dataUpdatedAt","definition","kind","spec","plugin","query","datasource","name","error","errorUpdatedAt","failureCount","errorUpdateCount","isFetched","isFetchedAfterMount","isFetching","isRefetching","isLoadingError","isPaused","isPlaceholderData","isPreviousData","isRefetchError","isStale","MOCK_TRACE_SEARCH_RESULT_QUERY_RESULT_EMPTY"],"mappings":"AAAA,oCAAoC;AACpC,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AAIjC;;CAEC,GACD,OAAO,MAAMA,2BAAsC;IACjDC,cAAc;QACZ;YACEC,iBAAiB;YACjBC,YAAY;YACZC,cAAc;gBACZ,gBAAgB;oBACdC,WAAW;gBACb;gBACA,uBAAuB;oBACrBA,WAAW;oBACXC,YAAY;gBACd;YACF;YACAC,SAAS;YACTC,iBAAiB;YACjBC,eAAe;QACjB;KACD;IACDC,UAAU;QACRC,qBAAqB;IACvB;AACF,EAAE;AAEF,OAAO,MAAMC,iCAA4C;IACvDX,cAAc,EAAE;IAChBS,UAAU;QACRC,qBAAqB;IACvB;AACF,EAAE;AAEF;;;;CAIC,GACD,OAAO,MAAME,wCAAwC;IACnD;QACEC,QAAQ;QACRC,aAAa;QACbC,WAAW;QACXC,WAAW;QACXC,SAAS;QACTC,MAAMnB;QACNoB,eAAe;QACfC,YAAY;YACVC,MAAM;YACNC,MAAM;gBACJC,QAAQ;oBACNF,MAAM;oBACNC,MAAM;wBACJE,OAAO;wBACPC,YAAY;4BACVJ,MAAM;4BACNK,MAAM;wBACR;oBACF;gBACF;YACF;QACF;QACAC,OAAO;QACPC,gBAAgB;QAChBC,cAAc;QACdC,kBAAkB;QAClBC,WAAW;QACXC,qBAAqB;QACrBC,YAAY;QACZC,cAAc;QACdC,gBAAgB;QAChBC,UAAU;QACVC,mBAAmB;QACnBC,gBAAgB;QAChBC,gBAAgB;QAChBC,SAAS;IACX;CACD,CAAC;AAEF,OAAO,MAAMC,8CAA8C;IACzD;QACE5B,QAAQ;QACRC,aAAa;QACbC,WAAW;QACXC,WAAW;QACXC,SAAS;QACTC,MAAMP;QACNQ,eAAe;QACfQ,OAAO;QACPC,gBAAgB;QAChBC,cAAc;QACdC,kBAAkB;QAClBC,WAAW;QACXC,qBAAqB;QACrBC,YAAY;QACZC,cAAc;QACdC,gBAAgB;QAChBC,UAAU;QACVC,mBAAmB;QACnBC,gBAAgB;QAChBC,gBAAgB;QAChBC,SAAS;IACX;CACD,CAAC"}