{"version":3,"sources":["../../src/DataTable.tsx"],"sourcesContent":["// Copyright 2024 The Perses Authors\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Avatar, Box, Chip, Link, Tooltip, Typography, useTheme } from '@mui/material';\nimport {\n  QueryDefinition,\n  ServiceStats,\n  TraceData,\n  TraceSearchResult,\n  formatDuration,\n  msToPrometheusDuration,\n} from '@perses-dev/core';\nimport { PanelData } from '@perses-dev/plugin-system';\nimport { Link as RouterLink } from 'react-router-dom';\nimport InformationIcon from 'mdi-material-ui/Information';\nimport { useChartsTheme } from '@perses-dev/components';\nimport { DataGrid, GridColDef } from '@mui/x-data-grid';\nimport { ReactElement, useCallback, useMemo } from 'react';\nimport { getServiceColor } from './utils/utils';\nimport { TraceTableOptions } from './trace-table-model';\n\nconst DATE_FORMATTER = new Intl.DateTimeFormat(undefined, {\n  dateStyle: 'long',\n  timeStyle: 'medium',\n}).format;\nconst UTC_DATE_FORMATTER = new Intl.DateTimeFormat(undefined, {\n  dateStyle: 'long',\n  timeStyle: 'long',\n  timeZone: 'UTC',\n}).format;\n\nexport type TraceLink = (params: { query: QueryDefinition; traceId: string }) => string;\n\nexport interface DataTableProps {\n  options: TraceTableOptions;\n  result: Array<PanelData<TraceData>>;\n  traceLink?: TraceLink;\n}\n\ninterface Row extends TraceSearchResult {\n  id: string;\n  traceLink?: string;\n}\n\nexport function DataTable(props: DataTableProps): ReactElement {\n  const { options, result, traceLink } = props;\n  const muiTheme = useTheme();\n  const chartsTheme = useChartsTheme();\n\n  const paletteMode = options.visual?.palette?.mode;\n  const serviceColorGenerator = useCallback(\n    (serviceName: string) => getServiceColor(muiTheme, chartsTheme, paletteMode, serviceName),\n    [muiTheme, chartsTheme, paletteMode]\n  );\n\n  const rows: Row[] = [];\n  for (const query of result) {\n    for (const trace of query.data?.searchResult || []) {\n      rows.push({\n        ...trace,\n        id: trace.traceId,\n        traceLink: traceLink?.({ query: query.definition, traceId: trace.traceId }),\n      });\n    }\n  }\n\n  const columns = useMemo<Array<GridColDef<Row>>>(\n    () => [\n      {\n        field: 'name',\n        headerName: 'Trace name',\n        type: 'string',\n        flex: 4,\n        display: 'flex',\n        valueGetter: (_, trace): string => `${trace.rootServiceName}: ${trace.rootTraceName}`,\n        renderCell: ({ row }): ReactElement => (\n          <Box sx={{ my: 1 }}>\n            <TraceName row={row} />\n            <br />\n            {Object.entries(row.serviceStats).map(([serviceName, stats]) => (\n              <ServiceChip\n                key={serviceName}\n                serviceName={serviceName}\n                stats={stats}\n                serviceColor={serviceColorGenerator(serviceName)}\n              />\n            ))}\n          </Box>\n        ),\n      },\n      {\n        field: 'spanCount',\n        headerName: 'Spans',\n        type: 'number',\n        headerAlign: 'left',\n        align: 'left',\n        flex: 2,\n        minWidth: 145,\n        display: 'flex',\n        valueGetter: (_, trace) => Object.values(trace.serviceStats).reduce((acc, val) => acc + val.spanCount, 0),\n        renderCell: ({ row }): ReactElement => {\n          let totalSpanCount = 0;\n          let totalErrorCount = 0;\n          for (const stats of Object.values(row.serviceStats)) {\n            totalSpanCount += stats.spanCount;\n            totalErrorCount += stats.errorCount ?? 0;\n          }\n          return (\n            <>\n              <Typography display=\"inline\">{totalSpanCount} spans</Typography>\n              {totalErrorCount > 0 && (\n                <Chip\n                  label={`${totalErrorCount} error${totalErrorCount === 1 ? '' : 's'}`}\n                  sx={{ marginLeft: '5px' }}\n                  icon={<InformationIcon />}\n                  variant=\"outlined\"\n                  size=\"small\"\n                  color=\"error\"\n                />\n              )}\n            </>\n          );\n        },\n      },\n      {\n        field: 'durationMs',\n        headerName: 'Duration',\n        type: 'number',\n        headerAlign: 'left',\n        align: 'left',\n        flex: 1,\n        minWidth: 70,\n        display: 'flex',\n        renderCell: ({ row }) => (\n          <Typography display=\"inline\">\n            {row.durationMs < 1 ? '<1ms' : formatDuration(msToPrometheusDuration(row.durationMs))}\n          </Typography>\n        ),\n      },\n      {\n        field: 'startTimeUnixMs',\n        headerName: 'Start time',\n        type: 'number',\n        headerAlign: 'left',\n        align: 'left',\n        flex: 3,\n        minWidth: 240,\n        display: 'flex',\n        renderCell: ({ row }) => (\n          <Tooltip title={UTC_DATE_FORMATTER(new Date(row.startTimeUnixMs))} placement=\"top\" arrow>\n            <Typography display=\"inline\" key={`st-${row.traceId}`}>\n              {DATE_FORMATTER(new Date(row.startTimeUnixMs))}\n            </Typography>\n          </Tooltip>\n        ),\n      },\n    ],\n    [serviceColorGenerator]\n  );\n\n  return (\n    <DataGrid\n      sx={{ borderWidth: 0 }}\n      columns={columns}\n      rows={rows}\n      getRowHeight={() => 'auto'}\n      getEstimatedRowHeight={() => 66}\n      disableRowSelectionOnClick={true}\n      pageSizeOptions={[10, 20, 50, 100]}\n      initialState={{\n        pagination: { paginationModel: { pageSize: 20 } },\n      }}\n    />\n  );\n}\n\ninterface TraceNameProps {\n  row: Row;\n}\n\nfunction TraceName({ row: trace }: TraceNameProps): ReactElement {\n  if (trace.traceLink) {\n    return (\n      <Link variant=\"body1\" color=\"inherit\" underline=\"hover\" component={RouterLink} to={trace.traceLink}>\n        <strong>{trace.rootServiceName}:</strong> {trace.rootTraceName}\n      </Link>\n    );\n  }\n\n  return (\n    <Typography display=\"inline\">\n      <strong>{trace.rootServiceName}:</strong> {trace.rootTraceName}\n    </Typography>\n  );\n}\n\ninterface ServiceChipProps {\n  serviceName: string;\n  stats: ServiceStats;\n  serviceColor: string;\n}\n\nfunction ServiceChip({ serviceName, stats, serviceColor }: ServiceChipProps): ReactElement {\n  return (\n    <Chip\n      label={serviceName}\n      variant=\"outlined\"\n      size=\"small\"\n      style={{ ['--service-color' as string]: serviceColor }}\n      sx={{ marginTop: '5px', marginRight: '5px', borderColor: 'var(--service-color)' }}\n      avatar={\n        <Avatar\n          sx={{\n            minWidth: 'fit-content', // by default width is fixed to 18px, which is not enough for multi-digit span counts\n            padding: '6px',\n            backgroundColor: 'var(--service-color)',\n            fontSize: '0.65rem',\n            fontWeight: 'bold',\n            textShadow: '0 0 5px #fff',\n          }}\n        >\n          {stats.spanCount}\n        </Avatar>\n      }\n    />\n  );\n}\n"],"names":["Avatar","Box","Chip","Link","Tooltip","Typography","useTheme","formatDuration","msToPrometheusDuration","RouterLink","InformationIcon","useChartsTheme","DataGrid","useCallback","useMemo","getServiceColor","DATE_FORMATTER","Intl","DateTimeFormat","undefined","dateStyle","timeStyle","format","UTC_DATE_FORMATTER","timeZone","DataTable","props","options","result","traceLink","muiTheme","chartsTheme","paletteMode","visual","palette","mode","serviceColorGenerator","serviceName","rows","query","trace","data","searchResult","push","id","traceId","definition","columns","field","headerName","type","flex","display","valueGetter","_","rootServiceName","rootTraceName","renderCell","row","sx","my","TraceName","br","Object","entries","serviceStats","map","stats","ServiceChip","serviceColor","headerAlign","align","minWidth","values","reduce","acc","val","spanCount","totalSpanCount","totalErrorCount","errorCount","label","marginLeft","icon","variant","size","color","durationMs","title","Date","startTimeUnixMs","placement","arrow","borderWidth","getRowHeight","getEstimatedRowHeight","disableRowSelectionOnClick","pageSizeOptions","initialState","pagination","paginationModel","pageSize","underline","component","to","strong","style","marginTop","marginRight","borderColor","avatar","padding","backgroundColor","fontSize","fontWeight","textShadow"],"mappings":"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"}