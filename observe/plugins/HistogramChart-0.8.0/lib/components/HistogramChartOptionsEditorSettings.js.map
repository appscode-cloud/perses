{"version":3,"sources":["../../../src/components/HistogramChartOptionsEditorSettings.tsx"],"sourcesContent":["// Copyright 2025 The Perses Authors\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { TextField } from '@mui/material';\nimport {\n  FormatControls,\n  FormatControlsProps,\n  OptionsEditorColumn,\n  OptionsEditorControl,\n  OptionsEditorGrid,\n  OptionsEditorGroup,\n  ThresholdsEditor,\n  ThresholdsEditorProps,\n} from '@perses-dev/components';\nimport { produce } from 'immer';\nimport merge from 'lodash/merge';\nimport { ReactElement } from 'react';\nimport {\n  DEFAULT_FORMAT,\n  DEFAULT_MAX_PERCENT,\n  DEFAULT_MAX_PERCENT_DECIMAL,\n  DEFAULT_MIN_PERCENT,\n  DEFAULT_MIN_PERCENT_DECIMAL,\n  DEFAULT_THRESHOLDS,\n  HistogramChartOptions,\n  HistogramChartOptionsEditorProps,\n} from '../histogram-chart-model';\n\nexport function HistogramChartOptionsEditorSettings(props: HistogramChartOptionsEditorProps): ReactElement {\n  const { onChange, value } = props;\n\n  const handleUnitChange: FormatControlsProps['onChange'] = (newFormat) => {\n    onChange(\n      produce(value, (draft: HistogramChartOptions) => {\n        draft.format = newFormat;\n      })\n    );\n  };\n\n  const handleThresholdsChange: ThresholdsEditorProps['onChange'] = (thresholds) => {\n    onChange(\n      produce(value, (draft: HistogramChartOptions) => {\n        draft.thresholds = thresholds;\n      })\n    );\n  };\n\n  // ensures decimalPlaces defaults to correct value\n  const format = merge({}, DEFAULT_FORMAT, value.format);\n  const thresholds = merge({}, DEFAULT_THRESHOLDS, value.thresholds);\n\n  // max only needs to be set explicitly for units other than percent and percent-decimal\n  let minPlaceholder = 'Enter value';\n  if (format.unit === 'percent') {\n    minPlaceholder = DEFAULT_MIN_PERCENT.toString();\n  } else if (format.unit === 'percent-decimal') {\n    minPlaceholder = DEFAULT_MIN_PERCENT_DECIMAL.toString();\n  }\n\n  // max only needs to be set explicitly for units other than percent and percent-decimal\n  let maxPlaceholder = 'Enter value';\n  if (format.unit === 'percent') {\n    maxPlaceholder = DEFAULT_MAX_PERCENT.toString();\n  } else if (format.unit === 'percent-decimal') {\n    maxPlaceholder = DEFAULT_MAX_PERCENT_DECIMAL.toString();\n  }\n\n  return (\n    <OptionsEditorGrid>\n      <OptionsEditorColumn>\n        <OptionsEditorGroup title=\"Misc\">\n          <FormatControls value={format} onChange={handleUnitChange} />\n          <OptionsEditorControl\n            label=\"Min\"\n            control={\n              <TextField\n                type=\"number\"\n                value={value.min ?? ''}\n                onChange={(e) => {\n                  // ensure empty value resets to undef to allow chart to calculate max\n                  const newValue = e.target.value ? Number(e.target.value) : undefined;\n                  onChange(\n                    produce(value, (draft: HistogramChartOptions) => {\n                      draft.min = newValue;\n                    })\n                  );\n                }}\n                placeholder={minPlaceholder}\n                sx={{ width: '100%' }}\n              />\n            }\n          />\n          <OptionsEditorControl\n            label=\"Max\"\n            control={\n              <TextField\n                type=\"number\"\n                value={value.max ?? ''}\n                onChange={(e) => {\n                  // ensure empty value resets to undef to allow chart to calculate max\n                  const newValue = e.target.value ? Number(e.target.value) : undefined;\n                  onChange(\n                    produce(value, (draft: HistogramChartOptions) => {\n                      draft.max = newValue;\n                    })\n                  );\n                }}\n                placeholder={maxPlaceholder}\n                sx={{ width: '100%' }}\n              />\n            }\n          />\n        </OptionsEditorGroup>\n      </OptionsEditorColumn>\n      <OptionsEditorColumn>\n        <ThresholdsEditor thresholds={thresholds} onChange={handleThresholdsChange} />\n      </OptionsEditorColumn>\n    </OptionsEditorGrid>\n  );\n}\n"],"names":["TextField","FormatControls","OptionsEditorColumn","OptionsEditorControl","OptionsEditorGrid","OptionsEditorGroup","ThresholdsEditor","produce","merge","DEFAULT_FORMAT","DEFAULT_MAX_PERCENT","DEFAULT_MAX_PERCENT_DECIMAL","DEFAULT_MIN_PERCENT","DEFAULT_MIN_PERCENT_DECIMAL","DEFAULT_THRESHOLDS","HistogramChartOptionsEditorSettings","props","onChange","value","handleUnitChange","newFormat","draft","format","handleThresholdsChange","thresholds","minPlaceholder","unit","toString","maxPlaceholder","title","label","control","type","min","e","newValue","target","Number","undefined","placeholder","sx","width","max"],"mappings":"AAAA,oCAAoC;AACpC,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAEjC,SAASA,SAAS,QAAQ,gBAAgB;AAC1C,SACEC,cAAc,EAEdC,mBAAmB,EACnBC,oBAAoB,EACpBC,iBAAiB,EACjBC,kBAAkB,EAClBC,gBAAgB,QAEX,yBAAyB;AAChC,SAASC,OAAO,QAAQ,QAAQ;AAChC,OAAOC,WAAW,eAAe;AAEjC,SACEC,cAAc,EACdC,mBAAmB,EACnBC,2BAA2B,EAC3BC,mBAAmB,EACnBC,2BAA2B,EAC3BC,kBAAkB,QAGb,2BAA2B;AAElC,OAAO,SAASC,oCAAoCC,KAAuC;IACzF,MAAM,EAAEC,QAAQ,EAAEC,KAAK,EAAE,GAAGF;IAE5B,MAAMG,mBAAoD,CAACC;QACzDH,SACEV,QAAQW,OAAO,CAACG;YACdA,MAAMC,MAAM,GAAGF;QACjB;IAEJ;IAEA,MAAMG,yBAA4D,CAACC;QACjEP,SACEV,QAAQW,OAAO,CAACG;YACdA,MAAMG,UAAU,GAAGA;QACrB;IAEJ;IAEA,kDAAkD;IAClD,MAAMF,SAASd,MAAM,CAAC,GAAGC,gBAAgBS,MAAMI,MAAM;IACrD,MAAME,aAAahB,MAAM,CAAC,GAAGM,oBAAoBI,MAAMM,UAAU;IAEjE,uFAAuF;IACvF,IAAIC,iBAAiB;IACrB,IAAIH,OAAOI,IAAI,KAAK,WAAW;QAC7BD,iBAAiBb,oBAAoBe,QAAQ;IAC/C,OAAO,IAAIL,OAAOI,IAAI,KAAK,mBAAmB;QAC5CD,iBAAiBZ,4BAA4Bc,QAAQ;IACvD;IAEA,uFAAuF;IACvF,IAAIC,iBAAiB;IACrB,IAAIN,OAAOI,IAAI,KAAK,WAAW;QAC7BE,iBAAiBlB,oBAAoBiB,QAAQ;IAC/C,OAAO,IAAIL,OAAOI,IAAI,KAAK,mBAAmB;QAC5CE,iBAAiBjB,4BAA4BgB,QAAQ;IACvD;IAEA,qBACE,MAACvB;;0BACC,KAACF;0BACC,cAAA,MAACG;oBAAmBwB,OAAM;;sCACxB,KAAC5B;4BAAeiB,OAAOI;4BAAQL,UAAUE;;sCACzC,KAAChB;4BACC2B,OAAM;4BACNC,uBACE,KAAC/B;gCACCgC,MAAK;gCACLd,OAAOA,MAAMe,GAAG,IAAI;gCACpBhB,UAAU,CAACiB;oCACT,qEAAqE;oCACrE,MAAMC,WAAWD,EAAEE,MAAM,CAAClB,KAAK,GAAGmB,OAAOH,EAAEE,MAAM,CAAClB,KAAK,IAAIoB;oCAC3DrB,SACEV,QAAQW,OAAO,CAACG;wCACdA,MAAMY,GAAG,GAAGE;oCACd;gCAEJ;gCACAI,aAAad;gCACbe,IAAI;oCAAEC,OAAO;gCAAO;;;sCAI1B,KAACtC;4BACC2B,OAAM;4BACNC,uBACE,KAAC/B;gCACCgC,MAAK;gCACLd,OAAOA,MAAMwB,GAAG,IAAI;gCACpBzB,UAAU,CAACiB;oCACT,qEAAqE;oCACrE,MAAMC,WAAWD,EAAEE,MAAM,CAAClB,KAAK,GAAGmB,OAAOH,EAAEE,MAAM,CAAClB,KAAK,IAAIoB;oCAC3DrB,SACEV,QAAQW,OAAO,CAACG;wCACdA,MAAMqB,GAAG,GAAGP;oCACd;gCAEJ;gCACAI,aAAaX;gCACbY,IAAI;oCAAEC,OAAO;gCAAO;;;;;;0BAM9B,KAACvC;0BACC,cAAA,KAACI;oBAAiBkB,YAAYA;oBAAYP,UAAUM;;;;;AAI5D"}