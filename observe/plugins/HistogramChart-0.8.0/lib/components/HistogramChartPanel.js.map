{"version":3,"sources":["../../../src/components/HistogramChartPanel.tsx"],"sourcesContent":["// Copyright 2025 The Perses Authors\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Box, Stack, Typography } from '@mui/material';\nimport { TimeSeriesData } from '@perses-dev/core';\nimport { PanelProps } from '@perses-dev/plugin-system';\nimport merge from 'lodash/merge';\nimport { ReactElement, useMemo } from 'react';\nimport { useChartsTheme } from '@perses-dev/components';\nimport { DEFAULT_FORMAT, DEFAULT_THRESHOLDS, HistogramChartOptions } from '../histogram-chart-model';\nimport { HistogramChart, HistogramChartData } from './HistogramChart';\n\nconst HISTOGRAM_MIN_WIDTH = 90;\n\nexport type HistogramChartPanelProps = PanelProps<HistogramChartOptions, TimeSeriesData>;\n\nexport function HistogramChartPanel(props: HistogramChartPanelProps): ReactElement | null {\n  const { spec: pluginSpec, contentDimensions, queryResults } = props;\n  const { min, max } = pluginSpec;\n\n  const chartsTheme = useChartsTheme();\n  // ensures all default format properties set if undef\n  const format = merge({}, DEFAULT_FORMAT, pluginSpec.format);\n  const thresholds = merge({}, DEFAULT_THRESHOLDS, pluginSpec.thresholds);\n\n  const histogramData: HistogramChartData[] = useMemo(() => {\n    const histograms: HistogramChartData[] = [];\n\n    for (const result of queryResults) {\n      for (const timeSeries of result.data.series) {\n        if (!timeSeries.histograms || timeSeries.histograms.length === 0) {\n          continue;\n        }\n\n        const [, histoBuckets] = timeSeries.histograms[0]!;\n        if (histoBuckets && histoBuckets.buckets) {\n          histograms.push({ buckets: histoBuckets.buckets });\n        }\n      }\n    }\n    return histograms;\n  }, [queryResults]);\n\n  // no data message handled inside chart component\n  if (histogramData.length === 0) {\n    return (\n      <Stack justifyContent=\"center\" height=\"100%\">\n        <Typography variant=\"body2\" textAlign=\"center\">\n          No data available (only native histograms are supported for now)\n        </Typography>\n      </Stack>\n    );\n  }\n\n  if (contentDimensions === undefined) return null;\n\n  // accounts for showing a separate chart for each time series\n  let chartWidth = contentDimensions.width / histogramData.length - chartsTheme.container.padding.default;\n  if (chartWidth < HISTOGRAM_MIN_WIDTH && histogramData.length > 1) {\n    // enables horizontal scroll when charts overflow outside of panel\n    chartWidth = HISTOGRAM_MIN_WIDTH;\n  }\n\n  return (\n    <Stack\n      direction=\"row\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      sx={{\n        // so scrollbar only shows when necessary\n        overflowX: histogramData.length > 1 ? 'scroll' : 'auto',\n      }}\n    >\n      {histogramData.map((series, seriesIndex) => {\n        return (\n          <Box key={`histogram-series-${seriesIndex}`}>\n            <HistogramChart\n              width={chartWidth}\n              height={contentDimensions.height}\n              data={series}\n              format={format}\n              min={min}\n              max={max}\n              thresholds={thresholds}\n            />\n          </Box>\n        );\n      })}\n    </Stack>\n  );\n}\n"],"names":["Box","Stack","Typography","merge","useMemo","useChartsTheme","DEFAULT_FORMAT","DEFAULT_THRESHOLDS","HistogramChart","HISTOGRAM_MIN_WIDTH","HistogramChartPanel","props","spec","pluginSpec","contentDimensions","queryResults","min","max","chartsTheme","format","thresholds","histogramData","histograms","result","timeSeries","data","series","length","histoBuckets","buckets","push","justifyContent","height","variant","textAlign","undefined","chartWidth","width","container","padding","default","direction","alignItems","sx","overflowX","map","seriesIndex"],"mappings":"AAAA,oCAAoC;AACpC,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAEjC,SAASA,GAAG,EAAEC,KAAK,EAAEC,UAAU,QAAQ,gBAAgB;AAGvD,OAAOC,WAAW,eAAe;AACjC,SAAuBC,OAAO,QAAQ,QAAQ;AAC9C,SAASC,cAAc,QAAQ,yBAAyB;AACxD,SAASC,cAAc,EAAEC,kBAAkB,QAA+B,2BAA2B;AACrG,SAASC,cAAc,QAA4B,mBAAmB;AAEtE,MAAMC,sBAAsB;AAI5B,OAAO,SAASC,oBAAoBC,KAA+B;IACjE,MAAM,EAAEC,MAAMC,UAAU,EAAEC,iBAAiB,EAAEC,YAAY,EAAE,GAAGJ;IAC9D,MAAM,EAAEK,GAAG,EAAEC,GAAG,EAAE,GAAGJ;IAErB,MAAMK,cAAcb;IACpB,qDAAqD;IACrD,MAAMc,SAAShB,MAAM,CAAC,GAAGG,gBAAgBO,WAAWM,MAAM;IAC1D,MAAMC,aAAajB,MAAM,CAAC,GAAGI,oBAAoBM,WAAWO,UAAU;IAEtE,MAAMC,gBAAsCjB,QAAQ;QAClD,MAAMkB,aAAmC,EAAE;QAE3C,KAAK,MAAMC,UAAUR,aAAc;YACjC,KAAK,MAAMS,cAAcD,OAAOE,IAAI,CAACC,MAAM,CAAE;gBAC3C,IAAI,CAACF,WAAWF,UAAU,IAAIE,WAAWF,UAAU,CAACK,MAAM,KAAK,GAAG;oBAChE;gBACF;gBAEA,MAAM,GAAGC,aAAa,GAAGJ,WAAWF,UAAU,CAAC,EAAE;gBACjD,IAAIM,gBAAgBA,aAAaC,OAAO,EAAE;oBACxCP,WAAWQ,IAAI,CAAC;wBAAED,SAASD,aAAaC,OAAO;oBAAC;gBAClD;YACF;QACF;QACA,OAAOP;IACT,GAAG;QAACP;KAAa;IAEjB,iDAAiD;IACjD,IAAIM,cAAcM,MAAM,KAAK,GAAG;QAC9B,qBACE,KAAC1B;YAAM8B,gBAAe;YAASC,QAAO;sBACpC,cAAA,KAAC9B;gBAAW+B,SAAQ;gBAAQC,WAAU;0BAAS;;;IAKrD;IAEA,IAAIpB,sBAAsBqB,WAAW,OAAO;IAE5C,6DAA6D;IAC7D,IAAIC,aAAatB,kBAAkBuB,KAAK,GAAGhB,cAAcM,MAAM,GAAGT,YAAYoB,SAAS,CAACC,OAAO,CAACC,OAAO;IACvG,IAAIJ,aAAa3B,uBAAuBY,cAAcM,MAAM,GAAG,GAAG;QAChE,kEAAkE;QAClES,aAAa3B;IACf;IAEA,qBACE,KAACR;QACCwC,WAAU;QACVV,gBAAe;QACfW,YAAW;QACXC,IAAI;YACF,yCAAyC;YACzCC,WAAWvB,cAAcM,MAAM,GAAG,IAAI,WAAW;QACnD;kBAECN,cAAcwB,GAAG,CAAC,CAACnB,QAAQoB;YAC1B,qBACE,KAAC9C;0BACC,cAAA,KAACQ;oBACC6B,OAAOD;oBACPJ,QAAQlB,kBAAkBkB,MAAM;oBAChCP,MAAMC;oBACNP,QAAQA;oBACRH,KAAKA;oBACLC,KAAKA;oBACLG,YAAYA;;eARN,CAAC,iBAAiB,EAAE0B,aAAa;QAY/C;;AAGN"}