{"version":3,"sources":["../../src/GaugeChartOptionsEditorSettings.tsx"],"sourcesContent":["// Copyright 2023 The Perses Authors\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { TextField } from '@mui/material';\nimport {\n  FormatControls,\n  FormatControlsProps,\n  OptionsEditorColumn,\n  OptionsEditorControl,\n  OptionsEditorGrid,\n  OptionsEditorGroup,\n  ThresholdsEditor,\n} from '@perses-dev/components';\nimport { ThresholdOptions } from '@perses-dev/core';\nimport { CalculationSelector, CalculationSelectorProps } from '@perses-dev/plugin-system';\nimport { produce } from 'immer';\nimport merge from 'lodash/merge';\nimport { ReactElement } from 'react';\nimport {\n  DEFAULT_FORMAT,\n  DEFAULT_MAX_PERCENT,\n  DEFAULT_MAX_PERCENT_DECIMAL,\n  GaugeChartOptions,\n  GaugeChartOptionsEditorProps,\n} from './gauge-chart-model';\n\nexport function GaugeChartOptionsEditorSettings(props: GaugeChartOptionsEditorProps): ReactElement {\n  const { onChange, value } = props;\n\n  const handleCalculationChange: CalculationSelectorProps['onChange'] = (newCalculation) => {\n    onChange(\n      produce(value, (draft: GaugeChartOptions) => {\n        draft.calculation = newCalculation;\n      })\n    );\n  };\n\n  const handleUnitChange: FormatControlsProps['onChange'] = (newFormat) => {\n    onChange(\n      produce(value, (draft: GaugeChartOptions) => {\n        draft.format = newFormat;\n      })\n    );\n  };\n\n  // ensures decimalPlaces defaults to correct value\n  const format = merge({}, DEFAULT_FORMAT, value.format);\n\n  // max only needs to be set explicitly for units other than percent and percent-decimal\n  let maxPlaceholder = 'Enter value';\n  if (format.unit === 'percent') {\n    maxPlaceholder = DEFAULT_MAX_PERCENT.toString();\n  } else if (format.unit === 'percent-decimal') {\n    maxPlaceholder = DEFAULT_MAX_PERCENT_DECIMAL.toString();\n  }\n\n  const handleThresholdsChange = (thresholds: ThresholdOptions): void => {\n    onChange(\n      produce(value, (draft: GaugeChartOptions) => {\n        draft.thresholds = thresholds;\n      })\n    );\n  };\n\n  return (\n    <OptionsEditorGrid>\n      <OptionsEditorColumn>\n        <OptionsEditorGroup title=\"Misc\">\n          <FormatControls value={format} onChange={handleUnitChange} />\n          <CalculationSelector value={value.calculation} onChange={handleCalculationChange} />\n          <OptionsEditorControl\n            label=\"Max\"\n            control={\n              <TextField\n                type=\"number\"\n                value={value.max ?? ''}\n                onChange={(e) => {\n                  // ensure empty value resets to undef to allow chart to calculate max\n                  const newValue = e.target.value ? Number(e.target.value) : undefined;\n                  onChange(\n                    produce(value, (draft: GaugeChartOptions) => {\n                      draft.max = newValue;\n                    })\n                  );\n                }}\n                placeholder={maxPlaceholder}\n              />\n            }\n          />\n        </OptionsEditorGroup>\n      </OptionsEditorColumn>\n      <OptionsEditorColumn>\n        <ThresholdsEditor thresholds={value.thresholds} onChange={handleThresholdsChange} />\n      </OptionsEditorColumn>\n    </OptionsEditorGrid>\n  );\n}\n"],"names":["TextField","FormatControls","OptionsEditorColumn","OptionsEditorControl","OptionsEditorGrid","OptionsEditorGroup","ThresholdsEditor","CalculationSelector","produce","merge","DEFAULT_FORMAT","DEFAULT_MAX_PERCENT","DEFAULT_MAX_PERCENT_DECIMAL","GaugeChartOptionsEditorSettings","props","onChange","value","handleCalculationChange","newCalculation","draft","calculation","handleUnitChange","newFormat","format","maxPlaceholder","unit","toString","handleThresholdsChange","thresholds","title","label","control","type","max","e","newValue","target","Number","undefined","placeholder"],"mappings":"AAAA,oCAAoC;AACpC,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAEjC,SAASA,SAAS,QAAQ,gBAAgB;AAC1C,SACEC,cAAc,EAEdC,mBAAmB,EACnBC,oBAAoB,EACpBC,iBAAiB,EACjBC,kBAAkB,EAClBC,gBAAgB,QACX,yBAAyB;AAEhC,SAASC,mBAAmB,QAAkC,4BAA4B;AAC1F,SAASC,OAAO,QAAQ,QAAQ;AAChC,OAAOC,WAAW,eAAe;AAEjC,SACEC,cAAc,EACdC,mBAAmB,EACnBC,2BAA2B,QAGtB,sBAAsB;AAE7B,OAAO,SAASC,gCAAgCC,KAAmC;IACjF,MAAM,EAAEC,QAAQ,EAAEC,KAAK,EAAE,GAAGF;IAE5B,MAAMG,0BAAgE,CAACC;QACrEH,SACEP,QAAQQ,OAAO,CAACG;YACdA,MAAMC,WAAW,GAAGF;QACtB;IAEJ;IAEA,MAAMG,mBAAoD,CAACC;QACzDP,SACEP,QAAQQ,OAAO,CAACG;YACdA,MAAMI,MAAM,GAAGD;QACjB;IAEJ;IAEA,kDAAkD;IAClD,MAAMC,SAASd,MAAM,CAAC,GAAGC,gBAAgBM,MAAMO,MAAM;IAErD,uFAAuF;IACvF,IAAIC,iBAAiB;IACrB,IAAID,OAAOE,IAAI,KAAK,WAAW;QAC7BD,iBAAiBb,oBAAoBe,QAAQ;IAC/C,OAAO,IAAIH,OAAOE,IAAI,KAAK,mBAAmB;QAC5CD,iBAAiBZ,4BAA4Bc,QAAQ;IACvD;IAEA,MAAMC,yBAAyB,CAACC;QAC9Bb,SACEP,QAAQQ,OAAO,CAACG;YACdA,MAAMS,UAAU,GAAGA;QACrB;IAEJ;IAEA,qBACE,MAACxB;;0BACC,KAACF;0BACC,cAAA,MAACG;oBAAmBwB,OAAM;;sCACxB,KAAC5B;4BAAee,OAAOO;4BAAQR,UAAUM;;sCACzC,KAACd;4BAAoBS,OAAOA,MAAMI,WAAW;4BAAEL,UAAUE;;sCACzD,KAACd;4BACC2B,OAAM;4BACNC,uBACE,KAAC/B;gCACCgC,MAAK;gCACLhB,OAAOA,MAAMiB,GAAG,IAAI;gCACpBlB,UAAU,CAACmB;oCACT,qEAAqE;oCACrE,MAAMC,WAAWD,EAAEE,MAAM,CAACpB,KAAK,GAAGqB,OAAOH,EAAEE,MAAM,CAACpB,KAAK,IAAIsB;oCAC3DvB,SACEP,QAAQQ,OAAO,CAACG;wCACdA,MAAMc,GAAG,GAAGE;oCACd;gCAEJ;gCACAI,aAAaf;;;;;;0BAMvB,KAACtB;0BACC,cAAA,KAACI;oBAAiBsB,YAAYZ,MAAMY,UAAU;oBAAEb,UAAUY;;;;;AAIlE"}