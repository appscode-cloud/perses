{"version":3,"sources":["../../src/GaugeChartPanel.tsx"],"sourcesContent":["// Copyright 2023 The Perses Authors\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Box, Skeleton, Stack } from '@mui/material';\nimport { useChartsTheme } from '@perses-dev/components';\nimport { CalculationsMap, DEFAULT_CALCULATION, TimeSeriesData } from '@perses-dev/core';\nimport { PanelProps } from '@perses-dev/plugin-system';\nimport type { GaugeSeriesOption } from 'echarts';\nimport merge from 'lodash/merge';\nimport { ReactElement, useMemo } from 'react';\nimport {\n  DEFAULT_FORMAT,\n  DEFAULT_MAX_PERCENT,\n  DEFAULT_MAX_PERCENT_DECIMAL,\n  GaugeChartOptions,\n} from './gauge-chart-model';\nimport { convertThresholds, defaultThresholdInput } from './thresholds';\nimport { GaugeChartBase, GaugeSeries } from './GaugeChartBase';\n\nconst EMPTY_GAUGE_SERIES: GaugeSeries = { label: '', value: undefined };\nconst GAUGE_MIN_WIDTH = 90;\nconst PANEL_PADDING_OFFSET = 20;\n\nexport type GaugeChartPanelProps = PanelProps<GaugeChartOptions, TimeSeriesData>;\n\nexport function GaugeChartPanel(props: GaugeChartPanelProps): ReactElement | null {\n  const { spec: pluginSpec, contentDimensions, queryResults } = props;\n  const { calculation, max } = pluginSpec;\n\n  const { thresholds: thresholdsColors } = useChartsTheme();\n\n  // ensures all default format properties set if undef\n  const format = merge({}, DEFAULT_FORMAT, pluginSpec.format);\n\n  const thresholds = pluginSpec.thresholds ?? defaultThresholdInput;\n\n  const gaugeData: GaugeSeries[] = useMemo(() => {\n    if (queryResults[0]?.data === undefined) {\n      return [];\n    }\n\n    if (CalculationsMap[calculation] === undefined) {\n      console.warn(`Invalid GaugeChart panel calculation ${calculation}, fallback to ${DEFAULT_CALCULATION}`);\n    }\n\n    const calculate = CalculationsMap[calculation] ?? CalculationsMap[DEFAULT_CALCULATION];\n\n    const seriesData: GaugeSeries[] = [];\n    for (const timeSeries of queryResults[0].data.series) {\n      const series = {\n        value: calculate(timeSeries.values),\n        label: timeSeries.formattedName ?? '',\n      };\n      seriesData.push(series);\n    }\n    return seriesData;\n  }, [queryResults, calculation]);\n\n  if (contentDimensions === undefined) return null;\n\n  // needed for end value of last threshold color segment\n  let thresholdMax = max;\n  if (thresholdMax === undefined) {\n    if (format.unit === 'percent') {\n      thresholdMax = DEFAULT_MAX_PERCENT;\n    } else {\n      thresholdMax = DEFAULT_MAX_PERCENT_DECIMAL;\n    }\n  }\n  const axisLineColors = convertThresholds(thresholds, format, thresholdMax, thresholdsColors);\n\n  const axisLine: GaugeSeriesOption['axisLine'] = {\n    show: true,\n    lineStyle: {\n      width: 5,\n      color: axisLineColors,\n    },\n  };\n\n  // no data message handled inside chart component\n  if (gaugeData.length === 0) {\n    return (\n      <GaugeChartBase\n        width={contentDimensions.width}\n        height={contentDimensions.height}\n        data={EMPTY_GAUGE_SERIES}\n        format={format}\n        axisLine={axisLine}\n        max={thresholdMax}\n      />\n    );\n  }\n\n  // accounts for showing a separate chart for each time series\n  let chartWidth = contentDimensions.width / gaugeData.length - PANEL_PADDING_OFFSET;\n  if (chartWidth < GAUGE_MIN_WIDTH && gaugeData.length > 1) {\n    // enables horizontal scroll when charts overflow outside of panel\n    chartWidth = GAUGE_MIN_WIDTH;\n  }\n\n  const hasMultipleCharts = gaugeData.length > 1;\n\n  return (\n    <Stack\n      direction=\"row\"\n      spacing={hasMultipleCharts ? 2 : 0}\n      justifyContent={hasMultipleCharts ? 'left' : 'center'}\n      alignItems=\"center\"\n      sx={{\n        // so scrollbar only shows when necessary\n        overflowX: gaugeData.length > 1 ? 'scroll' : 'auto',\n      }}\n    >\n      {gaugeData.map((series, seriesIndex) => {\n        return (\n          <Box key={`gauge-series-${seriesIndex}`}>\n            <GaugeChartBase\n              width={chartWidth}\n              height={contentDimensions.height}\n              data={series}\n              format={format}\n              axisLine={axisLine}\n              max={thresholdMax}\n            />\n          </Box>\n        );\n      })}\n    </Stack>\n  );\n}\n\nexport function GaugeChartLoading({ contentDimensions }: GaugeChartPanelProps): React.ReactElement | null {\n  if (contentDimensions === undefined) return null;\n  return (\n    <Skeleton\n      sx={{ margin: '0 auto' }}\n      variant=\"circular\"\n      width={contentDimensions.width > contentDimensions.height ? contentDimensions.height : contentDimensions.width}\n      height={contentDimensions.height}\n    />\n  );\n}\n"],"names":["Box","Skeleton","Stack","useChartsTheme","CalculationsMap","DEFAULT_CALCULATION","merge","useMemo","DEFAULT_FORMAT","DEFAULT_MAX_PERCENT","DEFAULT_MAX_PERCENT_DECIMAL","convertThresholds","defaultThresholdInput","GaugeChartBase","EMPTY_GAUGE_SERIES","label","value","undefined","GAUGE_MIN_WIDTH","PANEL_PADDING_OFFSET","GaugeChartPanel","props","spec","pluginSpec","contentDimensions","queryResults","calculation","max","thresholds","thresholdsColors","format","gaugeData","data","console","warn","calculate","seriesData","timeSeries","series","values","formattedName","push","thresholdMax","unit","axisLineColors","axisLine","show","lineStyle","width","color","length","height","chartWidth","hasMultipleCharts","direction","spacing","justifyContent","alignItems","sx","overflowX","map","seriesIndex","GaugeChartLoading","margin","variant"],"mappings":"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"}