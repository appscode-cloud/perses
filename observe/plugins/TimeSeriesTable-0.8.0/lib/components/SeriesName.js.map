{"version":3,"sources":["../../../src/components/SeriesName.tsx"],"sourcesContent":["// Copyright 2024 The Perses Authors\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Labels } from '@perses-dev/core';\nimport { ReactElement, MouseEvent } from 'react';\nimport { useSnackbar } from '@perses-dev/components';\nimport { Typography } from '@mui/material';\n\ninterface SeriesNameProps {\n  name: string;\n  labels?: Labels;\n  formattedName?: string;\n  isFormatted?: boolean;\n}\n\n/*\n * Display a series with labels in bold and with a copy to clipboard feature if isFormatted is enabled\n * Else it will only display the series in plain text (mostly use for performance reasons)\n */\nexport function SeriesName({ name, labels, formattedName, isFormatted }: SeriesNameProps): ReactElement {\n  if (isFormatted && labels && Object.keys(labels).length > 0) {\n    return <FormatedSeriesName labels={labels} />;\n  }\n  return <Typography sx={{ textWrap: 'auto' }}>{formattedName ?? name}</Typography>;\n}\n\nfunction FormatedSeriesName({ labels }: { labels: Labels }): ReactElement {\n  const { infoSnackbar } = useSnackbar();\n\n  const labelNodes: ReactElement[] = [];\n  let first = true;\n\n  function copyToClipboard(e: MouseEvent<HTMLSpanElement>): void {\n    const copyText = e.currentTarget.innerText || '';\n    navigator.clipboard\n      .writeText(copyText.trim())\n      .then(() => {\n        infoSnackbar(`Copied label matcher: ${copyText}`);\n      })\n      .catch((reason) => {\n        console.error(`unable to copy text: ${reason}`);\n      });\n  }\n\n  for (const label in labels) {\n    if (label === '__name__') {\n      continue;\n    }\n\n    labelNodes.push(\n      <span key={label}>\n        {!first && ', '}\n        <Typography\n          display=\"inline\"\n          component=\"span\"\n          sx={{\n            '&:hover': {\n              cursor: 'pointer',\n              textDecoration: 'underline',\n            },\n          }}\n          onClick={copyToClipboard}\n          title=\"Click to copy label matcher\"\n        >\n          <strong>{label}</strong>=<span>&quot;{labels[label]}&quot;</span>\n        </Typography>\n      </span>\n    );\n\n    if (first) {\n      first = false;\n    }\n  }\n\n  return (\n    <Typography sx={{ textWrap: 'auto' }}>\n      {labels ? labels.__name__ : ''}\n      {'{'}\n      {labelNodes}\n      {'}'}\n    </Typography>\n  );\n}\n"],"names":["useSnackbar","Typography","SeriesName","name","labels","formattedName","isFormatted","Object","keys","length","FormatedSeriesName","sx","textWrap","infoSnackbar","labelNodes","first","copyToClipboard","e","copyText","currentTarget","innerText","navigator","clipboard","writeText","trim","then","catch","reason","console","error","label","push","span","display","component","cursor","textDecoration","onClick","title","strong","__name__"],"mappings":"AAAA,oCAAoC;AACpC,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAIjC,SAASA,WAAW,QAAQ,yBAAyB;AACrD,SAASC,UAAU,QAAQ,gBAAgB;AAS3C;;;CAGC,GACD,OAAO,SAASC,WAAW,EAAEC,IAAI,EAAEC,MAAM,EAAEC,aAAa,EAAEC,WAAW,EAAmB;IACtF,IAAIA,eAAeF,UAAUG,OAAOC,IAAI,CAACJ,QAAQK,MAAM,GAAG,GAAG;QAC3D,qBAAO,KAACC;YAAmBN,QAAQA;;IACrC;IACA,qBAAO,KAACH;QAAWU,IAAI;YAAEC,UAAU;QAAO;kBAAIP,iBAAiBF;;AACjE;AAEA,SAASO,mBAAmB,EAAEN,MAAM,EAAsB;IACxD,MAAM,EAAES,YAAY,EAAE,GAAGb;IAEzB,MAAMc,aAA6B,EAAE;IACrC,IAAIC,QAAQ;IAEZ,SAASC,gBAAgBC,CAA8B;QACrD,MAAMC,WAAWD,EAAEE,aAAa,CAACC,SAAS,IAAI;QAC9CC,UAAUC,SAAS,CAChBC,SAAS,CAACL,SAASM,IAAI,IACvBC,IAAI,CAAC;YACJZ,aAAa,CAAC,sBAAsB,EAAEK,UAAU;QAClD,GACCQ,KAAK,CAAC,CAACC;YACNC,QAAQC,KAAK,CAAC,CAAC,qBAAqB,EAAEF,QAAQ;QAChD;IACJ;IAEA,IAAK,MAAMG,SAAS1B,OAAQ;QAC1B,IAAI0B,UAAU,YAAY;YACxB;QACF;QAEAhB,WAAWiB,IAAI,eACb,MAACC;;gBACE,CAACjB,SAAS;8BACX,MAACd;oBACCgC,SAAQ;oBACRC,WAAU;oBACVvB,IAAI;wBACF,WAAW;4BACTwB,QAAQ;4BACRC,gBAAgB;wBAClB;oBACF;oBACAC,SAASrB;oBACTsB,OAAM;;sCAEN,KAACC;sCAAQT;;wBAAe;sCAAC,MAACE;;gCAAK;gCAAO5B,MAAM,CAAC0B,MAAM;gCAAC;;;;;;WAd7CA;QAmBb,IAAIf,OAAO;YACTA,QAAQ;QACV;IACF;IAEA,qBACE,MAACd;QAAWU,IAAI;YAAEC,UAAU;QAAO;;YAChCR,SAASA,OAAOoC,QAAQ,GAAG;YAC3B;YACA1B;YACA;;;AAGP"}