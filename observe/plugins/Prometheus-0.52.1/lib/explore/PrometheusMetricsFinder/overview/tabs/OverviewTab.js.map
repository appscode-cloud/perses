{"version":3,"sources":["../../../../../../src/explore/PrometheusMetricsFinder/overview/tabs/OverviewTab.tsx"],"sourcesContent":["// Copyright 2024 The Perses Authors\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { DatasourceSelector } from '@perses-dev/core';\nimport { ReactElement, useMemo, useState } from 'react';\nimport {\n  Autocomplete,\n  Button,\n  Chip,\n  CircularProgress,\n  Divider,\n  IconButton,\n  MenuItem,\n  Select,\n  SelectChangeEvent,\n  Skeleton,\n  Stack,\n  StackProps,\n  TextField,\n  Typography,\n  useMediaQuery,\n  useTheme,\n} from '@mui/material';\nimport PlusIcon from 'mdi-material-ui/Plus';\nimport CheckIcon from 'mdi-material-ui/Check';\nimport CloseIcon from 'mdi-material-ui/Close';\nimport { ErrorAlert } from '@perses-dev/components';\nimport { LabelFilter, LabelValueCounter, Operator } from '../../types';\nimport { ListboxComponent } from '../../filter/FilterInputs';\nimport { useMetricMetadata, useSeriesStates } from '../../utils';\nimport { MetricChip } from '../../display/MetricChip';\n\nexport interface LabelValuesRowProps extends StackProps {\n  label: string;\n  valueCounters: LabelValueCounter[];\n  onFilterAdd: (filter: LabelFilter) => void;\n  orderBy?: 'asc' | 'amount';\n}\n\nexport function LabelValuesRow({ label, valueCounters, onFilterAdd, ...props }: LabelValuesRowProps): ReactElement {\n  const [isAddingFilter, setIsAddingFilter] = useState(false);\n  const [operator, setOperator] = useState<Operator>('=');\n  const [value, setValue] = useState('');\n  const [showAllValues, setShowAllValues] = useState(false);\n  const isMobileSize = useMediaQuery(useTheme().breakpoints.down('md'));\n\n  const displayedValueCounters = useMemo(() => {\n    if (showAllValues) {\n      return valueCounters;\n    }\n    return valueCounters.slice(0, 5);\n  }, [showAllValues, valueCounters]);\n\n  return (\n    <Stack\n      key={label}\n      sx={{ width: '100%' }}\n      direction={isMobileSize ? 'column' : 'row'}\n      alignItems=\"center\"\n      gap={2}\n      {...props}\n    >\n      <Stack\n        sx={{ width: '100%', height: '100%' }}\n        justifyContent=\"space-between\"\n        alignContent=\"center\"\n        direction={isMobileSize ? 'column' : 'row'}\n      >\n        <Typography sx={{ fontFamily: 'monospace' }} pl={isMobileSize ? 0 : 1}>\n          {label}\n        </Typography>\n        <Stack direction=\"row\" gap={1} alignItems=\"center\">\n          {isAddingFilter ? (\n            <>\n              <Select\n                size=\"small\"\n                value={operator}\n                variant=\"outlined\"\n                onChange={(event: SelectChangeEvent) => {\n                  setOperator(event.target.value as Operator);\n                }}\n              >\n                <MenuItem value=\"=\">=</MenuItem>\n                <MenuItem value=\"!=\">!=</MenuItem>\n                <MenuItem value=\"=~\">=~</MenuItem>\n                <MenuItem value=\"!~\">!~</MenuItem>\n              </Select>\n              <Autocomplete\n                freeSolo\n                limitTags={1}\n                disableClearable\n                options={valueCounters.map((counters) => counters.labelValue)}\n                value={value}\n                ListboxComponent={ListboxComponent}\n                sx={{ width: 250 }}\n                renderInput={(params) => {\n                  return <TextField {...params} label=\"Value\" variant=\"outlined\" fullWidth size=\"small\" />;\n                }}\n                onInputChange={(_, newValue) => {\n                  setValue(newValue);\n                }}\n              />\n              <IconButton\n                aria-label=\"confirm\"\n                onClick={() => {\n                  onFilterAdd({ label, labelValues: [value], operator });\n                  setIsAddingFilter(false);\n                }}\n              >\n                <CheckIcon />\n              </IconButton>\n              <IconButton\n                aria-label=\"cancel\"\n                onClick={() => {\n                  setIsAddingFilter(false);\n                }}\n              >\n                <CloseIcon />\n              </IconButton>\n            </>\n          ) : (\n            <Button startIcon={<PlusIcon />} aria-label=\"add filter\" onClick={() => setIsAddingFilter(true)}>\n              Add filter\n            </Button>\n          )}\n        </Stack>\n      </Stack>\n\n      <Stack sx={{ width: '100%' }} gap={0.5}>\n        <Stack direction=\"row\" gap={2}>\n          <Typography variant=\"subtitle1\">{valueCounters.length} values</Typography>\n        </Stack>\n\n        <Stack sx={{ overflow: isMobileSize ? 'auto' : 'unset' }}>\n          {displayedValueCounters.map((labelValueCounter) => (\n            <Stack key={`${label}-${labelValueCounter.labelValue}`} direction=\"row\" gap={2}>\n              <Typography\n                sx={{\n                  color: (theme) => theme.palette.success.main,\n                  fontFamily: 'monospace',\n                  ':hover': { backgroundColor: 'rgba(127,127,127,0.35)', cursor: 'pointer' },\n                  textWrap: isMobileSize ? 'nowrap' : 'unset',\n                }}\n                onClick={() => onFilterAdd({ label, labelValues: [labelValueCounter.labelValue], operator: '=' })}\n              >\n                {labelValueCounter.labelValue}\n              </Typography>\n              <Typography sx={{ textWrap: 'nowrap' }}>({labelValueCounter.counter} series)</Typography>\n            </Stack>\n          ))}\n        </Stack>\n        <Stack width=\"100%\" textAlign={isMobileSize ? 'center' : 'unset'}>\n          {showAllValues ? (\n            <Button variant=\"text\" sx={{ width: 'fit-content' }} onClick={() => setShowAllValues(false)}>\n              Hide full values\n            </Button>\n          ) : (\n            <>\n              {valueCounters.length > 5 && (\n                <Button variant=\"text\" sx={{ width: 'fit-content' }} onClick={() => setShowAllValues(true)}>\n                  Show {valueCounters.length - 5} more values\n                </Button>\n              )}\n            </>\n          )}\n        </Stack>\n      </Stack>\n    </Stack>\n  );\n}\n\nexport interface LabelValuesTableProps extends StackProps {\n  labelValueCounters: Map<string, LabelValueCounter[]>;\n  isLoading?: boolean;\n  onFilterAdd: (filter: LabelFilter) => void;\n}\n\nexport function LabelValuesTable({\n  labelValueCounters,\n  isLoading,\n  onFilterAdd,\n  ...props\n}: LabelValuesTableProps): ReactElement {\n  const labels: string[] = useMemo(() => {\n    return [...labelValueCounters.keys()].sort();\n  }, [labelValueCounters]);\n\n  if (isLoading) {\n    return (\n      <Stack width=\"100%\" sx={{ alignItems: 'center', justifyContent: 'center' }}>\n        <CircularProgress />\n      </Stack>\n    );\n  }\n\n  return (\n    <Stack sx={{ width: '100%' }} divider={<Divider flexItem orientation=\"horizontal\" />} gap={2} {...props}>\n      <Stack gap={2} direction=\"row\" sx={{ width: '100%' }}>\n        <Stack sx={{ width: '100%' }}>\n          <Typography variant=\"h3\">Label</Typography>\n        </Stack>\n        <Stack sx={{ width: '100%' }}>\n          <Typography variant=\"h3\">Values</Typography>\n        </Stack>\n      </Stack>\n      {labels.map((label) => (\n        <LabelValuesRow\n          key={label}\n          label={label}\n          valueCounters={labelValueCounters.get(label) ?? []}\n          onFilterAdd={onFilterAdd}\n        />\n      ))}\n    </Stack>\n  );\n}\n\nexport interface OverviewTabProps extends StackProps {\n  metricName: string;\n  datasource: DatasourceSelector;\n  filters: LabelFilter[];\n  onFilterAdd: (filter: LabelFilter) => void;\n}\n\nexport function OverviewTab({\n  metricName,\n  datasource,\n  filters,\n  onFilterAdd,\n  ...props\n}: OverviewTabProps): ReactElement {\n  const { metadata, isLoading: isMetadataLoading, error: metadataError } = useMetricMetadata(metricName, datasource);\n  const { series, labelValueCounters, isLoading, error } = useSeriesStates(metricName, filters, datasource);\n\n  return (\n    <Stack gap={2} {...props}>\n      <Stack direction=\"row\" gap={3} mt={1} justifyContent=\"space-between\">\n        <Stack gap={1}>\n          <Typography variant=\"h1\" sx={{ fontFamily: 'monospace' }}>\n            {metricName}\n          </Typography>\n          <Typography>Description:</Typography>\n          {isMetadataLoading ? (\n            <Skeleton variant=\"text\" width={180} />\n          ) : (\n            <Typography style={{ fontStyle: metadata?.help ? 'initial' : 'italic' }}>\n              {metadataError ? 'Failed to fetch metadata' : (metadata?.help ?? 'unknown')}\n            </Typography>\n          )}\n        </Stack>\n        <Stack gap={1} justifyContent=\"center\">\n          {isMetadataLoading ? (\n            <Skeleton variant=\"rounded\" width={75} />\n          ) : metadataError ? (\n            <Chip label=\"failed to fetch\" color=\"error\" sx={{ fontStyle: 'italic' }} />\n          ) : (\n            <MetricChip label={metadata?.type ?? 'unknown'} />\n          )}\n          <Typography>\n            Result:{' '}\n            {isLoading ? (\n              <Skeleton variant=\"text\" width={20} sx={{ display: 'inline-block' }} />\n            ) : error ? (\n              <strong>failed to fetch series</strong>\n            ) : (\n              <strong>{series?.length ?? 'unknown'} series</strong>\n            )}\n          </Typography>\n        </Stack>\n      </Stack>\n\n      {error ? (\n        <ErrorAlert\n          error={{\n            name: `Failed to fetch series ${error?.status && `(${error.status})`}`,\n            message: error?.message ?? 'Failed to fetch series',\n          }}\n        />\n      ) : series?.length === 0 ? (\n        <Stack {...props}>\n          <Typography sx={{ color: (theme) => theme.palette.warning.main }}>\n            No series found with current filters.\n          </Typography>\n        </Stack>\n      ) : (\n        <LabelValuesTable labelValueCounters={labelValueCounters} onFilterAdd={onFilterAdd} isLoading={isLoading} />\n      )}\n    </Stack>\n  );\n}\n"],"names":["useMemo","useState","Autocomplete","Button","Chip","CircularProgress","Divider","IconButton","MenuItem","Select","Skeleton","Stack","TextField","Typography","useMediaQuery","useTheme","PlusIcon","CheckIcon","CloseIcon","ErrorAlert","ListboxComponent","useMetricMetadata","useSeriesStates","MetricChip","LabelValuesRow","label","valueCounters","onFilterAdd","props","isAddingFilter","setIsAddingFilter","operator","setOperator","value","setValue","showAllValues","setShowAllValues","isMobileSize","breakpoints","down","displayedValueCounters","slice","sx","width","direction","alignItems","gap","height","justifyContent","alignContent","fontFamily","pl","size","variant","onChange","event","target","freeSolo","limitTags","disableClearable","options","map","counters","labelValue","renderInput","params","fullWidth","onInputChange","_","newValue","aria-label","onClick","labelValues","startIcon","length","overflow","labelValueCounter","color","theme","palette","success","main","backgroundColor","cursor","textWrap","counter","textAlign","LabelValuesTable","labelValueCounters","isLoading","labels","keys","sort","divider","flexItem","orientation","get","OverviewTab","metricName","datasource","filters","metadata","isMetadataLoading","error","metadataError","series","mt","style","fontStyle","help","type","display","strong","name","status","message","warning"],"mappings":"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"}