{"version":3,"sources":["../../../../src/explore/PrometheusMetricsFinder/utils.ts"],"sourcesContent":["// Copyright 2024 The Perses Authors\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { DatasourceSelector, StatusError } from '@perses-dev/core';\nimport { useDatasourceClient, useTimeRange } from '@perses-dev/plugin-system';\nimport { useQuery, UseQueryResult } from '@tanstack/react-query';\nimport { useMemo } from 'react';\nimport {\n  LabelNamesRequestParameters,\n  LabelValuesRequestParameters,\n  LabelValuesResponse,\n  Metric,\n  MetricMetadata,\n  MetricMetadataRequestParameters,\n  MetricMetadataResponse,\n  PrometheusClient,\n  SeriesRequestParameters,\n  SeriesResponse,\n} from '../../model';\nimport { computeFilterExpr, LabelFilter, LabelValueCounter } from './types';\n\n// Retrieve metric metadata from the Prometheus API\nexport function useMetricMetadata(\n  metricName: string,\n  datasource: DatasourceSelector,\n  enabled?: boolean\n): {\n  isLoading: false | true;\n  metadata: MetricMetadata | undefined;\n  error: StatusError | null;\n} {\n  const { data: client } = useDatasourceClient<PrometheusClient>(datasource);\n\n  // histograms and summaries timeseries desc are not always added to prefixed timeseries\n  const name = metricName.replace(/(_count|_sum|_bucket)$/, '');\n\n  const { data, isLoading, error } = useQuery<MetricMetadataResponse, StatusError>({\n    enabled: !!client && enabled,\n    queryKey: ['metricMetadata', name], // Not indexed on datasource, assuming a metric metadata should be similar across datasources\n    queryFn: async () => {\n      const params: MetricMetadataRequestParameters = { metric: name };\n\n      return await client!.metricMetadata(params);\n    },\n  });\n\n  // Find the first result with help text\n  const metadata: MetricMetadata | undefined = useMemo(() => {\n    for (const metric of data?.data?.[name] ?? []) {\n      if (metric.help.length > 0) {\n        return metric;\n      }\n    }\n    return undefined;\n  }, [data, name]);\n\n  return { metadata, isLoading, error };\n}\n\nexport function useLabels(\n  filters: LabelFilter[],\n  datasource: DatasourceSelector\n): UseQueryResult<LabelValuesResponse, StatusError> {\n  const {\n    absoluteTimeRange: { start, end },\n  } = useTimeRange();\n  const { data: client } = useDatasourceClient<PrometheusClient>(datasource);\n\n  return useQuery<LabelValuesResponse, StatusError>({\n    enabled: !!client,\n    queryKey: ['labels', 'datasource', datasource.name, 'start', start, 'end', end, 'filters', ...filters],\n    queryFn: async () => {\n      const params: LabelNamesRequestParameters = {\n        start: start.valueOf() / 1000,\n        end: end.valueOf() / 1000,\n      };\n      if (filters.length) {\n        params['match[]'] = [`{${computeFilterExpr(filters)}}`];\n      }\n\n      return await client!.labelNames(params);\n    },\n  });\n}\n\n// Retrieve label values from the Prometheus API for a given label name and filters\nexport function useLabelValues(\n  labelName: string,\n  filters: LabelFilter[],\n  datasource: DatasourceSelector\n): UseQueryResult<LabelValuesResponse, StatusError> {\n  const {\n    absoluteTimeRange: { start, end },\n  } = useTimeRange();\n  const { data: client } = useDatasourceClient<PrometheusClient>(datasource);\n\n  return useQuery<LabelValuesResponse, StatusError>({\n    enabled: !!client,\n    queryKey: ['labelValues', labelName, 'datasource', datasource.name, 'start', start, 'end', 'filters', ...filters],\n    queryFn: async () => {\n      const params: LabelValuesRequestParameters = {\n        labelName: labelName,\n        start: start.valueOf() / 1000,\n        end: end.valueOf() / 1000,\n      };\n      if (filters.length) {\n        params['match[]'] = [`{${computeFilterExpr(filters)}}`];\n      }\n\n      return await client!.labelValues(params);\n    },\n  });\n}\n\n// Retrieve series from the Prometheus API for a given metric name and filters\n// Also computes the number of times a label value appears for the given metric name and filters\nexport function useSeriesStates(\n  metricName: string,\n  filters: LabelFilter[],\n  datasource: DatasourceSelector\n): {\n  series: Metric[] | undefined;\n  labelValueCounters: Map<string, Array<{ labelValue: string; counter: number }>>;\n  isLoading: boolean;\n  isError: boolean;\n  error: StatusError | null;\n} {\n  const {\n    absoluteTimeRange: { start, end },\n  } = useTimeRange();\n  const { data: client } = useDatasourceClient<PrometheusClient>(datasource);\n\n  const {\n    data: seriesData,\n    isLoading,\n    isError,\n    error,\n  } = useQuery<SeriesResponse, StatusError>({\n    enabled: !!client,\n    queryKey: ['series', metricName, 'datasource', datasource, 'start', start, 'end', 'filters', ...filters],\n    queryFn: async () => {\n      const params: SeriesRequestParameters = {\n        'match[]': [`{${computeFilterExpr(filters)}}`],\n        start: start.valueOf() / 1000,\n        end: end.valueOf() / 1000,\n      };\n\n      return await client!.series(params);\n    },\n  });\n\n  const labelValueCounters: Map<string, Array<{ labelValue: string; counter: number }>> = useMemo(() => {\n    const result = new Map<string, LabelValueCounter[]>();\n    if (seriesData?.data === undefined) {\n      return result;\n    }\n\n    for (const series of seriesData.data) {\n      for (const [label, value] of Object.entries(series)) {\n        const labelCounters = result.get(label);\n        if (labelCounters === undefined) {\n          result.set(label, [{ labelValue: value, counter: 1 }]);\n          continue;\n        }\n\n        const labelValueCounter = labelCounters.find((counter) => counter.labelValue === value);\n        if (labelValueCounter === undefined) {\n          labelCounters.push({ labelValue: value, counter: 1 });\n        } else {\n          labelValueCounter.counter += 1;\n        }\n      }\n    }\n\n    return result;\n  }, [seriesData]);\n\n  return { series: seriesData?.data, labelValueCounters, isLoading, isError, error };\n}\n"],"names":["useDatasourceClient","useTimeRange","useQuery","useMemo","computeFilterExpr","useMetricMetadata","metricName","datasource","enabled","data","client","name","replace","isLoading","error","queryKey","queryFn","params","metric","metricMetadata","metadata","help","length","undefined","useLabels","filters","absoluteTimeRange","start","end","valueOf","labelNames","useLabelValues","labelName","labelValues","useSeriesStates","seriesData","isError","series","labelValueCounters","result","Map","label","value","Object","entries","labelCounters","get","set","labelValue","counter","labelValueCounter","find","push"],"mappings":"AAAA,oCAAoC;AACpC,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AAGjC,SAASA,mBAAmB,EAAEC,YAAY,QAAQ,4BAA4B;AAC9E,SAASC,QAAQ,QAAwB,wBAAwB;AACjE,SAASC,OAAO,QAAQ,QAAQ;AAahC,SAASC,iBAAiB,QAAwC,UAAU;AAE5E,mDAAmD;AACnD,OAAO,SAASC,kBACdC,UAAkB,EAClBC,UAA8B,EAC9BC,OAAiB;IAMjB,MAAM,EAAEC,MAAMC,MAAM,EAAE,GAAGV,oBAAsCO;IAE/D,uFAAuF;IACvF,MAAMI,OAAOL,WAAWM,OAAO,CAAC,0BAA0B;IAE1D,MAAM,EAAEH,IAAI,EAAEI,SAAS,EAAEC,KAAK,EAAE,GAAGZ,SAA8C;QAC/EM,SAAS,CAAC,CAACE,UAAUF;QACrBO,UAAU;YAAC;YAAkBJ;SAAK;QAClCK,SAAS;YACP,MAAMC,SAA0C;gBAAEC,QAAQP;YAAK;YAE/D,OAAO,MAAMD,OAAQS,cAAc,CAACF;QACtC;IACF;IAEA,uCAAuC;IACvC,MAAMG,WAAuCjB,QAAQ;QACnD,KAAK,MAAMe,UAAUT,MAAMA,MAAM,CAACE,KAAK,IAAI,EAAE,CAAE;YAC7C,IAAIO,OAAOG,IAAI,CAACC,MAAM,GAAG,GAAG;gBAC1B,OAAOJ;YACT;QACF;QACA,OAAOK;IACT,GAAG;QAACd;QAAME;KAAK;IAEf,OAAO;QAAES;QAAUP;QAAWC;IAAM;AACtC;AAEA,OAAO,SAASU,UACdC,OAAsB,EACtBlB,UAA8B;IAE9B,MAAM,EACJmB,mBAAmB,EAAEC,KAAK,EAAEC,GAAG,EAAE,EAClC,GAAG3B;IACJ,MAAM,EAAEQ,MAAMC,MAAM,EAAE,GAAGV,oBAAsCO;IAE/D,OAAOL,SAA2C;QAChDM,SAAS,CAAC,CAACE;QACXK,UAAU;YAAC;YAAU;YAAcR,WAAWI,IAAI;YAAE;YAASgB;YAAO;YAAOC;YAAK;eAAcH;SAAQ;QACtGT,SAAS;YACP,MAAMC,SAAsC;gBAC1CU,OAAOA,MAAME,OAAO,KAAK;gBACzBD,KAAKA,IAAIC,OAAO,KAAK;YACvB;YACA,IAAIJ,QAAQH,MAAM,EAAE;gBAClBL,MAAM,CAAC,UAAU,GAAG;oBAAC,CAAC,CAAC,EAAEb,kBAAkBqB,SAAS,CAAC,CAAC;iBAAC;YACzD;YAEA,OAAO,MAAMf,OAAQoB,UAAU,CAACb;QAClC;IACF;AACF;AAEA,mFAAmF;AACnF,OAAO,SAASc,eACdC,SAAiB,EACjBP,OAAsB,EACtBlB,UAA8B;IAE9B,MAAM,EACJmB,mBAAmB,EAAEC,KAAK,EAAEC,GAAG,EAAE,EAClC,GAAG3B;IACJ,MAAM,EAAEQ,MAAMC,MAAM,EAAE,GAAGV,oBAAsCO;IAE/D,OAAOL,SAA2C;QAChDM,SAAS,CAAC,CAACE;QACXK,UAAU;YAAC;YAAeiB;YAAW;YAAczB,WAAWI,IAAI;YAAE;YAASgB;YAAO;YAAO;eAAcF;SAAQ;QACjHT,SAAS;YACP,MAAMC,SAAuC;gBAC3Ce,WAAWA;gBACXL,OAAOA,MAAME,OAAO,KAAK;gBACzBD,KAAKA,IAAIC,OAAO,KAAK;YACvB;YACA,IAAIJ,QAAQH,MAAM,EAAE;gBAClBL,MAAM,CAAC,UAAU,GAAG;oBAAC,CAAC,CAAC,EAAEb,kBAAkBqB,SAAS,CAAC,CAAC;iBAAC;YACzD;YAEA,OAAO,MAAMf,OAAQuB,WAAW,CAAChB;QACnC;IACF;AACF;AAEA,8EAA8E;AAC9E,gGAAgG;AAChG,OAAO,SAASiB,gBACd5B,UAAkB,EAClBmB,OAAsB,EACtBlB,UAA8B;IAQ9B,MAAM,EACJmB,mBAAmB,EAAEC,KAAK,EAAEC,GAAG,EAAE,EAClC,GAAG3B;IACJ,MAAM,EAAEQ,MAAMC,MAAM,EAAE,GAAGV,oBAAsCO;IAE/D,MAAM,EACJE,MAAM0B,UAAU,EAChBtB,SAAS,EACTuB,OAAO,EACPtB,KAAK,EACN,GAAGZ,SAAsC;QACxCM,SAAS,CAAC,CAACE;QACXK,UAAU;YAAC;YAAUT;YAAY;YAAcC;YAAY;YAASoB;YAAO;YAAO;eAAcF;SAAQ;QACxGT,SAAS;YACP,MAAMC,SAAkC;gBACtC,WAAW;oBAAC,CAAC,CAAC,EAAEb,kBAAkBqB,SAAS,CAAC,CAAC;iBAAC;gBAC9CE,OAAOA,MAAME,OAAO,KAAK;gBACzBD,KAAKA,IAAIC,OAAO,KAAK;YACvB;YAEA,OAAO,MAAMnB,OAAQ2B,MAAM,CAACpB;QAC9B;IACF;IAEA,MAAMqB,qBAAkFnC,QAAQ;QAC9F,MAAMoC,SAAS,IAAIC;QACnB,IAAIL,YAAY1B,SAASc,WAAW;YAClC,OAAOgB;QACT;QAEA,KAAK,MAAMF,UAAUF,WAAW1B,IAAI,CAAE;YACpC,KAAK,MAAM,CAACgC,OAAOC,MAAM,IAAIC,OAAOC,OAAO,CAACP,QAAS;gBACnD,MAAMQ,gBAAgBN,OAAOO,GAAG,CAACL;gBACjC,IAAII,kBAAkBtB,WAAW;oBAC/BgB,OAAOQ,GAAG,CAACN,OAAO;wBAAC;4BAAEO,YAAYN;4BAAOO,SAAS;wBAAE;qBAAE;oBACrD;gBACF;gBAEA,MAAMC,oBAAoBL,cAAcM,IAAI,CAAC,CAACF,UAAYA,QAAQD,UAAU,KAAKN;gBACjF,IAAIQ,sBAAsB3B,WAAW;oBACnCsB,cAAcO,IAAI,CAAC;wBAAEJ,YAAYN;wBAAOO,SAAS;oBAAE;gBACrD,OAAO;oBACLC,kBAAkBD,OAAO,IAAI;gBAC/B;YACF;QACF;QAEA,OAAOV;IACT,GAAG;QAACJ;KAAW;IAEf,OAAO;QAAEE,QAAQF,YAAY1B;QAAM6B;QAAoBzB;QAAWuB;QAAStB;IAAM;AACnF"}