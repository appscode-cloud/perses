{"version":3,"sources":["../../../src/components/query.ts"],"sourcesContent":["// Copyright 2025 The Perses Authors\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { useDatasourceClient } from '@perses-dev/plugin-system';\nimport { DatasourceSelector, StatusError } from '@perses-dev/core';\nimport { useQuery, UseQueryResult } from '@tanstack/react-query';\nimport {\n  InstantQueryRequestParameters,\n  MonitoredInstantQueryResponse,\n  ParseQueryRequestParameters,\n  ParseQueryResponse,\n  PrometheusClient,\n} from '../model';\n\nexport function useParseQuery(\n  content: string,\n  datasource: DatasourceSelector,\n  enabled?: boolean\n): UseQueryResult<ParseQueryResponse, StatusError> {\n  const { data: client } = useDatasourceClient<PrometheusClient>(datasource);\n\n  return useQuery<ParseQueryResponse, StatusError>({\n    enabled: !!client && enabled,\n    queryKey: ['parseQuery', content, 'datasource', datasource],\n    queryFn: async () => {\n      const params: ParseQueryRequestParameters = { query: content };\n\n      return await client!.parseQuery(params);\n    },\n  });\n}\n\nexport function useInstantQuery(\n  content: string,\n  datasource: DatasourceSelector,\n  enabled?: boolean\n): UseQueryResult<MonitoredInstantQueryResponse, StatusError> {\n  const { data: client } = useDatasourceClient<PrometheusClient>(datasource);\n\n  return useQuery<MonitoredInstantQueryResponse, StatusError>({\n    enabled: !!client && enabled,\n    // TODO: for some reason the caching is not working: identical nodes still fire their requests after each change made to the promQL\n    queryKey: ['instantQuery', content, 'datasource', datasource.kind],\n    queryFn: async () => {\n      const params: InstantQueryRequestParameters = { query: content };\n      const startTime = performance.now();\n      const response = await client!.instantQuery(params);\n      const responseTime = performance.now() - startTime;\n\n      return { ...response, responseTime };\n    },\n  });\n}\n"],"names":["useDatasourceClient","useQuery","useParseQuery","content","datasource","enabled","data","client","queryKey","queryFn","params","query","parseQuery","useInstantQuery","kind","startTime","performance","now","response","instantQuery","responseTime"],"mappings":"AAAA,oCAAoC;AACpC,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AAEjC,SAASA,mBAAmB,QAAQ,4BAA4B;AAEhE,SAASC,QAAQ,QAAwB,wBAAwB;AASjE,OAAO,SAASC,cACdC,OAAe,EACfC,UAA8B,EAC9BC,OAAiB;IAEjB,MAAM,EAAEC,MAAMC,MAAM,EAAE,GAAGP,oBAAsCI;IAE/D,OAAOH,SAA0C;QAC/CI,SAAS,CAAC,CAACE,UAAUF;QACrBG,UAAU;YAAC;YAAcL;YAAS;YAAcC;SAAW;QAC3DK,SAAS;YACP,MAAMC,SAAsC;gBAAEC,OAAOR;YAAQ;YAE7D,OAAO,MAAMI,OAAQK,UAAU,CAACF;QAClC;IACF;AACF;AAEA,OAAO,SAASG,gBACdV,OAAe,EACfC,UAA8B,EAC9BC,OAAiB;IAEjB,MAAM,EAAEC,MAAMC,MAAM,EAAE,GAAGP,oBAAsCI;IAE/D,OAAOH,SAAqD;QAC1DI,SAAS,CAAC,CAACE,UAAUF;QACrB,mIAAmI;QACnIG,UAAU;YAAC;YAAgBL;YAAS;YAAcC,WAAWU,IAAI;SAAC;QAClEL,SAAS;YACP,MAAMC,SAAwC;gBAAEC,OAAOR;YAAQ;YAC/D,MAAMY,YAAYC,YAAYC,GAAG;YACjC,MAAMC,WAAW,MAAMX,OAAQY,YAAY,CAACT;YAC5C,MAAMU,eAAeJ,YAAYC,GAAG,KAAKF;YAEzC,OAAO;gBAAE,GAAGG,QAAQ;gBAAEE;YAAa;QACrC;IACF;AACF"}