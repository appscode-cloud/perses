{"version":3,"sources":["../../../../src/plugins/prometheus-time-series-query/query-editor-model.ts"],"sourcesContent":["// Copyright 2023 The Perses Authors\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { useState } from 'react';\nimport { produce } from 'immer';\nimport { OptionsEditorProps } from '@perses-dev/plugin-system';\nimport { DurationString } from '@perses-dev/core';\nimport { PrometheusTimeSeriesQuerySpec } from './time-series-query-model';\n\nexport type PrometheusTimeSeriesQueryEditorProps = OptionsEditorProps<PrometheusTimeSeriesQuerySpec>;\n\n/**\n * A hook for managing the `query` state in PrometheusTimeSeriesQuerySpec. Returns the `query` value, along with\n * `onChange` and `onBlur` event handlers to the input. Keeps a local copy of the user's input and only syncs those\n * changes with the overall spec value once the input is blurred to prevent re-running queries in the panel's preview\n * every time the user types.\n */\nexport function useQueryState(props: PrometheusTimeSeriesQueryEditorProps): {\n  query: string;\n  handleQueryChange: (e: string) => void;\n  handleQueryBlur: () => void;\n} {\n  const { onChange, value } = props;\n\n  // Local copy of the query's value\n  const [query, setQuery] = useState(value.query);\n\n  // This is basically \"getDerivedStateFromProps\" to make sure if spec's value changes external to this component,\n  // we render with the latest value\n  const [lastSyncedQuery, setLastSyncedQuery] = useState(value.query);\n  if (value.query !== lastSyncedQuery) {\n    setQuery(value.query);\n    setLastSyncedQuery(value.query);\n  }\n\n  // Update our local state's copy as the user types\n  const handleQueryChange = (e: string): void => {\n    setQuery(e);\n  };\n\n  // Propagate changes to the query's value when the input is blurred to avoid constantly re-running queries in the\n  // PanelPreview\n  const handleQueryBlur = (): void => {\n    setLastSyncedQuery(query);\n    onChange(\n      produce(value, (draft) => {\n        draft.query = query;\n      })\n    );\n  };\n\n  return { query, handleQueryChange, handleQueryBlur };\n}\n\n/**\n * Hook to manage `seriesNameFormat` state to ensure panel preview does not rerender until text input is blurred\n */\nexport function useFormatState(props: PrometheusTimeSeriesQueryEditorProps): {\n  format: string | undefined;\n  handleFormatChange: (e: string) => void;\n  handleFormatBlur: () => void;\n} {\n  const { onChange, value } = props;\n\n  // TODO: reusable hook or helper util instead of duplicating from useQueryState\n  const [format, setFormat] = useState(value.seriesNameFormat);\n  const [lastSyncedFormat, setLastSyncedFormat] = useState(value.seriesNameFormat);\n  if (value.seriesNameFormat !== lastSyncedFormat) {\n    setFormat(value.seriesNameFormat);\n    setLastSyncedFormat(value.seriesNameFormat);\n  }\n\n  // Update our local state as the user types\n  const handleFormatChange = (e: string): void => {\n    setFormat(e);\n  };\n\n  // Propagate changes to the panel preview component when seriesNameFormat TextField is blurred\n  const handleFormatBlur = (): void => {\n    setLastSyncedFormat(format);\n    onChange(\n      produce(value, (draft) => {\n        draft.seriesNameFormat = format;\n      })\n    );\n  };\n\n  return { format, handleFormatChange, handleFormatBlur };\n}\n\n/**\n * Hook to manage `minStep` state to ensure panel preview does not rerender until text input is blurred\n */\nexport function useMinStepState(props: PrometheusTimeSeriesQueryEditorProps): {\n  minStep: string | undefined;\n  handleMinStepChange: (e: DurationString) => void;\n  handleMinStepBlur: () => void;\n} {\n  const { onChange, value } = props;\n\n  // TODO: reusable hook or helper util instead of duplicating from useQueryState\n  const [minStep, setMinStep] = useState(value.minStep);\n  const [lastSyncedMinStep, setLastSyncedMinStep] = useState(value.minStep);\n  if (value.minStep !== lastSyncedMinStep) {\n    setMinStep(value.minStep);\n    setLastSyncedMinStep(value.minStep);\n  }\n\n  // Update our local state as the user types\n  const handleMinStepChange = (e: DurationString): void => {\n    setMinStep(e);\n  };\n\n  // Propagate changes to the panel preview component when minStep TextField is blurred\n  const handleMinStepBlur = (): void => {\n    setLastSyncedMinStep(minStep);\n    onChange(\n      produce(value, (draft) => {\n        draft.minStep = minStep;\n      })\n    );\n  };\n\n  return { minStep, handleMinStepChange, handleMinStepBlur };\n}\n"],"names":["useState","produce","useQueryState","props","onChange","value","query","setQuery","lastSyncedQuery","setLastSyncedQuery","handleQueryChange","e","handleQueryBlur","draft","useFormatState","format","setFormat","seriesNameFormat","lastSyncedFormat","setLastSyncedFormat","handleFormatChange","handleFormatBlur","useMinStepState","minStep","setMinStep","lastSyncedMinStep","setLastSyncedMinStep","handleMinStepChange","handleMinStepBlur"],"mappings":"AAAA,oCAAoC;AACpC,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AAEjC,SAASA,QAAQ,QAAQ,QAAQ;AACjC,SAASC,OAAO,QAAQ,QAAQ;AAOhC;;;;;CAKC,GACD,OAAO,SAASC,cAAcC,KAA2C;IAKvE,MAAM,EAAEC,QAAQ,EAAEC,KAAK,EAAE,GAAGF;IAE5B,kCAAkC;IAClC,MAAM,CAACG,OAAOC,SAAS,GAAGP,SAASK,MAAMC,KAAK;IAE9C,gHAAgH;IAChH,kCAAkC;IAClC,MAAM,CAACE,iBAAiBC,mBAAmB,GAAGT,SAASK,MAAMC,KAAK;IAClE,IAAID,MAAMC,KAAK,KAAKE,iBAAiB;QACnCD,SAASF,MAAMC,KAAK;QACpBG,mBAAmBJ,MAAMC,KAAK;IAChC;IAEA,kDAAkD;IAClD,MAAMI,oBAAoB,CAACC;QACzBJ,SAASI;IACX;IAEA,iHAAiH;IACjH,eAAe;IACf,MAAMC,kBAAkB;QACtBH,mBAAmBH;QACnBF,SACEH,QAAQI,OAAO,CAACQ;YACdA,MAAMP,KAAK,GAAGA;QAChB;IAEJ;IAEA,OAAO;QAAEA;QAAOI;QAAmBE;IAAgB;AACrD;AAEA;;CAEC,GACD,OAAO,SAASE,eAAeX,KAA2C;IAKxE,MAAM,EAAEC,QAAQ,EAAEC,KAAK,EAAE,GAAGF;IAE5B,+EAA+E;IAC/E,MAAM,CAACY,QAAQC,UAAU,GAAGhB,SAASK,MAAMY,gBAAgB;IAC3D,MAAM,CAACC,kBAAkBC,oBAAoB,GAAGnB,SAASK,MAAMY,gBAAgB;IAC/E,IAAIZ,MAAMY,gBAAgB,KAAKC,kBAAkB;QAC/CF,UAAUX,MAAMY,gBAAgB;QAChCE,oBAAoBd,MAAMY,gBAAgB;IAC5C;IAEA,2CAA2C;IAC3C,MAAMG,qBAAqB,CAACT;QAC1BK,UAAUL;IACZ;IAEA,8FAA8F;IAC9F,MAAMU,mBAAmB;QACvBF,oBAAoBJ;QACpBX,SACEH,QAAQI,OAAO,CAACQ;YACdA,MAAMI,gBAAgB,GAAGF;QAC3B;IAEJ;IAEA,OAAO;QAAEA;QAAQK;QAAoBC;IAAiB;AACxD;AAEA;;CAEC,GACD,OAAO,SAASC,gBAAgBnB,KAA2C;IAKzE,MAAM,EAAEC,QAAQ,EAAEC,KAAK,EAAE,GAAGF;IAE5B,+EAA+E;IAC/E,MAAM,CAACoB,SAASC,WAAW,GAAGxB,SAASK,MAAMkB,OAAO;IACpD,MAAM,CAACE,mBAAmBC,qBAAqB,GAAG1B,SAASK,MAAMkB,OAAO;IACxE,IAAIlB,MAAMkB,OAAO,KAAKE,mBAAmB;QACvCD,WAAWnB,MAAMkB,OAAO;QACxBG,qBAAqBrB,MAAMkB,OAAO;IACpC;IAEA,2CAA2C;IAC3C,MAAMI,sBAAsB,CAAChB;QAC3Ba,WAAWb;IACb;IAEA,qFAAqF;IACrF,MAAMiB,oBAAoB;QACxBF,qBAAqBH;QACrBnB,SACEH,QAAQI,OAAO,CAACQ;YACdA,MAAMU,OAAO,GAAGA;QAClB;IAEJ;IAEA,OAAO;QAAEA;QAASI;QAAqBC;IAAkB;AAC3D"}