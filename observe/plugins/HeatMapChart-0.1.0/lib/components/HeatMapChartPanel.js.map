{"version":3,"sources":["../../../src/components/HeatMapChartPanel.tsx"],"sourcesContent":["// Copyright 2025 The Perses Authors\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Stack, Typography } from '@mui/material';\nimport { TimeScale, TimeSeries, TimeSeriesData } from '@perses-dev/core';\nimport { PanelProps } from '@perses-dev/plugin-system';\nimport merge from 'lodash/merge';\nimport { ReactElement, useMemo } from 'react';\nimport { DEFAULT_FORMAT, HeatMapChartOptions } from '../heat-map-chart-model';\nimport { generateCompleteTimestamps, getCommonTimeScaleForQueries } from '../utils';\nimport { HeatMapChart, HeatMapDataItem } from './HeatMapChart';\n\nconst HEATMAP_MIN_HEIGHT = 200;\nconst HEATMAP_ITEM_MIN_HEIGHT = 2;\n\nexport type HeatMapChartPanelProps = PanelProps<HeatMapChartOptions, TimeSeriesData>;\n\nexport function HeatMapChartPanel(props: HeatMapChartPanelProps): ReactElement | null {\n  const { spec: pluginSpec, contentDimensions, queryResults } = props;\n\n  // ensures all default format properties set if undef\n  const yAxisFormat = merge({}, DEFAULT_FORMAT, pluginSpec.yAxisFormat);\n  const countFormat = merge({}, DEFAULT_FORMAT, pluginSpec.countFormat);\n\n  const {\n    data,\n    xAxisCategories,\n    yAxisCategories,\n    countMin,\n    countMax,\n    timeScale,\n  }: {\n    data: HeatMapDataItem[];\n    xAxisCategories: number[];\n    yAxisCategories: string[];\n    countMin: number;\n    countMax: number;\n    timeScale?: TimeScale;\n  } = useMemo(() => {\n    if (!queryResults || queryResults.length === 0) {\n      return {\n        data: [],\n        xAxisCategories: [],\n        yAxisCategories: [],\n        countMin: 0,\n        countMax: 0,\n        timeScale: undefined,\n      };\n    }\n\n    if (\n      queryResults.length != 1 ||\n      queryResults[0]!.data.series.length != 1 ||\n      queryResults[0]!.data.series[0]!.histograms === undefined\n    ) {\n      return {\n        data: [],\n        xAxisCategories: [],\n        yAxisCategories: [],\n        countMin: 0,\n        countMax: 0,\n        timeScale: undefined,\n      };\n    }\n\n    const series: TimeSeries = queryResults[0]!.data.series[0]!;\n\n    const timeScale = getCommonTimeScaleForQueries(queryResults);\n    const xAxisCategories: number[] = generateCompleteTimestamps(timeScale);\n\n    // Dummy value that will be replaced at the first iteration\n    let lowestBound = Infinity;\n    let highestBound = -Infinity;\n    let countMin = Infinity;\n    let countMax = -Infinity;\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    for (const [_, histogram] of series?.histograms ?? []) {\n      for (const bucket of histogram?.buckets ?? []) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const [_, lowerBound, upperBound, count] = bucket;\n        const lowerBoundFloat = parseFloat(lowerBound);\n        const upperBoundFloat = parseFloat(upperBound);\n        const countFloat = parseFloat(count);\n        if (lowerBoundFloat < lowestBound) {\n          lowestBound = lowerBoundFloat;\n        }\n        if (upperBoundFloat > highestBound) {\n          highestBound = upperBoundFloat;\n        }\n        if (countFloat < countMin) {\n          countMin = countFloat;\n        }\n        if (countFloat > countMax) {\n          countMax = countFloat;\n        }\n      }\n    }\n\n    const height = contentDimensions?.height ?? HEATMAP_MIN_HEIGHT;\n    const totalRange = highestBound - lowestBound;\n    const rangePerItem = (totalRange * HEATMAP_ITEM_MIN_HEIGHT) / height;\n    const totalItems = Math.ceil(height / HEATMAP_ITEM_MIN_HEIGHT);\n\n    // Generating value of the Y axis based on the height divided by the size of a cell (item)\n    const yAxisCategories: string[] = Array.from({ length: totalItems }, (_, index) =>\n      (lowestBound + index * rangePerItem).toFixed(3)\n    );\n\n    const data: HeatMapDataItem[] = [];\n    // Logic for filling all cells where a bucket is present\n    for (const [time, histogram] of series?.histograms ?? []) {\n      const itemIndexOnXaxis = xAxisCategories.findIndex((v) => v === time * 1000);\n\n      for (const bucket of histogram?.buckets ?? []) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const [_, lowerBound, upperBound, count] = bucket;\n        const yLowerBoundItem = Math.floor((parseFloat(lowerBound) - lowestBound) / rangePerItem);\n        const yUpperBoundItem = Math.ceil((parseFloat(upperBound) - lowestBound) / rangePerItem);\n\n        for (let i = 0; i < yUpperBoundItem - yLowerBoundItem; i++) {\n          // TODO: some bucket may have overlapping cells, we could use avg value. Probably will need to move to a matrix data structure for performance reasons\n          data.push({\n            value: [itemIndexOnXaxis, yLowerBoundItem + i, parseFloat(count)],\n            label: count,\n          });\n        }\n      }\n    }\n    return {\n      data,\n      xAxisCategories,\n      yAxisCategories,\n      countMin,\n      countMax,\n      timeScale,\n    };\n  }, [contentDimensions?.height, queryResults]);\n\n  // TODO: add support for multiple queries\n  if (queryResults.length > 1) {\n    return (\n      <Stack justifyContent=\"center\" height=\"100%\">\n        <Typography variant=\"body2\" textAlign=\"center\">\n          Only one query at a time is supported for now\n        </Typography>\n      </Stack>\n    );\n  }\n\n  // Mo data message handled inside chart component\n  if (data.length === 0) {\n    return (\n      <Stack justifyContent=\"center\" height=\"100%\">\n        <Typography variant=\"body2\" textAlign=\"center\">\n          No data available (only native histograms are supported for now)\n        </Typography>\n      </Stack>\n    );\n  }\n\n  if (contentDimensions === undefined) return null;\n\n  return (\n    <Stack direction=\"row\" justifyContent=\"center\" alignItems=\"center\">\n      <HeatMapChart\n        width={contentDimensions.width}\n        height={contentDimensions.height}\n        data={data}\n        xAxisCategories={xAxisCategories}\n        yAxisCategories={yAxisCategories}\n        yAxisFormat={yAxisFormat}\n        countFormat={countFormat}\n        countMin={countMin}\n        countMax={countMax}\n        timeScale={timeScale}\n        showVisualMap={pluginSpec.showVisualMap}\n      />\n    </Stack>\n  );\n}\n"],"names":["Stack","Typography","merge","useMemo","DEFAULT_FORMAT","generateCompleteTimestamps","getCommonTimeScaleForQueries","HeatMapChart","HEATMAP_MIN_HEIGHT","HEATMAP_ITEM_MIN_HEIGHT","HeatMapChartPanel","props","spec","pluginSpec","contentDimensions","queryResults","yAxisFormat","countFormat","data","xAxisCategories","yAxisCategories","countMin","countMax","timeScale","length","undefined","series","histograms","lowestBound","Infinity","highestBound","_","histogram","bucket","buckets","lowerBound","upperBound","count","lowerBoundFloat","parseFloat","upperBoundFloat","countFloat","height","totalRange","rangePerItem","totalItems","Math","ceil","Array","from","index","toFixed","time","itemIndexOnXaxis","findIndex","v","yLowerBoundItem","floor","yUpperBoundItem","i","push","value","label","justifyContent","variant","textAlign","direction","alignItems","width","showVisualMap"],"mappings":"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"}