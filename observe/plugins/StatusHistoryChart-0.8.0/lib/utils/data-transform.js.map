{"version":3,"sources":["../../../src/utils/data-transform.ts"],"sourcesContent":["// Copyright 2024 The Perses Authors\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { LegendItem } from '@perses-dev/components';\nimport { applyValueMapping, TimeScale, TimeSeriesData } from '@perses-dev/core';\nimport { PanelData } from '@perses-dev/plugin-system';\nimport { useMemo } from 'react';\nimport { StatusHistoryChartOptions } from '../status-history-model';\nimport { StatusHistoryDataItem } from '../StatusHistoryChartBase';\nimport { FALLBACK_COLOR, getColorsForValues } from './get-color';\nimport { getCommonTimeScaleForQueries } from './get-timescale';\n\ninterface StatusHistoryDataModel {\n  legendItems: LegendItem[];\n  statusHistoryData: StatusHistoryDataItem[];\n  xAxisCategories: number[];\n  yAxisCategories: string[];\n  timeScale?: TimeScale;\n  colors: Array<{\n    value: string | number;\n    color: string;\n  }>;\n}\n\nfunction generateCompleteTimestamps(timescale?: TimeScale): number[] {\n  if (!timescale) {\n    return [];\n  }\n  const { startMs, endMs, stepMs } = timescale;\n  const timestamps: number[] = [];\n  for (let time = startMs; time <= endMs; time += stepMs) {\n    timestamps.push(time);\n  }\n  return timestamps;\n}\n\nexport function useStatusHistoryDataModel(\n  queryResults: Array<PanelData<TimeSeriesData>>,\n  themeColors: string[],\n  spec: StatusHistoryChartOptions\n): StatusHistoryDataModel {\n  return useMemo(() => {\n    if (!queryResults || queryResults.length === 0) {\n      return {\n        legendItems: [],\n        statusHistoryData: [],\n        xAxisCategories: [],\n        yAxisCategories: [],\n        colors: [],\n      };\n    }\n\n    const timeScale = getCommonTimeScaleForQueries(queryResults);\n    const statusHistoryData: StatusHistoryDataItem[] = [];\n    const yAxisCategories: string[] = [];\n    const legendSet = new Set<number>();\n    const hasValueMappings = spec.mappings?.length;\n\n    const xAxisCategories = generateCompleteTimestamps(timeScale);\n\n    queryResults.forEach(({ data }) => {\n      if (!data) {\n        return;\n      }\n\n      data.series.forEach((item) => {\n        const instance = item.formattedName || '';\n\n        yAxisCategories.push(instance);\n\n        const yIndex = yAxisCategories.length - 1;\n\n        item.values.forEach(([time, value]) => {\n          const itemIndexOnXaxis = xAxisCategories.findIndex((v) => v === time);\n          if (value !== null && itemIndexOnXaxis !== -1) {\n            let itemLabel: string | number = value;\n            if (hasValueMappings) {\n              const mappedValue = applyValueMapping(value, spec.mappings);\n              itemLabel = mappedValue.value;\n            }\n            legendSet.add(value);\n            statusHistoryData.push({\n              value: [itemIndexOnXaxis, yIndex, value],\n              label: String(itemLabel),\n            });\n          }\n        });\n      });\n    });\n\n    const uniqueValues = Array.from(legendSet);\n    const colorsForValues = getColorsForValues(uniqueValues, themeColors);\n\n    // get colors from theme and generate colors if not provided\n    const colors = uniqueValues.map((value, index) => {\n      let valueColor: string = colorsForValues[index] ?? FALLBACK_COLOR;\n\n      if (hasValueMappings) {\n        const mappedValue = applyValueMapping(value, spec.mappings);\n        valueColor = mappedValue.color ?? valueColor;\n      }\n\n      return {\n        value,\n        color: valueColor,\n      };\n    });\n\n    const legendItems: LegendItem[] = uniqueValues.map((value, idx) => {\n      let label = String(value);\n\n      if (hasValueMappings) {\n        const mappedValue = applyValueMapping(value, spec.mappings);\n        label = String(mappedValue.value);\n      }\n\n      const color = colors.find((i) => i.value === value)?.color || FALLBACK_COLOR;\n\n      return {\n        id: `${idx}-${value}`,\n        label,\n        color,\n      };\n    });\n\n    return {\n      xAxisCategories,\n      yAxisCategories,\n      legendItems,\n      statusHistoryData,\n      timeScale,\n      colors,\n    };\n  }, [queryResults, spec.mappings, themeColors]);\n}\n"],"names":["applyValueMapping","useMemo","FALLBACK_COLOR","getColorsForValues","getCommonTimeScaleForQueries","generateCompleteTimestamps","timescale","startMs","endMs","stepMs","timestamps","time","push","useStatusHistoryDataModel","queryResults","themeColors","spec","length","legendItems","statusHistoryData","xAxisCategories","yAxisCategories","colors","timeScale","legendSet","Set","hasValueMappings","mappings","forEach","data","series","item","instance","formattedName","yIndex","values","value","itemIndexOnXaxis","findIndex","v","itemLabel","mappedValue","add","label","String","uniqueValues","Array","from","colorsForValues","map","index","valueColor","color","idx","find","i","id"],"mappings":"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"}