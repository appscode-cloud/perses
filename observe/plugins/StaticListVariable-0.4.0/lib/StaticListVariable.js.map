{"version":3,"sources":["../../src/StaticListVariable.tsx"],"sourcesContent":["import { VariablePlugin, VariableOption, OptionsEditorProps } from '@perses-dev/plugin-system';\nimport { Autocomplete, TextField } from '@mui/material';\n\ntype StaticListOption = string | VariableOption;\n\ntype StaticListVariableOptions = {\n  values: StaticListOption[];\n};\n\nfunction StaticListVariableOptionEditor(props: OptionsEditorProps<StaticListVariableOptions>) {\n  const value = props.value.values.map((v) => {\n    if (typeof v === 'string') {\n      return v;\n    } else {\n      return v.value;\n    }\n  });\n\n  const onChange = (__: unknown, value: string[]) => {\n    props.onChange({\n      values: value.map((v) => {\n        return { value: v, label: v };\n      }),\n    });\n  };\n\n  return (\n    <div>\n      <Autocomplete\n        onPaste={(e) => {\n          // Append new values on paste\n          const v = e.clipboardData.getData('text/plain');\n          if (v) {\n            const values = v.split(',');\n            onChange(null, value.concat(values));\n            e.preventDefault();\n          }\n        }}\n        multiple\n        value={value}\n        onChange={onChange}\n        options={[]}\n        freeSolo\n        clearOnBlur\n        readOnly={props.isReadonly}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label=\"Values\"\n            placeholder=\"Values\"\n            helperText='Type new value then press \"Enter\" to add.'\n          />\n        )}\n      />\n    </div>\n  );\n}\n\nexport const StaticListVariable: VariablePlugin<StaticListVariableOptions> = {\n  getVariableOptions: async (spec) => {\n    const values = spec.values?.map((v) => {\n      if (typeof v === 'string') {\n        return { label: v, value: v };\n      }\n      return v;\n    });\n    return {\n      data: values,\n    };\n  },\n  dependsOn: () => {\n    return { variables: [] };\n  },\n  OptionsEditorComponent: StaticListVariableOptionEditor,\n  createInitialOptions: () => ({ values: [] }),\n};\n"],"names":["Autocomplete","TextField","StaticListVariableOptionEditor","props","value","values","map","v","onChange","__","label","div","onPaste","e","clipboardData","getData","split","concat","preventDefault","multiple","options","freeSolo","clearOnBlur","readOnly","isReadonly","renderInput","params","placeholder","helperText","StaticListVariable","getVariableOptions","spec","data","dependsOn","variables","OptionsEditorComponent","createInitialOptions"],"mappings":";AACA,SAASA,YAAY,EAAEC,SAAS,QAAQ,gBAAgB;AAQxD,SAASC,+BAA+BC,KAAoD;IAC1F,MAAMC,QAAQD,MAAMC,KAAK,CAACC,MAAM,CAACC,GAAG,CAAC,CAACC;QACpC,IAAI,OAAOA,MAAM,UAAU;YACzB,OAAOA;QACT,OAAO;YACL,OAAOA,EAAEH,KAAK;QAChB;IACF;IAEA,MAAMI,WAAW,CAACC,IAAaL;QAC7BD,MAAMK,QAAQ,CAAC;YACbH,QAAQD,MAAME,GAAG,CAAC,CAACC;gBACjB,OAAO;oBAAEH,OAAOG;oBAAGG,OAAOH;gBAAE;YAC9B;QACF;IACF;IAEA,qBACE,KAACI;kBACC,cAAA,KAACX;YACCY,SAAS,CAACC;gBACR,6BAA6B;gBAC7B,MAAMN,IAAIM,EAAEC,aAAa,CAACC,OAAO,CAAC;gBAClC,IAAIR,GAAG;oBACL,MAAMF,SAASE,EAAES,KAAK,CAAC;oBACvBR,SAAS,MAAMJ,MAAMa,MAAM,CAACZ;oBAC5BQ,EAAEK,cAAc;gBAClB;YACF;YACAC,QAAQ;YACRf,OAAOA;YACPI,UAAUA;YACVY,SAAS,EAAE;YACXC,QAAQ;YACRC,WAAW;YACXC,UAAUpB,MAAMqB,UAAU;YAC1BC,aAAa,CAACC,uBACZ,KAACzB;oBACE,GAAGyB,MAAM;oBACVhB,OAAM;oBACNiB,aAAY;oBACZC,YAAW;;;;AAMvB;AAEA,OAAO,MAAMC,qBAAgE;IAC3EC,oBAAoB,OAAOC;QACzB,MAAM1B,SAAS0B,KAAK1B,MAAM,EAAEC,IAAI,CAACC;YAC/B,IAAI,OAAOA,MAAM,UAAU;gBACzB,OAAO;oBAAEG,OAAOH;oBAAGH,OAAOG;gBAAE;YAC9B;YACA,OAAOA;QACT;QACA,OAAO;YACLyB,MAAM3B;QACR;IACF;IACA4B,WAAW;QACT,OAAO;YAAEC,WAAW,EAAE;QAAC;IACzB;IACAC,wBAAwBjC;IACxBkC,sBAAsB,IAAO,CAAA;YAAE/B,QAAQ,EAAE;QAAC,CAAA;AAC5C,EAAE"}