{"version":3,"sources":["../../../../src/queries/click-house-time-series-query/ClickHouseQueryEditor.tsx"],"sourcesContent":["// Copyright 2025 The Perses Authors\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n  DatasourceSelect,\n  DatasourceSelectProps,\n  isVariableDatasource,\n  OptionsEditorProps,\n} from '@perses-dev/plugin-system';\nimport { ReactElement, useCallback, useEffect, useState } from 'react';\nimport { ClickHouseTimeSeriesQuerySpec } from './click-house-query-types';\nimport { DATASOURCE_KIND, DEFAULT_DATASOURCE } from './constants';\nimport { ClickQLEditor } from '../../components';\nimport { Stack } from '@mui/material';\nimport { queryExample } from '../../components/constants';\n\ntype ClickHouseTimeSeriesQueryEditorProps = OptionsEditorProps<ClickHouseTimeSeriesQuerySpec>;\n\nexport function ClickHouseTimeSeriesQueryEditor(props: ClickHouseTimeSeriesQueryEditorProps): ReactElement {\n  const { onChange, value } = props;\n  const { datasource } = value;\n  const selectedDatasource = datasource ?? DEFAULT_DATASOURCE;\n  const [localQuery, setLocalQuery] = useState(value.query || '');\n\n  const handleDatasourceChange: DatasourceSelectProps['onChange'] = (newDatasourceSelection) => {\n    if (!isVariableDatasource(newDatasourceSelection) && newDatasourceSelection.kind === DATASOURCE_KIND) {\n      onChange({ ...value, datasource: newDatasourceSelection });\n      return;\n    }\n    throw new Error('Got unexpected non ClickHouse datasource selection');\n  };\n\n  const handleQueryChange = useCallback((newQuery: string) => {\n    setLocalQuery(newQuery);\n  }, []);\n\n  const handleQueryExecute = useCallback(\n    (query: string) => {\n      onChange({ ...value, query });\n    },\n    [onChange, value]\n  );\n\n  useEffect(() => {\n    setLocalQuery(value.query || '');\n  }, [value.query]);\n\n  const examplesStyle: React.CSSProperties = {\n    fontSize: '11px',\n    color: '#777',\n    backgroundColor: '#f5f5f5',\n    padding: '8px',\n    borderRadius: '4px',\n    fontFamily: 'Monaco, Menlo, \"Ubuntu Mono\", monospace',\n    whiteSpace: 'pre-wrap',\n    lineHeight: '1.3',\n  };\n\n  return (\n    <Stack spacing={1.5}>\n      <DatasourceSelect\n        datasourcePluginKind={DATASOURCE_KIND}\n        value={selectedDatasource}\n        onChange={handleDatasourceChange}\n        label=\"ClickHouse Datasource\"\n        notched\n      />\n      <ClickQLEditor\n        value={localQuery}\n        onChange={handleQueryChange}\n        onBlur={() => handleQueryExecute(localQuery)}\n        onKeyDown={(event) => {\n          if (event.key === 'Enter' && (event.ctrlKey || event.metaKey)) {\n            event.preventDefault();\n            handleQueryExecute(localQuery);\n          }\n        }}\n        placeholder=\"Enter ClickHouse SQL query\"\n      />\n\n      <details>\n        <summary style={{ cursor: 'pointer', fontSize: '12px', color: '#666', marginBottom: '8px' }}>\n          Query Examples\n        </summary>\n        <div style={examplesStyle}>{queryExample}</div>\n      </details>\n    </Stack>\n  );\n}\n"],"names":["DatasourceSelect","isVariableDatasource","useCallback","useEffect","useState","DATASOURCE_KIND","DEFAULT_DATASOURCE","ClickQLEditor","Stack","queryExample","ClickHouseTimeSeriesQueryEditor","props","onChange","value","datasource","selectedDatasource","localQuery","setLocalQuery","query","handleDatasourceChange","newDatasourceSelection","kind","Error","handleQueryChange","newQuery","handleQueryExecute","examplesStyle","fontSize","color","backgroundColor","padding","borderRadius","fontFamily","whiteSpace","lineHeight","spacing","datasourcePluginKind","label","notched","onBlur","onKeyDown","event","key","ctrlKey","metaKey","preventDefault","placeholder","details","summary","style","cursor","marginBottom","div"],"mappings":"AAAA,oCAAoC;AACpC,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAEjC,SACEA,gBAAgB,EAEhBC,oBAAoB,QAEf,4BAA4B;AACnC,SAAuBC,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,QAAQ;AAEvE,SAASC,eAAe,EAAEC,kBAAkB,QAAQ,cAAc;AAClE,SAASC,aAAa,QAAQ,mBAAmB;AACjD,SAASC,KAAK,QAAQ,gBAAgB;AACtC,SAASC,YAAY,QAAQ,6BAA6B;AAI1D,OAAO,SAASC,gCAAgCC,KAA2C;IACzF,MAAM,EAAEC,QAAQ,EAAEC,KAAK,EAAE,GAAGF;IAC5B,MAAM,EAAEG,UAAU,EAAE,GAAGD;IACvB,MAAME,qBAAqBD,cAAcR;IACzC,MAAM,CAACU,YAAYC,cAAc,GAAGb,SAASS,MAAMK,KAAK,IAAI;IAE5D,MAAMC,yBAA4D,CAACC;QACjE,IAAI,CAACnB,qBAAqBmB,2BAA2BA,uBAAuBC,IAAI,KAAKhB,iBAAiB;YACpGO,SAAS;gBAAE,GAAGC,KAAK;gBAAEC,YAAYM;YAAuB;YACxD;QACF;QACA,MAAM,IAAIE,MAAM;IAClB;IAEA,MAAMC,oBAAoBrB,YAAY,CAACsB;QACrCP,cAAcO;IAChB,GAAG,EAAE;IAEL,MAAMC,qBAAqBvB,YACzB,CAACgB;QACCN,SAAS;YAAE,GAAGC,KAAK;YAAEK;QAAM;IAC7B,GACA;QAACN;QAAUC;KAAM;IAGnBV,UAAU;QACRc,cAAcJ,MAAMK,KAAK,IAAI;IAC/B,GAAG;QAACL,MAAMK,KAAK;KAAC;IAEhB,MAAMQ,gBAAqC;QACzCC,UAAU;QACVC,OAAO;QACPC,iBAAiB;QACjBC,SAAS;QACTC,cAAc;QACdC,YAAY;QACZC,YAAY;QACZC,YAAY;IACd;IAEA,qBACE,MAAC1B;QAAM2B,SAAS;;0BACd,KAACnC;gBACCoC,sBAAsB/B;gBACtBQ,OAAOE;gBACPH,UAAUO;gBACVkB,OAAM;gBACNC,OAAO;;0BAET,KAAC/B;gBACCM,OAAOG;gBACPJ,UAAUW;gBACVgB,QAAQ,IAAMd,mBAAmBT;gBACjCwB,WAAW,CAACC;oBACV,IAAIA,MAAMC,GAAG,KAAK,WAAYD,CAAAA,MAAME,OAAO,IAAIF,MAAMG,OAAO,AAAD,GAAI;wBAC7DH,MAAMI,cAAc;wBACpBpB,mBAAmBT;oBACrB;gBACF;gBACA8B,aAAY;;0BAGd,MAACC;;kCACC,KAACC;wBAAQC,OAAO;4BAAEC,QAAQ;4BAAWvB,UAAU;4BAAQC,OAAO;4BAAQuB,cAAc;wBAAM;kCAAG;;kCAG7F,KAACC;wBAAIH,OAAOvB;kCAAgBjB;;;;;;AAIpC"}