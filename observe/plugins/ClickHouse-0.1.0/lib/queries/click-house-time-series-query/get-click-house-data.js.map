{"version":3,"sources":["../../../../src/queries/click-house-time-series-query/get-click-house-data.ts"],"sourcesContent":["// Copyright 2025 The Perses Authors\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { TimeSeries } from '@perses-dev/core';\nimport { TimeSeriesQueryPlugin, replaceVariables } from '@perses-dev/plugin-system';\nimport { ClickHouseTimeSeriesQuerySpec, DatasourceQueryResponse } from './click-house-query-types';\nimport { DEFAULT_DATASOURCE } from './constants';\nimport { LogEntry, LogsData, TimeSeriesEntry } from '../../model/click-house-data-types';\nimport { ClickHouseClient, ClickHouseQueryResponse } from '../../model/click-house-client';\n\nfunction buildTimeSeries(response?: DatasourceQueryResponse): TimeSeries[] {\n  if (!response || !response.data || response.data.length === 0) {\n    return [];\n  }\n\n  const values: Array<[number, number]> = response.data.map((row: TimeSeriesEntry) => {\n    const timestamp = new Date(row.time).getTime();\n    const value = Number(row.log_count);\n    return [timestamp, value];\n  });\n\n  return [\n    {\n      name: 'log_count',\n      values,\n    },\n  ];\n}\n\nfunction flattenObject(\n  obj: Record<string, any>,\n  parentKey = '',\n  result: Record<string, any> = {}\n): Record<string, any> {\n  for (const [key, value] of Object.entries(obj)) {\n    const newKey = parentKey ? `${parentKey}.${key}` : key;\n    if (value && typeof value === 'object' && !Array.isArray(value)) {\n      flattenObject(value, newKey, result);\n    } else {\n      result[newKey] = value;\n    }\n  }\n\n  return result;\n}\n\nfunction convertStreamsToLogs(streams: LogEntry[]): LogsData {\n  const entries: LogEntry[] = streams.map((entry) => {\n    const flattened = flattenObject(entry);\n\n    if (!flattened.Timestamp && flattened.log_time) {\n      flattened.Timestamp = flattened.log_time;\n    }\n\n    const sortedEntry: Record<string, any> = {};\n    Object.keys(flattened)\n      .sort((a, b) => a.localeCompare(b))\n      .forEach((key) => {\n        sortedEntry[key] = flattened[key];\n      });\n\n    const line = Object.entries(sortedEntry)\n      .filter(([key]) => key !== 'Timestamp')\n      .map(([key, value]) => `<${key}> ${value === '' || value === null || value === undefined ? '--' : value}`)\n      .join(' ');\n\n    return {\n      timestamp: sortedEntry?.Timestamp,\n      labels: sortedEntry,\n      line,\n    } as LogEntry;\n  });\n\n  return {\n    entries,\n    totalCount: entries.length,\n  };\n}\n\nexport const getTimeSeriesData: TimeSeriesQueryPlugin<ClickHouseTimeSeriesQuerySpec>['getTimeSeriesData'] = async (\n  spec,\n  context\n) => {\n  if (spec.query === undefined || spec.query === null || spec.query === '') {\n    return { series: [] };\n  }\n\n  const query = replaceVariables(spec.query, context.variableState);\n\n  const client = (await context.datasourceStore.getDatasourceClient(\n    spec.datasource ?? DEFAULT_DATASOURCE\n  )) as ClickHouseClient;\n\n  const { start, end } = context.timeRange;\n\n  const response: ClickHouseQueryResponse = await client.query({\n    start: start.getTime().toString(),\n    end: end.getTime().toString(),\n    query,\n  });\n\n  return {\n    series: buildTimeSeries(response),\n    timeRange: { start, end },\n    stepMs: 30 * 1000,\n    logs: convertStreamsToLogs(response.data),\n    metadata: {\n      executedQueryString: query,\n    },\n  };\n};\n"],"names":["replaceVariables","DEFAULT_DATASOURCE","buildTimeSeries","response","data","length","values","map","row","timestamp","Date","time","getTime","value","Number","log_count","name","flattenObject","obj","parentKey","result","key","Object","entries","newKey","Array","isArray","convertStreamsToLogs","streams","entry","flattened","Timestamp","log_time","sortedEntry","keys","sort","a","b","localeCompare","forEach","line","filter","undefined","join","labels","totalCount","getTimeSeriesData","spec","context","query","series","variableState","client","datasourceStore","getDatasourceClient","datasource","start","end","timeRange","toString","stepMs","logs","metadata","executedQueryString"],"mappings":"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"}