{"version":3,"sources":["../../../src/model/click-house-client.ts"],"sourcesContent":["// Copyright 2025 The Perses Authors\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { RequestHeaders } from '@perses-dev/core';\n\nexport interface ClickHouseQueryParams {\n  query: string;\n  database?: string;\n}\n\nexport interface ClickHouseQueryOptions {\n  datasourceUrl: string;\n  headers?: RequestHeaders;\n}\n\nexport interface ClickHouseQueryResponse {\n  status: 'success' | 'error';\n  data: any;\n}\n\nexport interface ClickHouseClient {\n  query: (params: { start: string; end: string; query: string }) => Promise<ClickHouseQueryResponse>;\n}\n\nexport async function query(\n  params: ClickHouseQueryParams,\n  queryOptions: ClickHouseQueryOptions\n): Promise<ClickHouseQueryResponse> {\n  const { datasourceUrl, headers } = queryOptions;\n\n  const url = urlBuilder(datasourceUrl);\n  if (!params.query) {\n    throw new Error('No query provided in params');\n  }\n\n  let finalQuery = params.query.trim();\n  if (!finalQuery.toUpperCase().includes('FORMAT')) {\n    finalQuery += ' FORMAT JSON';\n  }\n\n  url.searchParams.set('query', finalQuery);\n  url.searchParams.set('database', params.database || 'default');\n\n  const init = {\n    method: 'GET',\n    headers: {\n      ...headers,\n    },\n  };\n\n  try {\n    const response = await fetch(url.toString(), init);\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('ClickHouse error response:', errorText);\n      return {\n        status: 'error',\n        data: [],\n      };\n    }\n\n    const body = await response.json();\n\n    return {\n      status: 'success',\n      data: body.data || body,\n    };\n  } catch (e) {\n    throw new Error(`ClickHouse query failed: ${e}`);\n  }\n}\n\nfunction urlBuilder(datasourceUrl: string): URL {\n  if (datasourceUrl.startsWith('http://') || datasourceUrl.startsWith('https://')) {\n    return new URL(datasourceUrl);\n  }\n  // if relative path (e.g. proxy url), resolve against window.location.origin\n  return new URL(datasourceUrl, window.location.origin);\n}\n"],"names":["query","params","queryOptions","datasourceUrl","headers","url","urlBuilder","Error","finalQuery","trim","toUpperCase","includes","searchParams","set","database","init","method","response","fetch","toString","ok","errorText","text","console","error","status","data","body","json","e","startsWith","URL","window","location","origin"],"mappings":"AAAA,oCAAoC;AACpC,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AAuBjC,OAAO,eAAeA,MACpBC,MAA6B,EAC7BC,YAAoC;IAEpC,MAAM,EAAEC,aAAa,EAAEC,OAAO,EAAE,GAAGF;IAEnC,MAAMG,MAAMC,WAAWH;IACvB,IAAI,CAACF,OAAOD,KAAK,EAAE;QACjB,MAAM,IAAIO,MAAM;IAClB;IAEA,IAAIC,aAAaP,OAAOD,KAAK,CAACS,IAAI;IAClC,IAAI,CAACD,WAAWE,WAAW,GAAGC,QAAQ,CAAC,WAAW;QAChDH,cAAc;IAChB;IAEAH,IAAIO,YAAY,CAACC,GAAG,CAAC,SAASL;IAC9BH,IAAIO,YAAY,CAACC,GAAG,CAAC,YAAYZ,OAAOa,QAAQ,IAAI;IAEpD,MAAMC,OAAO;QACXC,QAAQ;QACRZ,SAAS;YACP,GAAGA,OAAO;QACZ;IACF;IAEA,IAAI;QACF,MAAMa,WAAW,MAAMC,MAAMb,IAAIc,QAAQ,IAAIJ;QAE7C,IAAI,CAACE,SAASG,EAAE,EAAE;YAChB,MAAMC,YAAY,MAAMJ,SAASK,IAAI;YACrCC,QAAQC,KAAK,CAAC,8BAA8BH;YAC5C,OAAO;gBACLI,QAAQ;gBACRC,MAAM,EAAE;YACV;QACF;QAEA,MAAMC,OAAO,MAAMV,SAASW,IAAI;QAEhC,OAAO;YACLH,QAAQ;YACRC,MAAMC,KAAKD,IAAI,IAAIC;QACrB;IACF,EAAE,OAAOE,GAAG;QACV,MAAM,IAAItB,MAAM,CAAC,yBAAyB,EAAEsB,GAAG;IACjD;AACF;AAEA,SAASvB,WAAWH,aAAqB;IACvC,IAAIA,cAAc2B,UAAU,CAAC,cAAc3B,cAAc2B,UAAU,CAAC,aAAa;QAC/E,OAAO,IAAIC,IAAI5B;IACjB;IACA,4EAA4E;IAC5E,OAAO,IAAI4B,IAAI5B,eAAe6B,OAAOC,QAAQ,CAACC,MAAM;AACtD"}