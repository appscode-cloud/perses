{"version":3,"sources":["../../../../src/TracingGanttChart/MiniGanttChart/draw.ts"],"sourcesContent":["// Copyright 2024 The Perses Authors\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Span, Trace } from '../trace';\nimport { minSpanWidthPx } from '../utils';\n\nconst MIN_BAR_HEIGHT = 1;\nconst MAX_BAR_HEIGHT = 7;\n\nfunction countSpans(span: Span): number {\n  let n = 1;\n  for (const childSpan of span.childSpans) {\n    n += countSpans(childSpan);\n  }\n  return n;\n}\n\nexport function drawSpans(\n  ctx: CanvasRenderingContext2D,\n  width: number,\n  height: number,\n  trace: Trace,\n  spanColorGenerator: (span: Span) => string\n): void {\n  // calculate optimal height, enforce min and max bar height and finally round to an integer\n  const numSpans = trace.rootSpans.map(countSpans).reduce((acc, n) => acc + n, 0);\n  const barHeight = Math.round(Math.min(Math.max(height / numSpans, MIN_BAR_HEIGHT), MAX_BAR_HEIGHT));\n\n  const traceDuration = trace.endTimeUnixMs - trace.startTimeUnixMs;\n  const yChange = height / numSpans;\n  let y = 0;\n\n  const drawSpan = (span: Span): void => {\n    const spanDuration = span.endTimeUnixMs - span.startTimeUnixMs;\n    const relativeDuration = spanDuration / traceDuration;\n    const relativeStart = (span.startTimeUnixMs - trace.startTimeUnixMs) / traceDuration;\n\n    ctx.fillStyle = spanColorGenerator(span);\n    ctx.beginPath();\n    ctx.rect(\n      Math.round(relativeStart * width),\n      Math.round(y),\n      Math.max(minSpanWidthPx, Math.round(relativeDuration * width)),\n      barHeight\n    );\n    ctx.fill();\n    y += yChange;\n\n    for (const childSpan of span.childSpans) {\n      drawSpan(childSpan);\n    }\n  };\n\n  for (const rootSpan of trace.rootSpans) {\n    drawSpan(rootSpan);\n  }\n}\n"],"names":["minSpanWidthPx","MIN_BAR_HEIGHT","MAX_BAR_HEIGHT","countSpans","span","n","childSpan","childSpans","drawSpans","ctx","width","height","trace","spanColorGenerator","numSpans","rootSpans","map","reduce","acc","barHeight","Math","round","min","max","traceDuration","endTimeUnixMs","startTimeUnixMs","yChange","y","drawSpan","spanDuration","relativeDuration","relativeStart","fillStyle","beginPath","rect","fill","rootSpan"],"mappings":"AAAA,oCAAoC;AACpC,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AAGjC,SAASA,cAAc,QAAQ,WAAW;AAE1C,MAAMC,iBAAiB;AACvB,MAAMC,iBAAiB;AAEvB,SAASC,WAAWC,IAAU;IAC5B,IAAIC,IAAI;IACR,KAAK,MAAMC,aAAaF,KAAKG,UAAU,CAAE;QACvCF,KAAKF,WAAWG;IAClB;IACA,OAAOD;AACT;AAEA,OAAO,SAASG,UACdC,GAA6B,EAC7BC,KAAa,EACbC,MAAc,EACdC,KAAY,EACZC,kBAA0C;IAE1C,2FAA2F;IAC3F,MAAMC,WAAWF,MAAMG,SAAS,CAACC,GAAG,CAACb,YAAYc,MAAM,CAAC,CAACC,KAAKb,IAAMa,MAAMb,GAAG;IAC7E,MAAMc,YAAYC,KAAKC,KAAK,CAACD,KAAKE,GAAG,CAACF,KAAKG,GAAG,CAACZ,SAASG,UAAUb,iBAAiBC;IAEnF,MAAMsB,gBAAgBZ,MAAMa,aAAa,GAAGb,MAAMc,eAAe;IACjE,MAAMC,UAAUhB,SAASG;IACzB,IAAIc,IAAI;IAER,MAAMC,WAAW,CAACzB;QAChB,MAAM0B,eAAe1B,KAAKqB,aAAa,GAAGrB,KAAKsB,eAAe;QAC9D,MAAMK,mBAAmBD,eAAeN;QACxC,MAAMQ,gBAAgB,AAAC5B,CAAAA,KAAKsB,eAAe,GAAGd,MAAMc,eAAe,AAAD,IAAKF;QAEvEf,IAAIwB,SAAS,GAAGpB,mBAAmBT;QACnCK,IAAIyB,SAAS;QACbzB,IAAI0B,IAAI,CACNf,KAAKC,KAAK,CAACW,gBAAgBtB,QAC3BU,KAAKC,KAAK,CAACO,IACXR,KAAKG,GAAG,CAACvB,gBAAgBoB,KAAKC,KAAK,CAACU,mBAAmBrB,SACvDS;QAEFV,IAAI2B,IAAI;QACRR,KAAKD;QAEL,KAAK,MAAMrB,aAAaF,KAAKG,UAAU,CAAE;YACvCsB,SAASvB;QACX;IACF;IAEA,KAAK,MAAM+B,YAAYzB,MAAMG,SAAS,CAAE;QACtCc,SAASQ;IACX;AACF"}