{"version":3,"sources":["../../../../src/TracingGanttChart/GanttTable/SpanIndents.tsx"],"sourcesContent":["// Copyright 2024 The Perses Authors\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { styled, useTheme } from '@mui/material';\nimport ChevronDownIcon from 'mdi-material-ui/ChevronDown';\nimport ChevronRightIcon from 'mdi-material-ui/ChevronRight';\nimport { MouseEvent, ReactElement, useCallback } from 'react';\nimport { Span } from '../trace';\nimport { useGanttTableContext } from './GanttTableProvider';\n\nconst MIN_INDENT_WIDTH = 8;\nconst MAX_INDENT_WIDTH = 24;\n\nexport interface SpanIndentsProps {\n  span: Span;\n}\n\n/**\n * SpanIndents renders the indention boxes,\n * and handles the click and mouseOver events\n *\n * Note: This component gets re-rendered on every hover of any indention box,\n * therefore rendering performance is essential.\n */\nexport function SpanIndents(props: SpanIndentsProps): ReactElement {\n  const { span } = props;\n  const { collapsedSpans, setCollapsedSpans, visibleSpans, hoveredParent, setHoveredParent } = useGanttTableContext();\n  const theme = useTheme();\n\n  const handleToggleClick = useCallback(\n    (e: MouseEvent) => {\n      e.stopPropagation();\n      if (collapsedSpans.includes(span.spanId)) {\n        setCollapsedSpans(collapsedSpans.filter((spanId) => spanId !== span.spanId));\n      } else {\n        setCollapsedSpans([...collapsedSpans, span.spanId]);\n      }\n    },\n    [span, collapsedSpans, setCollapsedSpans]\n  );\n\n  const handleIconMouseEnter = useCallback(() => {\n    setHoveredParent(span.spanId);\n  }, [span, setHoveredParent]);\n\n  const spans = [span];\n  let parent = span.parentSpan;\n  while (parent) {\n    spans.unshift(parent);\n    parent = parent.parentSpan;\n  }\n\n  // on first render visibleSpans is empty, therefore let's use MAX_INDENT_WIDTH to avoid an animation on page load.\n  return (\n    <>\n      {spans.map((span, i) => (\n        <SpanIndentBox\n          key={span.spanId}\n          style={{\n            width:\n              i === spans.length - 1 || visibleSpans.length === 0 || visibleSpans.includes(span.spanId)\n                ? MAX_INDENT_WIDTH\n                : MIN_INDENT_WIDTH,\n            borderLeft: `${hoveredParent === (span.parentSpanId ?? '') ? 3 : 1}px solid ${theme.palette.divider}`,\n          }}\n          onMouseEnter={() => setHoveredParent(span.parentSpanId ?? '')}\n          onMouseLeave={() => setHoveredParent(undefined)}\n        >\n          {i === spans.length - 1 &&\n            span.childSpans.length > 0 &&\n            (collapsedSpans.includes(span.spanId) ? (\n              <ChevronRightIcon titleAccess=\"expand\" onClick={handleToggleClick} onMouseEnter={handleIconMouseEnter} />\n            ) : (\n              <ChevronDownIcon titleAccess=\"collapse\" onClick={handleToggleClick} onMouseEnter={handleIconMouseEnter} />\n            ))}\n        </SpanIndentBox>\n      ))}\n    </>\n  );\n}\n\nconst SpanIndentBox = styled('div')({\n  display: 'flex',\n  height: '100%',\n  alignItems: 'center',\n  justifyContent: 'flex-end',\n  flexShrink: 0,\n  transition: 'width 1s',\n});\n"],"names":["styled","useTheme","ChevronDownIcon","ChevronRightIcon","useCallback","useGanttTableContext","MIN_INDENT_WIDTH","MAX_INDENT_WIDTH","SpanIndents","props","span","collapsedSpans","setCollapsedSpans","visibleSpans","hoveredParent","setHoveredParent","theme","handleToggleClick","e","stopPropagation","includes","spanId","filter","handleIconMouseEnter","spans","parent","parentSpan","unshift","map","i","SpanIndentBox","style","width","length","borderLeft","parentSpanId","palette","divider","onMouseEnter","onMouseLeave","undefined","childSpans","titleAccess","onClick","display","height","alignItems","justifyContent","flexShrink","transition"],"mappings":"AAAA,oCAAoC;AACpC,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAEjC,SAASA,MAAM,EAAEC,QAAQ,QAAQ,gBAAgB;AACjD,OAAOC,qBAAqB,8BAA8B;AAC1D,OAAOC,sBAAsB,+BAA+B;AAC5D,SAAmCC,WAAW,QAAQ,QAAQ;AAE9D,SAASC,oBAAoB,QAAQ,uBAAuB;AAE5D,MAAMC,mBAAmB;AACzB,MAAMC,mBAAmB;AAMzB;;;;;;CAMC,GACD,OAAO,SAASC,YAAYC,KAAuB;IACjD,MAAM,EAAEC,IAAI,EAAE,GAAGD;IACjB,MAAM,EAAEE,cAAc,EAAEC,iBAAiB,EAAEC,YAAY,EAAEC,aAAa,EAAEC,gBAAgB,EAAE,GAAGV;IAC7F,MAAMW,QAAQf;IAEd,MAAMgB,oBAAoBb,YACxB,CAACc;QACCA,EAAEC,eAAe;QACjB,IAAIR,eAAeS,QAAQ,CAACV,KAAKW,MAAM,GAAG;YACxCT,kBAAkBD,eAAeW,MAAM,CAAC,CAACD,SAAWA,WAAWX,KAAKW,MAAM;QAC5E,OAAO;YACLT,kBAAkB;mBAAID;gBAAgBD,KAAKW,MAAM;aAAC;QACpD;IACF,GACA;QAACX;QAAMC;QAAgBC;KAAkB;IAG3C,MAAMW,uBAAuBnB,YAAY;QACvCW,iBAAiBL,KAAKW,MAAM;IAC9B,GAAG;QAACX;QAAMK;KAAiB;IAE3B,MAAMS,QAAQ;QAACd;KAAK;IACpB,IAAIe,SAASf,KAAKgB,UAAU;IAC5B,MAAOD,OAAQ;QACbD,MAAMG,OAAO,CAACF;QACdA,SAASA,OAAOC,UAAU;IAC5B;IAEA,kHAAkH;IAClH,qBACE;kBACGF,MAAMI,GAAG,CAAC,CAAClB,MAAMmB,kBAChB,KAACC;gBAECC,OAAO;oBACLC,OACEH,MAAML,MAAMS,MAAM,GAAG,KAAKpB,aAAaoB,MAAM,KAAK,KAAKpB,aAAaO,QAAQ,CAACV,KAAKW,MAAM,IACpFd,mBACAD;oBACN4B,YAAY,GAAGpB,kBAAmBJ,CAAAA,KAAKyB,YAAY,IAAI,EAAC,IAAK,IAAI,EAAE,SAAS,EAAEnB,MAAMoB,OAAO,CAACC,OAAO,EAAE;gBACvG;gBACAC,cAAc,IAAMvB,iBAAiBL,KAAKyB,YAAY,IAAI;gBAC1DI,cAAc,IAAMxB,iBAAiByB;0BAEpCX,MAAML,MAAMS,MAAM,GAAG,KACpBvB,KAAK+B,UAAU,CAACR,MAAM,GAAG,KACxBtB,CAAAA,eAAeS,QAAQ,CAACV,KAAKW,MAAM,kBAClC,KAAClB;oBAAiBuC,aAAY;oBAASC,SAAS1B;oBAAmBqB,cAAcf;mCAEjF,KAACrB;oBAAgBwC,aAAY;oBAAWC,SAAS1B;oBAAmBqB,cAAcf;kBACpF;eAjBGb,KAAKW,MAAM;;AAsB1B;AAEA,MAAMS,gBAAgB9B,OAAO,OAAO;IAClC4C,SAAS;IACTC,QAAQ;IACRC,YAAY;IACZC,gBAAgB;IAChBC,YAAY;IACZC,YAAY;AACd"}