{"version":3,"sources":["../../../../src/test/convert/jaeger.ts"],"sourcesContent":["// Copyright 2024 The Perses Authors\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { otlpcommonv1, otlpresourcev1, otlptracev1 } from '@perses-dev/core';\n\n// the following Jaeger data types and parsing function should eventually be moved to a Jaeger data source plugin\n\nexport interface JaegerTrace {\n  traceID: string;\n  spans: Span[];\n  processes: unknown;\n  warnings: unknown;\n}\n\ninterface Span {\n  traceID: string;\n  spanID: string;\n  hasChildren: boolean;\n  childSpanIds: string[];\n  depth: number;\n  processID: string;\n  process: Process;\n\n  operationName: string;\n  /** start time in microseconds */\n  startTime: number;\n  relativeStartTime: number;\n  duration: number;\n  tags: Tag[];\n  references: unknown;\n  logs: unknown;\n  warnings: unknown;\n}\n\ninterface Process {\n  serviceName: string;\n  tags: Tag[];\n}\n\ntype Tag =\n  | {\n      type: 'string';\n      key: string;\n      value: string;\n    }\n  | {\n      type: 'int64';\n      key: string;\n      value: number;\n    };\n\nexport function jaegerTraceToOTLP(jaegerTrace: JaegerTrace): otlptracev1.TracesData {\n  return {\n    resourceSpans: jaegerTrace.spans.map(buildResourceSpan),\n  };\n}\n\nfunction buildResourceSpan(span: Span): otlptracev1.ResourceSpan {\n  return {\n    resource: buildResource(span.process),\n    scopeSpans: [\n      {\n        scope: {\n          name: '',\n        },\n        spans: [\n          {\n            traceId: span.traceID,\n            spanId: span.spanID,\n            name: span.operationName,\n            kind: '',\n            startTimeUnixNano: (span.startTime * 1000).toString(),\n            endTimeUnixNano: ((span.startTime + span.duration) * 1000).toString(),\n            attributes: span.tags.map(buildKeyValue),\n            events: [],\n            status: {},\n          },\n        ],\n      },\n    ],\n  };\n}\n\nfunction buildResource(process: Process): otlpresourcev1.Resource {\n  return {\n    attributes: [\n      { key: 'service.name', value: { stringValue: process.serviceName } },\n      ...process.tags.map(buildKeyValue),\n    ],\n  };\n}\n\nfunction buildKeyValue(tag: Tag): otlpcommonv1.KeyValue {\n  return { key: tag.key, value: buildAnyValue(tag) };\n}\n\nfunction buildAnyValue(tags: Tag): otlpcommonv1.AnyValue {\n  switch (tags.type) {\n    case 'string':\n      return { stringValue: tags.value };\n    case 'int64':\n      return { intValue: tags.value.toString() };\n    default:\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      throw new Error(`unknown jaeger tag type ${(tags as any).type}`);\n  }\n}\n"],"names":["jaegerTraceToOTLP","jaegerTrace","resourceSpans","spans","map","buildResourceSpan","span","resource","buildResource","process","scopeSpans","scope","name","traceId","traceID","spanId","spanID","operationName","kind","startTimeUnixNano","startTime","toString","endTimeUnixNano","duration","attributes","tags","buildKeyValue","events","status","key","value","stringValue","serviceName","tag","buildAnyValue","type","intValue","Error"],"mappings":"AAAA,oCAAoC;AACpC,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AAkDjC,OAAO,SAASA,kBAAkBC,WAAwB;IACxD,OAAO;QACLC,eAAeD,YAAYE,KAAK,CAACC,GAAG,CAACC;IACvC;AACF;AAEA,SAASA,kBAAkBC,IAAU;IACnC,OAAO;QACLC,UAAUC,cAAcF,KAAKG,OAAO;QACpCC,YAAY;YACV;gBACEC,OAAO;oBACLC,MAAM;gBACR;gBACAT,OAAO;oBACL;wBACEU,SAASP,KAAKQ,OAAO;wBACrBC,QAAQT,KAAKU,MAAM;wBACnBJ,MAAMN,KAAKW,aAAa;wBACxBC,MAAM;wBACNC,mBAAmB,AAACb,CAAAA,KAAKc,SAAS,GAAG,IAAG,EAAGC,QAAQ;wBACnDC,iBAAiB,AAAC,CAAA,AAAChB,CAAAA,KAAKc,SAAS,GAAGd,KAAKiB,QAAQ,AAAD,IAAK,IAAG,EAAGF,QAAQ;wBACnEG,YAAYlB,KAAKmB,IAAI,CAACrB,GAAG,CAACsB;wBAC1BC,QAAQ,EAAE;wBACVC,QAAQ,CAAC;oBACX;iBACD;YACH;SACD;IACH;AACF;AAEA,SAASpB,cAAcC,OAAgB;IACrC,OAAO;QACLe,YAAY;YACV;gBAAEK,KAAK;gBAAgBC,OAAO;oBAAEC,aAAatB,QAAQuB,WAAW;gBAAC;YAAE;eAChEvB,QAAQgB,IAAI,CAACrB,GAAG,CAACsB;SACrB;IACH;AACF;AAEA,SAASA,cAAcO,GAAQ;IAC7B,OAAO;QAAEJ,KAAKI,IAAIJ,GAAG;QAAEC,OAAOI,cAAcD;IAAK;AACnD;AAEA,SAASC,cAAcT,IAAS;IAC9B,OAAQA,KAAKU,IAAI;QACf,KAAK;YACH,OAAO;gBAAEJ,aAAaN,KAAKK,KAAK;YAAC;QACnC,KAAK;YACH,OAAO;gBAAEM,UAAUX,KAAKK,KAAK,CAACT,QAAQ;YAAG;QAC3C;YACE,8DAA8D;YAC9D,MAAM,IAAIgB,MAAM,CAAC,wBAAwB,EAAE,AAACZ,KAAaU,IAAI,EAAE;IACnE;AACF"}