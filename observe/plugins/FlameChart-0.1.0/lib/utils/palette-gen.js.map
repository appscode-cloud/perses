{"version":3,"sources":["../../../src/utils/palette-gen.ts"],"sourcesContent":["// Copyright 2025 The Perses Authors\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { getConsistentColor } from './palette';\n\nconst LESS_THAN_ONE_COLOR = '#dee2e6'; // use this color when the value is less than 1\nconst MORE_THAN_HUNDRED_COLOR = '#ffbdbd'; // use this color when the value is more than 100\nconst NOT_FOUND_COLOR = '#393d47';\n\n// Palette of color to display the flame chart by value\nconst valueColorPalette: string[] = [\n  '#fff85b',\n  '#ffde4c',\n  '#ffc252',\n  '#ff8c00',\n  '#f08c00',\n  '#e67762',\n  '#ff8c00',\n  '#ff6f00',\n  '#ff7070',\n  '#ff3300',\n  '#ff004c',\n];\n\n/**\n * Get span color, account for whether palette is 'package-name' or 'value'\n */\nexport function getSpanColor(palette: string, functionName: string, value: number): string {\n  if (palette === 'package-name') {\n    return getColorByPackageName(functionName, value);\n  }\n\n  return getColorByValue(value);\n}\n\n/**\n * Generate a consistent color for displaying flame chart by total value\n */\nexport function getColorByValue(value: number): string {\n  if (value < 1) return LESS_THAN_ONE_COLOR;\n  if (value > 100) return MORE_THAN_HUNDRED_COLOR;\n  return valueColorPalette[Math.floor(value / (valueColorPalette.length - 1))] || NOT_FOUND_COLOR;\n}\n\n/**\n * Generate a consistent span color for displaying flame chart by package-name\n * (if function name includes 'error', it will have a red hue).\n */\nexport function getColorByPackageName(functionName: string, value: number): string {\n  // get package name from the function name.\n  // It is the substring between the last '/' and the first '.' or the end of the string\n  const packageName = functionName.split('/').pop()?.split('.')[0] || functionName;\n\n  return value < 1 ? LESS_THAN_ONE_COLOR : getConsistentColor(packageName, false);\n}\n"],"names":["getConsistentColor","LESS_THAN_ONE_COLOR","MORE_THAN_HUNDRED_COLOR","NOT_FOUND_COLOR","valueColorPalette","getSpanColor","palette","functionName","value","getColorByPackageName","getColorByValue","Math","floor","length","packageName","split","pop"],"mappings":"AAAA,oCAAoC;AACpC,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AAEjC,SAASA,kBAAkB,QAAQ,YAAY;AAE/C,MAAMC,sBAAsB,WAAW,+CAA+C;AACtF,MAAMC,0BAA0B,WAAW,iDAAiD;AAC5F,MAAMC,kBAAkB;AAExB,uDAAuD;AACvD,MAAMC,oBAA8B;IAClC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAED;;CAEC,GACD,OAAO,SAASC,aAAaC,OAAe,EAAEC,YAAoB,EAAEC,KAAa;IAC/E,IAAIF,YAAY,gBAAgB;QAC9B,OAAOG,sBAAsBF,cAAcC;IAC7C;IAEA,OAAOE,gBAAgBF;AACzB;AAEA;;CAEC,GACD,OAAO,SAASE,gBAAgBF,KAAa;IAC3C,IAAIA,QAAQ,GAAG,OAAOP;IACtB,IAAIO,QAAQ,KAAK,OAAON;IACxB,OAAOE,iBAAiB,CAACO,KAAKC,KAAK,CAACJ,QAASJ,CAAAA,kBAAkBS,MAAM,GAAG,CAAA,GAAI,IAAIV;AAClF;AAEA;;;CAGC,GACD,OAAO,SAASM,sBAAsBF,YAAoB,EAAEC,KAAa;IACvE,2CAA2C;IAC3C,sFAAsF;IACtF,MAAMM,cAAcP,aAAaQ,KAAK,CAAC,KAAKC,GAAG,IAAID,MAAM,IAAI,CAAC,EAAE,IAAIR;IAEpE,OAAOC,QAAQ,IAAIP,sBAAsBD,mBAAmBc,aAAa;AAC3E"}