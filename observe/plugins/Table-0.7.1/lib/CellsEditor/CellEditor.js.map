{"version":3,"sources":["../../../src/CellsEditor/CellEditor.tsx"],"sourcesContent":["// Copyright 2024 The Perses Authors\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n  Grid2Props as GridProps,\n  IconButton,\n  MenuItem,\n  Stack,\n  StackProps,\n  TextField,\n  Tooltip,\n  Typography,\n  Grid2 as Grid,\n} from '@mui/material';\nimport DeleteIcon from 'mdi-material-ui/DeleteOutline';\nimport { OptionsColorPicker } from '@perses-dev/components';\nimport PlusIcon from 'mdi-material-ui/Plus';\nimport { ReactElement } from 'react';\nimport { CellSettings, Condition } from '../table-model';\n\ninterface ConditionEditorProps extends Omit<StackProps, 'onChange'> {\n  condition: Condition;\n  onChange: (condition: Condition) => void;\n}\n\nfunction ConditionEditor({ condition, onChange, ...props }: ConditionEditorProps): ReactElement | null {\n  if (condition.kind === 'Value') {\n    return (\n      <Stack gap={1} direction=\"row\" {...props}>\n        <TextField\n          label=\"Value\"\n          placeholder=\"Exact value\"\n          value={condition.spec?.value ?? ''}\n          onChange={(e) => onChange({ ...condition, spec: { value: e.target.value } } as Condition)}\n          fullWidth\n        />\n      </Stack>\n    );\n  } else if (condition.kind === 'Range') {\n    return (\n      <Stack gap={1} direction=\"row\" {...props}>\n        <TextField\n          label=\"From\"\n          placeholder=\"Start of range\"\n          value={condition.spec?.min ?? ''}\n          onChange={(e) => onChange({ ...condition, spec: { ...condition.spec, min: +e.target.value } } as Condition)}\n          fullWidth\n        />\n        <TextField\n          label=\"To\"\n          placeholder=\"End of range (inclusive)\"\n          value={condition.spec?.max ?? ''}\n          onChange={(e) => onChange({ ...condition, spec: { ...condition.spec, max: +e.target.value } } as Condition)}\n          fullWidth\n        />\n      </Stack>\n    );\n  } else if (condition.kind === 'Regex') {\n    return (\n      <Stack gap={1} direction=\"row\" {...props}>\n        <TextField\n          label=\"Regular Expression\"\n          placeholder=\"JavaScript regular expression\"\n          value={condition.spec?.expr ?? ''}\n          onChange={(e) => onChange({ ...condition, spec: { expr: e.target.value } } as Condition)}\n          fullWidth\n        />\n      </Stack>\n    );\n  } else if (condition.kind === 'Misc') {\n    return (\n      <Stack gap={1} direction=\"row\" {...props}>\n        <TextField\n          select\n          label=\"Value\"\n          value={condition.spec?.value ?? ''}\n          onChange={(e) => onChange({ ...condition, spec: { value: e.target.value } } as Condition)}\n          fullWidth\n        >\n          <MenuItem value=\"empty\">\n            <Stack>\n              <Typography>Empty</Typography>\n              <Typography variant=\"caption\">Matches empty string</Typography>\n            </Stack>\n          </MenuItem>\n          <MenuItem value=\"null\">\n            <Stack>\n              <Typography>Null</Typography>\n              <Typography variant=\"caption\">Matches null or undefined</Typography>\n            </Stack>\n          </MenuItem>\n          <MenuItem value=\"NaN\">\n            <Stack>\n              <Typography>NaN</Typography>\n              <Typography variant=\"caption\">Matches Not a Number value</Typography>\n            </Stack>\n          </MenuItem>\n          <MenuItem value=\"true\">\n            <Stack>\n              <Typography>True</Typography>\n              <Typography variant=\"caption\">Matches true boolean</Typography>\n            </Stack>\n          </MenuItem>\n          <MenuItem value=\"false\">\n            <Stack>\n              <Typography>False</Typography>\n              <Typography variant=\"caption\">Matches false boolean</Typography>\n            </Stack>\n          </MenuItem>\n        </TextField>\n      </Stack>\n    );\n  }\n  return null;\n}\n\nexport interface CellEditorProps extends Omit<GridProps, 'onChange'> {\n  cell: CellSettings;\n  onChange: (cell: CellSettings) => void;\n  onDelete: () => void;\n}\n\nexport function CellEditor({ cell, onChange, onDelete, ...props }: CellEditorProps): ReactElement {\n  return (\n    <Grid container spacing={2} {...props}>\n      <Grid size={{ xs: 5 }}>\n        <Stack direction=\"row\" gap={1} width=\"100%\">\n          <TextField\n            select\n            label=\"Type\"\n            value={cell.condition.kind}\n            onChange={(e) => onChange({ ...cell, condition: { kind: e.target.value } } as CellSettings)}\n            required\n            sx={{ width: '120px' }}\n          >\n            <MenuItem value=\"Value\">\n              <Stack>\n                <Typography>Value</Typography>\n                {cell.condition.kind !== 'Value' && (\n                  <Typography variant=\"caption\">Matches an exact text value</Typography>\n                )}\n              </Stack>\n            </MenuItem>\n            <MenuItem value=\"Range\">\n              <Stack>\n                <Typography>Range</Typography>\n                {cell.condition.kind !== 'Range' && (\n                  <Typography variant=\"caption\">Matches against a numerical range</Typography>\n                )}\n              </Stack>\n            </MenuItem>\n            <MenuItem value=\"Regex\">\n              <Stack>\n                <Typography>Regex</Typography>\n                {cell.condition.kind !== 'Regex' && (\n                  <Typography variant=\"caption\">Matches against a regular expression</Typography>\n                )}\n              </Stack>\n            </MenuItem>\n            <MenuItem value=\"Misc\">\n              <Stack>\n                <Typography>Misc</Typography>\n                {cell.condition.kind !== 'Misc' && (\n                  <Typography variant=\"caption\">Matches against empty, null and NaN values</Typography>\n                )}\n              </Stack>\n            </MenuItem>\n          </TextField>\n          <ConditionEditor\n            width=\"100%\"\n            condition={cell.condition}\n            onChange={(updatedCondition) => onChange({ ...cell, condition: updatedCondition })}\n          />\n        </Stack>\n      </Grid>\n      <Grid size={{ xs: 4 }}>\n        <TextField\n          label=\"Display text\"\n          value={cell.text}\n          onChange={(e) => onChange({ ...cell, text: e.target.value })}\n          fullWidth\n        />\n      </Grid>\n      <Grid size={{ xs: 1 }}>\n        <Stack direction=\"row\" justifyContent=\"center\" gap={1}>\n          {cell.textColor ? (\n            <OptionsColorPicker\n              label=\"Text Color\"\n              color={cell.textColor ?? '#000'}\n              onColorChange={(color) => onChange({ ...cell, textColor: color } as CellSettings)}\n              onClear={() => onChange({ ...cell, textColor: undefined } as CellSettings)}\n            />\n          ) : (\n            <IconButton onClick={() => onChange({ ...cell, textColor: '#000' })}>\n              <PlusIcon />\n            </IconButton>\n          )}\n        </Stack>\n      </Grid>\n      <Grid size={{ xs: 1 }}>\n        <Stack direction=\"row\" justifyContent=\"center\">\n          {cell.backgroundColor ? (\n            <OptionsColorPicker\n              label=\"Background Color\"\n              color={cell.backgroundColor ?? '#fff'}\n              onColorChange={(color) => onChange({ ...cell, backgroundColor: color } as CellSettings)}\n              onClear={() => onChange({ ...cell, backgroundColor: undefined } as CellSettings)}\n            />\n          ) : (\n            <IconButton onClick={() => onChange({ ...cell, backgroundColor: '#000' })}>\n              <PlusIcon />\n            </IconButton>\n          )}\n        </Stack>\n      </Grid>\n      <Grid size={{ xs: 1 }} textAlign=\"end\">\n        <Tooltip title=\"Remove cell settings\" placement=\"top\">\n          <IconButton size=\"small\" sx={{ marginLeft: 'auto' }} onClick={onDelete} key=\"delete-cell-button\">\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      </Grid>\n    </Grid>\n  );\n}\n"],"names":["IconButton","MenuItem","Stack","TextField","Tooltip","Typography","Grid2","Grid","DeleteIcon","OptionsColorPicker","PlusIcon","ConditionEditor","condition","onChange","props","kind","gap","direction","label","placeholder","value","spec","e","target","fullWidth","min","max","expr","select","variant","CellEditor","cell","onDelete","container","spacing","size","xs","width","required","sx","updatedCondition","text","justifyContent","textColor","color","onColorChange","onClear","undefined","onClick","backgroundColor","textAlign","title","placement","marginLeft"],"mappings":"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"}