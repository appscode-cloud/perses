{"version":3,"sources":["../../src/palette-gen.ts"],"sourcesContent":["// Copyright 2023 The Perses Authors\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { getConsistentColor } from './palette';\n\nexport interface SeriesColorProps {\n  categoricalPalette: string[];\n  muiPrimaryColor: string;\n  seriesName: string;\n}\n\n/**\n * Get line color as well as color for tooltip and legend, account for whether palette is 'categorical' or 'auto' aka generative\n */\nexport function getSeriesColor(props: SeriesColorProps): string {\n  const { categoricalPalette, muiPrimaryColor, seriesName } = props;\n\n  // Fallback is unlikely to set unless echarts theme palette in charts theme provider is undefined.\n  const fallbackColor =\n    Array.isArray(categoricalPalette) && categoricalPalette[0]\n      ? (categoricalPalette[0] as string) // Needed since echarts color property isn't always an array.\n      : muiPrimaryColor;\n\n  return getAutoPaletteColor(seriesName, fallbackColor);\n}\n\n/**\n * Get color from generative color palette, this approaches uses series name as the seed and\n * allows for consistent colors across panels (when all panels use this approach).\n */\nexport function getAutoPaletteColor(name: string, fallbackColor: string): string {\n  // corresponds to 'Auto' in palette.kind for generative color palette\n  const generatedColor = getConsistentSeriesNameColor(name);\n  return generatedColor ?? fallbackColor;\n}\n\n/**\n * Default classical qualitative palette that cycles through the colors array by index.\n */\nexport function getCategoricalPaletteColor(palette: string[], seriesIndex: number, fallbackColor: string): string {\n  if (palette === undefined) {\n    return fallbackColor;\n  }\n  // Loop through predefined static color palette\n  const paletteTotalColors = palette.length ?? 1;\n  const paletteIndex = seriesIndex % paletteTotalColors;\n  // fallback color comes from echarts theme\n  const seriesColor = palette[paletteIndex] ?? fallbackColor;\n  return seriesColor;\n}\n\n/*\n * Generate a consistent series name color (if series name includes 'error', it will have a red hue).\n */\nexport function getConsistentSeriesNameColor(inputString: string): string {\n  return getConsistentColor(inputString, inputString.toLowerCase().includes('error'));\n}\n"],"names":["getConsistentColor","getSeriesColor","props","categoricalPalette","muiPrimaryColor","seriesName","fallbackColor","Array","isArray","getAutoPaletteColor","name","generatedColor","getConsistentSeriesNameColor","getCategoricalPaletteColor","palette","seriesIndex","undefined","paletteTotalColors","length","paletteIndex","seriesColor","inputString","toLowerCase","includes"],"mappings":"AAAA,oCAAoC;AACpC,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AAEjC,SAASA,kBAAkB,QAAQ,YAAY;AAQ/C;;CAEC,GACD,OAAO,SAASC,eAAeC,KAAuB;IACpD,MAAM,EAAEC,kBAAkB,EAAEC,eAAe,EAAEC,UAAU,EAAE,GAAGH;IAE5D,kGAAkG;IAClG,MAAMI,gBACJC,MAAMC,OAAO,CAACL,uBAAuBA,kBAAkB,CAAC,EAAE,GACrDA,kBAAkB,CAAC,EAAE,CAAY,6DAA6D;OAC/FC;IAEN,OAAOK,oBAAoBJ,YAAYC;AACzC;AAEA;;;CAGC,GACD,OAAO,SAASG,oBAAoBC,IAAY,EAAEJ,aAAqB;IACrE,qEAAqE;IACrE,MAAMK,iBAAiBC,6BAA6BF;IACpD,OAAOC,kBAAkBL;AAC3B;AAEA;;CAEC,GACD,OAAO,SAASO,2BAA2BC,OAAiB,EAAEC,WAAmB,EAAET,aAAqB;IACtG,IAAIQ,YAAYE,WAAW;QACzB,OAAOV;IACT;IACA,+CAA+C;IAC/C,MAAMW,qBAAqBH,QAAQI,MAAM,IAAI;IAC7C,MAAMC,eAAeJ,cAAcE;IACnC,0CAA0C;IAC1C,MAAMG,cAAcN,OAAO,CAACK,aAAa,IAAIb;IAC7C,OAAOc;AACT;AAEA;;CAEC,GACD,OAAO,SAASR,6BAA6BS,WAAmB;IAC9D,OAAOrB,mBAAmBqB,aAAaA,YAAYC,WAAW,GAAGC,QAAQ,CAAC;AAC5E"}