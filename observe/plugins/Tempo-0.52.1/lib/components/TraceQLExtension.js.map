{"version":3,"sources":["../../../src/components/TraceQLExtension.ts"],"sourcesContent":["// Copyright 2024 The Perses Authors\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { LRLanguage } from '@codemirror/language';\nimport { parser } from '@grafana/lezer-traceql';\nimport { CompletionContext } from '@codemirror/autocomplete';\nimport { Extension } from '@uiw/react-codemirror';\nimport { TimeRangeValue } from '@perses-dev/core';\nimport { TempoClient } from '../model/tempo-client';\nimport { traceQLHighlight } from './highlight';\nimport { complete } from './complete';\n\nfunction traceQLLanguage(): LRLanguage {\n  return LRLanguage.define({\n    parser: parser.configure({\n      props: [traceQLHighlight],\n    }),\n    languageData: {\n      closeBrackets: { brackets: ['(', '[', '{', \"'\", '\"', '`'] },\n      commentTokens: { line: '//' },\n    },\n  });\n}\n\nexport interface CompletionConfig {\n  /** a TempoClient instance, can be created with TempoDatasource.createClient() */\n  client?: TempoClient;\n\n  /** search for tag values in a given time range */\n  timeRange?: TimeRangeValue;\n\n  /** limit number of returned tag values */\n  limit?: number;\n\n  /**\n   * stop search early if number of cache hits exceeds this setting\n   * https://grafana.com/docs/tempo/latest/api_docs/#search-tag-values-v2\n   */\n  maxStaleValues?: number;\n}\n\nexport function TraceQLExtension(completionCfg: CompletionConfig): Array<LRLanguage | Extension> {\n  const language = traceQLLanguage();\n  const completion = language.data.of({\n    autocomplete: (ctx: CompletionContext) =>\n      complete(completionCfg, ctx).catch((e) => console.error('error during TraceQL auto-complete', e)),\n  });\n  return [language, completion];\n}\n"],"names":["LRLanguage","parser","traceQLHighlight","complete","traceQLLanguage","define","configure","props","languageData","closeBrackets","brackets","commentTokens","line","TraceQLExtension","completionCfg","language","completion","data","of","autocomplete","ctx","catch","e","console","error"],"mappings":"AAAA,oCAAoC;AACpC,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AAEjC,SAASA,UAAU,QAAQ,uBAAuB;AAClD,SAASC,MAAM,QAAQ,yBAAyB;AAKhD,SAASC,gBAAgB,QAAQ,cAAc;AAC/C,SAASC,QAAQ,QAAQ,aAAa;AAEtC,SAASC;IACP,OAAOJ,WAAWK,MAAM,CAAC;QACvBJ,QAAQA,OAAOK,SAAS,CAAC;YACvBC,OAAO;gBAACL;aAAiB;QAC3B;QACAM,cAAc;YACZC,eAAe;gBAAEC,UAAU;oBAAC;oBAAK;oBAAK;oBAAK;oBAAK;oBAAK;iBAAI;YAAC;YAC1DC,eAAe;gBAAEC,MAAM;YAAK;QAC9B;IACF;AACF;AAmBA,OAAO,SAASC,iBAAiBC,aAA+B;IAC9D,MAAMC,WAAWX;IACjB,MAAMY,aAAaD,SAASE,IAAI,CAACC,EAAE,CAAC;QAClCC,cAAc,CAACC,MACbjB,SAASW,eAAeM,KAAKC,KAAK,CAAC,CAACC,IAAMC,QAAQC,KAAK,CAAC,sCAAsCF;IAClG;IACA,OAAO;QAACP;QAAUC;KAAW;AAC/B"}