{"version":3,"sources":["../../../src/model/tempo-client.ts"],"sourcesContent":["// Copyright 2025 The Perses Authors\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { fetch, otlptracev1, RequestHeaders } from '@perses-dev/core';\nimport { DatasourceClient } from '@perses-dev/plugin-system';\nimport {\n  QueryRequestParameters,\n  SearchRequestParameters,\n  SearchTagsRequestParameters,\n  SearchTagsResponse,\n  QueryResponse,\n  ServiceStats,\n  SearchResponse,\n  SearchTagValuesRequestParameters,\n  SearchTagValuesResponse,\n} from './api-types';\n\ninterface TempoClientOptions {\n  datasourceUrl: string;\n  headers?: RequestHeaders;\n}\n\nexport interface TempoClient extends DatasourceClient {\n  options: TempoClientOptions;\n  // https://grafana.com/docs/tempo/latest/api_docs/\n  query(params: QueryRequestParameters, headers?: RequestHeaders): Promise<QueryResponse>;\n  search(params: SearchRequestParameters, headers?: RequestHeaders): Promise<SearchResponse>;\n  searchWithFallback(params: SearchRequestParameters, headers?: RequestHeaders): Promise<SearchResponse>;\n  searchTags(params: SearchTagsRequestParameters, headers?: RequestHeaders): Promise<SearchTagsResponse>;\n  searchTagValues(params: SearchTagValuesRequestParameters, headers?: RequestHeaders): Promise<SearchTagValuesResponse>;\n}\n\nexport interface QueryOptions {\n  datasourceUrl: string;\n  headers?: RequestHeaders;\n}\n\nexport const executeRequest = async <T>(...args: Parameters<typeof global.fetch>): Promise<T> => {\n  const response = await fetch(...args);\n  try {\n    return await response.json();\n  } catch (e) {\n    console.error('Invalid response from server', e);\n    throw new Error('Invalid response from server');\n  }\n};\n\nfunction fetchWithGet<TRequest extends RequestParams<TRequest>, TResponse>(\n  apiURI: string,\n  params: TRequest,\n  queryOptions: QueryOptions\n): Promise<TResponse> {\n  const { datasourceUrl, headers = {} } = queryOptions;\n\n  let url = `${datasourceUrl}${apiURI}`;\n  const urlParams = buildSearchParams(params).toString();\n  if (urlParams !== '') {\n    url += '?' + urlParams;\n  }\n  const init = {\n    method: 'GET',\n    headers,\n  };\n\n  return executeRequest<TResponse>(url, init);\n}\n\ntype RequestParams<T> = { [K in keyof T]: string | number };\n\nfunction buildSearchParams<T>(params: RequestParams<T>): URLSearchParams {\n  const urlSearchParams = new URLSearchParams();\n  for (const key in params) {\n    const value = params[key];\n    switch (typeof value) {\n      case 'string':\n        urlSearchParams.append(key, value);\n        break;\n\n      case 'number':\n        urlSearchParams.append(key, value.toString());\n        break;\n    }\n  }\n  return urlSearchParams;\n}\n\n/**\n * Returns a summary report of traces that satisfy the query.\n */\nexport function search(params: SearchRequestParameters, queryOptions: QueryOptions): Promise<SearchResponse> {\n  return fetchWithGet<SearchRequestParameters, SearchResponse>('/api/search', params, queryOptions);\n}\n\n/**\n * Returns an entire trace.\n */\nexport function query(params: QueryRequestParameters, queryOptions: QueryOptions): Promise<QueryResponse> {\n  return fetchWithGet<Record<string, never>, QueryResponse>(\n    `/api/traces/${encodeURIComponent(params.traceId)}`,\n    {},\n    queryOptions\n  );\n}\n\n/**\n * Returns a summary report of traces that satisfy the query.\n *\n * If the serviceStats field is missing in the response, fetches all traces\n * and calculates the serviceStats.\n *\n * Tempo computes the serviceStats field during ingestion since vParquet4,\n * this fallback is required for older block formats.\n */\nexport async function searchWithFallback(\n  params: SearchRequestParameters,\n  queryOptions: QueryOptions\n): Promise<SearchResponse> {\n  // Get a list of traces that satisfy the query.\n  const searchResponse = await search(params, queryOptions);\n  if (!searchResponse.traces || searchResponse.traces.length === 0) {\n    return { traces: [] };\n  }\n\n  // exit early if fallback is not required (serviceStats are contained in the response)\n  if (searchResponse.traces.every((t) => t.serviceStats)) {\n    return searchResponse;\n  }\n\n  // calculate serviceStats (number of spans and errors) per service\n  return {\n    traces: await Promise.all(\n      searchResponse.traces.map(async (trace) => {\n        if (trace.serviceStats) {\n          // fallback not required, serviceStats are contained in the response\n          return trace;\n        }\n\n        const serviceStats: Record<string, ServiceStats> = {};\n        const searchTraceIDResponse = await query({ traceId: trace.traceID }, queryOptions);\n\n        // For every trace, get the full trace, and find the number of spans and errors.\n        for (const batch of searchTraceIDResponse.batches) {\n          let serviceName = 'unknown';\n          for (const attr of batch.resource?.attributes ?? []) {\n            if (attr.key === 'service.name' && 'stringValue' in attr.value) {\n              serviceName = attr.value.stringValue;\n              break;\n            }\n          }\n\n          const stats = serviceStats[serviceName] ?? { spanCount: 0 };\n          for (const scopeSpan of batch.scopeSpans) {\n            stats.spanCount += scopeSpan.spans.length;\n            for (const span of scopeSpan.spans) {\n              if (span.status?.code === otlptracev1.StatusCodeError) {\n                stats.errorCount = (stats.errorCount ?? 0) + 1;\n              }\n            }\n          }\n          serviceStats[serviceName] = stats;\n        }\n\n        return {\n          ...trace,\n          serviceStats,\n        };\n      })\n    ),\n  };\n}\n\n/**\n * Returns a list of all tag names for a given scope.\n */\nexport function searchTags(\n  params: SearchTagsRequestParameters,\n  queryOptions: QueryOptions\n): Promise<SearchTagsResponse> {\n  return fetchWithGet<SearchTagsRequestParameters, SearchTagsResponse>('/api/v2/search/tags', params, queryOptions);\n}\n\n/**\n * Returns a list of all tag values for a given tag.\n */\nexport function searchTagValues(\n  params: SearchTagValuesRequestParameters,\n  queryOptions: QueryOptions\n): Promise<SearchTagValuesResponse> {\n  const { tag, ...rest } = params;\n  return fetchWithGet<Omit<SearchTagValuesRequestParameters, 'tag'>, SearchTagValuesResponse>(\n    `/api/v2/search/tag/${encodeURIComponent(tag)}/values`,\n    rest,\n    queryOptions\n  );\n}\n"],"names":["fetch","otlptracev1","executeRequest","args","response","json","e","console","error","Error","fetchWithGet","apiURI","params","queryOptions","datasourceUrl","headers","url","urlParams","buildSearchParams","toString","init","method","urlSearchParams","URLSearchParams","key","value","append","search","query","encodeURIComponent","traceId","searchWithFallback","searchResponse","traces","length","every","t","serviceStats","Promise","all","map","trace","searchTraceIDResponse","traceID","batch","batches","serviceName","attr","resource","attributes","stringValue","stats","spanCount","scopeSpan","scopeSpans","spans","span","status","code","StatusCodeError","errorCount","searchTags","searchTagValues","tag","rest"],"mappings":"AAAA,oCAAoC;AACpC,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AAEjC,SAASA,KAAK,EAAEC,WAAW,QAAwB,mBAAmB;AAkCtE,OAAO,MAAMC,iBAAiB,OAAU,GAAGC;IACzC,MAAMC,WAAW,MAAMJ,SAASG;IAChC,IAAI;QACF,OAAO,MAAMC,SAASC,IAAI;IAC5B,EAAE,OAAOC,GAAG;QACVC,QAAQC,KAAK,CAAC,gCAAgCF;QAC9C,MAAM,IAAIG,MAAM;IAClB;AACF,EAAE;AAEF,SAASC,aACPC,MAAc,EACdC,MAAgB,EAChBC,YAA0B;IAE1B,MAAM,EAAEC,aAAa,EAAEC,UAAU,CAAC,CAAC,EAAE,GAAGF;IAExC,IAAIG,MAAM,GAAGF,gBAAgBH,QAAQ;IACrC,MAAMM,YAAYC,kBAAkBN,QAAQO,QAAQ;IACpD,IAAIF,cAAc,IAAI;QACpBD,OAAO,MAAMC;IACf;IACA,MAAMG,OAAO;QACXC,QAAQ;QACRN;IACF;IAEA,OAAOb,eAA0Bc,KAAKI;AACxC;AAIA,SAASF,kBAAqBN,MAAwB;IACpD,MAAMU,kBAAkB,IAAIC;IAC5B,IAAK,MAAMC,OAAOZ,OAAQ;QACxB,MAAMa,QAAQb,MAAM,CAACY,IAAI;QACzB,OAAQ,OAAOC;YACb,KAAK;gBACHH,gBAAgBI,MAAM,CAACF,KAAKC;gBAC5B;YAEF,KAAK;gBACHH,gBAAgBI,MAAM,CAACF,KAAKC,MAAMN,QAAQ;gBAC1C;QACJ;IACF;IACA,OAAOG;AACT;AAEA;;CAEC,GACD,OAAO,SAASK,OAAOf,MAA+B,EAAEC,YAA0B;IAChF,OAAOH,aAAsD,eAAeE,QAAQC;AACtF;AAEA;;CAEC,GACD,OAAO,SAASe,MAAMhB,MAA8B,EAAEC,YAA0B;IAC9E,OAAOH,aACL,CAAC,YAAY,EAAEmB,mBAAmBjB,OAAOkB,OAAO,GAAG,EACnD,CAAC,GACDjB;AAEJ;AAEA;;;;;;;;CAQC,GACD,OAAO,eAAekB,mBACpBnB,MAA+B,EAC/BC,YAA0B;IAE1B,+CAA+C;IAC/C,MAAMmB,iBAAiB,MAAML,OAAOf,QAAQC;IAC5C,IAAI,CAACmB,eAAeC,MAAM,IAAID,eAAeC,MAAM,CAACC,MAAM,KAAK,GAAG;QAChE,OAAO;YAAED,QAAQ,EAAE;QAAC;IACtB;IAEA,sFAAsF;IACtF,IAAID,eAAeC,MAAM,CAACE,KAAK,CAAC,CAACC,IAAMA,EAAEC,YAAY,GAAG;QACtD,OAAOL;IACT;IAEA,kEAAkE;IAClE,OAAO;QACLC,QAAQ,MAAMK,QAAQC,GAAG,CACvBP,eAAeC,MAAM,CAACO,GAAG,CAAC,OAAOC;YAC/B,IAAIA,MAAMJ,YAAY,EAAE;gBACtB,oEAAoE;gBACpE,OAAOI;YACT;YAEA,MAAMJ,eAA6C,CAAC;YACpD,MAAMK,wBAAwB,MAAMd,MAAM;gBAAEE,SAASW,MAAME,OAAO;YAAC,GAAG9B;YAEtE,gFAAgF;YAChF,KAAK,MAAM+B,SAASF,sBAAsBG,OAAO,CAAE;gBACjD,IAAIC,cAAc;gBAClB,KAAK,MAAMC,QAAQH,MAAMI,QAAQ,EAAEC,cAAc,EAAE,CAAE;oBACnD,IAAIF,KAAKvB,GAAG,KAAK,kBAAkB,iBAAiBuB,KAAKtB,KAAK,EAAE;wBAC9DqB,cAAcC,KAAKtB,KAAK,CAACyB,WAAW;wBACpC;oBACF;gBACF;gBAEA,MAAMC,QAAQd,YAAY,CAACS,YAAY,IAAI;oBAAEM,WAAW;gBAAE;gBAC1D,KAAK,MAAMC,aAAaT,MAAMU,UAAU,CAAE;oBACxCH,MAAMC,SAAS,IAAIC,UAAUE,KAAK,CAACrB,MAAM;oBACzC,KAAK,MAAMsB,QAAQH,UAAUE,KAAK,CAAE;wBAClC,IAAIC,KAAKC,MAAM,EAAEC,SAASzD,YAAY0D,eAAe,EAAE;4BACrDR,MAAMS,UAAU,GAAG,AAACT,CAAAA,MAAMS,UAAU,IAAI,CAAA,IAAK;wBAC/C;oBACF;gBACF;gBACAvB,YAAY,CAACS,YAAY,GAAGK;YAC9B;YAEA,OAAO;gBACL,GAAGV,KAAK;gBACRJ;YACF;QACF;IAEJ;AACF;AAEA;;CAEC,GACD,OAAO,SAASwB,WACdjD,MAAmC,EACnCC,YAA0B;IAE1B,OAAOH,aAA8D,uBAAuBE,QAAQC;AACtG;AAEA;;CAEC,GACD,OAAO,SAASiD,gBACdlD,MAAwC,EACxCC,YAA0B;IAE1B,MAAM,EAAEkD,GAAG,EAAE,GAAGC,MAAM,GAAGpD;IACzB,OAAOF,aACL,CAAC,mBAAmB,EAAEmB,mBAAmBkC,KAAK,OAAO,CAAC,EACtDC,MACAnD;AAEJ"}