{"version":3,"sources":["../../../../src/plugins/tempo-trace-query/get-trace-data.ts"],"sourcesContent":["// Copyright 2025 The Perses Authors\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { AbsoluteTimeRange, isValidTraceId, otlptracev1, TraceSearchResult } from '@perses-dev/core';\nimport { datasourceSelectValueToSelector, TraceQueryPlugin } from '@perses-dev/plugin-system';\nimport { getUnixTime } from 'date-fns';\nimport { TEMPO_DATASOURCE_KIND, TempoDatasourceSelector, TempoTraceQuerySpec } from '../../model';\nimport { QueryResponse, SearchRequestParameters, SearchResponse } from '../../model/api-types';\nimport { TempoClient } from '../../model/tempo-client';\n\nexport function getUnixTimeRange(timeRange: AbsoluteTimeRange): { start: number; end: number } {\n  const { start, end } = timeRange;\n  return {\n    start: Math.ceil(getUnixTime(start)),\n    end: Math.ceil(getUnixTime(end)),\n  };\n}\n\nexport const getTraceData: TraceQueryPlugin<TempoTraceQuerySpec>['getTraceData'] = async (spec, context) => {\n  if (spec.query === undefined || spec.query === null || spec.query === '') {\n    // Do not make a request to the backend, instead return an empty TraceData\n    console.error('TempoTraceQuery is undefined, null, or an empty string.');\n    return { searchResult: [] };\n  }\n\n  const defaultTempoDatasource: TempoDatasourceSelector = {\n    kind: TEMPO_DATASOURCE_KIND,\n  };\n\n  const listDatasourceSelectItems = await context.datasourceStore.listDatasourceSelectItems(TEMPO_DATASOURCE_KIND);\n  const datasourceSelector =\n    datasourceSelectValueToSelector(spec.datasource, context.variableState, listDatasourceSelectItems) ??\n    defaultTempoDatasource;\n\n  const client = await context.datasourceStore.getDatasourceClient<TempoClient>(datasourceSelector);\n\n  const getQuery = (): SearchRequestParameters => {\n    const params: SearchRequestParameters = {\n      q: spec.query,\n    };\n\n    // handle time range selection from UI drop down (e.g. last 5 minutes, last 1 hour )\n    if (context.absoluteTimeRange) {\n      const { start, end } = getUnixTimeRange(context.absoluteTimeRange);\n      params.start = start;\n      params.end = end;\n    }\n\n    if (spec.limit) {\n      params.limit = spec.limit;\n    }\n\n    return params;\n  };\n\n  /**\n   * determine type of query:\n   * if the query is a valid traceId, fetch the trace by traceId\n   * otherwise, execute a TraceQL query\n   */\n  if (isValidTraceId(spec.query)) {\n    const response = await client.query({ traceId: spec.query });\n    return {\n      trace: parseTraceResponse(response),\n      metadata: {\n        executedQueryString: spec.query,\n      },\n    };\n  } else {\n    const response = await client.searchWithFallback(getQuery());\n    return {\n      searchResult: parseSearchResponse(response),\n      metadata: {\n        executedQueryString: spec.query,\n      },\n    };\n  }\n};\n\nfunction parseTraceResponse(response: QueryResponse): otlptracev1.TracesData {\n  const trace = {\n    resourceSpans: response.batches,\n  };\n\n  // Tempo returns Trace ID and Span ID base64-encoded.\n  // The OTLP spec defines the encoding in the hex format:\n  // Spec: https://opentelemetry.io/docs/specs/otlp/#json-protobuf-encoding\n  // Example: https://github.com/open-telemetry/opentelemetry-proto/blob/v1.7.0/examples/trace.json\n  // Therefore, let's convert it to hex encoding.\n  for (const resourceSpan of trace.resourceSpans) {\n    for (const scopeSpan of resourceSpan.scopeSpans) {\n      for (const span of scopeSpan.spans) {\n        if (span.traceId.length != 32) {\n          span.traceId = base64ToHex(span.traceId);\n        }\n\n        if (span.spanId.length != 16) {\n          span.spanId = base64ToHex(span.spanId);\n        }\n\n        if (span.parentSpanId && span.parentSpanId.length != 16) {\n          span.parentSpanId = base64ToHex(span.parentSpanId);\n        }\n      }\n    }\n  }\n\n  return trace;\n}\n\nfunction base64ToHex(str: string) {\n  try {\n    return atob(str)\n      .split('')\n      .map((char) => char.charCodeAt(0).toString(16).padStart(2, '0').toUpperCase())\n      .join('');\n  } catch {\n    return str;\n  }\n}\n\nfunction parseSearchResponse(response: SearchResponse): TraceSearchResult[] {\n  return response.traces.map((trace) => ({\n    startTimeUnixMs: parseInt(trace.startTimeUnixNano) * 1e-6, // convert to millisecond for eChart time format,\n    durationMs: trace.durationMs ?? 0, // Tempo API doesn't return 0 values\n    traceId: trace.traceID,\n    rootServiceName: trace.rootServiceName,\n    rootTraceName: trace.rootTraceName,\n    serviceStats: trace.serviceStats || {},\n  }));\n}\n"],"names":["isValidTraceId","datasourceSelectValueToSelector","getUnixTime","TEMPO_DATASOURCE_KIND","getUnixTimeRange","timeRange","start","end","Math","ceil","getTraceData","spec","context","query","undefined","console","error","searchResult","defaultTempoDatasource","kind","listDatasourceSelectItems","datasourceStore","datasourceSelector","datasource","variableState","client","getDatasourceClient","getQuery","params","q","absoluteTimeRange","limit","response","traceId","trace","parseTraceResponse","metadata","executedQueryString","searchWithFallback","parseSearchResponse","resourceSpans","batches","resourceSpan","scopeSpan","scopeSpans","span","spans","length","base64ToHex","spanId","parentSpanId","str","atob","split","map","char","charCodeAt","toString","padStart","toUpperCase","join","traces","startTimeUnixMs","parseInt","startTimeUnixNano","durationMs","traceID","rootServiceName","rootTraceName","serviceStats"],"mappings":"AAAA,oCAAoC;AACpC,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AAEjC,SAA4BA,cAAc,QAAwC,mBAAmB;AACrG,SAASC,+BAA+B,QAA0B,4BAA4B;AAC9F,SAASC,WAAW,QAAQ,WAAW;AACvC,SAASC,qBAAqB,QAAsD,cAAc;AAIlG,OAAO,SAASC,iBAAiBC,SAA4B;IAC3D,MAAM,EAAEC,KAAK,EAAEC,GAAG,EAAE,GAAGF;IACvB,OAAO;QACLC,OAAOE,KAAKC,IAAI,CAACP,YAAYI;QAC7BC,KAAKC,KAAKC,IAAI,CAACP,YAAYK;IAC7B;AACF;AAEA,OAAO,MAAMG,eAAsE,OAAOC,MAAMC;IAC9F,IAAID,KAAKE,KAAK,KAAKC,aAAaH,KAAKE,KAAK,KAAK,QAAQF,KAAKE,KAAK,KAAK,IAAI;QACxE,0EAA0E;QAC1EE,QAAQC,KAAK,CAAC;QACd,OAAO;YAAEC,cAAc,EAAE;QAAC;IAC5B;IAEA,MAAMC,yBAAkD;QACtDC,MAAMhB;IACR;IAEA,MAAMiB,4BAA4B,MAAMR,QAAQS,eAAe,CAACD,yBAAyB,CAACjB;IAC1F,MAAMmB,qBACJrB,gCAAgCU,KAAKY,UAAU,EAAEX,QAAQY,aAAa,EAAEJ,8BACxEF;IAEF,MAAMO,SAAS,MAAMb,QAAQS,eAAe,CAACK,mBAAmB,CAAcJ;IAE9E,MAAMK,WAAW;QACf,MAAMC,SAAkC;YACtCC,GAAGlB,KAAKE,KAAK;QACf;QAEA,oFAAoF;QACpF,IAAID,QAAQkB,iBAAiB,EAAE;YAC7B,MAAM,EAAExB,KAAK,EAAEC,GAAG,EAAE,GAAGH,iBAAiBQ,QAAQkB,iBAAiB;YACjEF,OAAOtB,KAAK,GAAGA;YACfsB,OAAOrB,GAAG,GAAGA;QACf;QAEA,IAAII,KAAKoB,KAAK,EAAE;YACdH,OAAOG,KAAK,GAAGpB,KAAKoB,KAAK;QAC3B;QAEA,OAAOH;IACT;IAEA;;;;GAIC,GACD,IAAI5B,eAAeW,KAAKE,KAAK,GAAG;QAC9B,MAAMmB,WAAW,MAAMP,OAAOZ,KAAK,CAAC;YAAEoB,SAAStB,KAAKE,KAAK;QAAC;QAC1D,OAAO;YACLqB,OAAOC,mBAAmBH;YAC1BI,UAAU;gBACRC,qBAAqB1B,KAAKE,KAAK;YACjC;QACF;IACF,OAAO;QACL,MAAMmB,WAAW,MAAMP,OAAOa,kBAAkB,CAACX;QACjD,OAAO;YACLV,cAAcsB,oBAAoBP;YAClCI,UAAU;gBACRC,qBAAqB1B,KAAKE,KAAK;YACjC;QACF;IACF;AACF,EAAE;AAEF,SAASsB,mBAAmBH,QAAuB;IACjD,MAAME,QAAQ;QACZM,eAAeR,SAASS,OAAO;IACjC;IAEA,qDAAqD;IACrD,wDAAwD;IACxD,yEAAyE;IACzE,iGAAiG;IACjG,+CAA+C;IAC/C,KAAK,MAAMC,gBAAgBR,MAAMM,aAAa,CAAE;QAC9C,KAAK,MAAMG,aAAaD,aAAaE,UAAU,CAAE;YAC/C,KAAK,MAAMC,QAAQF,UAAUG,KAAK,CAAE;gBAClC,IAAID,KAAKZ,OAAO,CAACc,MAAM,IAAI,IAAI;oBAC7BF,KAAKZ,OAAO,GAAGe,YAAYH,KAAKZ,OAAO;gBACzC;gBAEA,IAAIY,KAAKI,MAAM,CAACF,MAAM,IAAI,IAAI;oBAC5BF,KAAKI,MAAM,GAAGD,YAAYH,KAAKI,MAAM;gBACvC;gBAEA,IAAIJ,KAAKK,YAAY,IAAIL,KAAKK,YAAY,CAACH,MAAM,IAAI,IAAI;oBACvDF,KAAKK,YAAY,GAAGF,YAAYH,KAAKK,YAAY;gBACnD;YACF;QACF;IACF;IAEA,OAAOhB;AACT;AAEA,SAASc,YAAYG,GAAW;IAC9B,IAAI;QACF,OAAOC,KAAKD,KACTE,KAAK,CAAC,IACNC,GAAG,CAAC,CAACC,OAASA,KAAKC,UAAU,CAAC,GAAGC,QAAQ,CAAC,IAAIC,QAAQ,CAAC,GAAG,KAAKC,WAAW,IAC1EC,IAAI,CAAC;IACV,EAAE,OAAM;QACN,OAAOT;IACT;AACF;AAEA,SAASZ,oBAAoBP,QAAwB;IACnD,OAAOA,SAAS6B,MAAM,CAACP,GAAG,CAAC,CAACpB,QAAW,CAAA;YACrC4B,iBAAiBC,SAAS7B,MAAM8B,iBAAiB,IAAI;YACrDC,YAAY/B,MAAM+B,UAAU,IAAI;YAChChC,SAASC,MAAMgC,OAAO;YACtBC,iBAAiBjC,MAAMiC,eAAe;YACtCC,eAAelC,MAAMkC,aAAa;YAClCC,cAAcnC,MAAMmC,YAAY,IAAI,CAAC;QACvC,CAAA;AACF"}