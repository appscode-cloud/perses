{"version":3,"sources":["../../src/TimeSeriesChartPanel.tsx"],"sourcesContent":["// Copyright 2023 The Perses Authors\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { ReactElement, useMemo, useRef, useState } from 'react';\nimport { Box, useTheme } from '@mui/material';\nimport type { GridComponentOption } from 'echarts';\nimport merge from 'lodash/merge';\nimport {\n  getTimeSeriesValues,\n  DEFAULT_LEGEND,\n  getCalculations,\n  formatValue,\n  StepOptions,\n  TimeSeries,\n  TimeSeriesValueTuple,\n  TimeSeriesData,\n} from '@perses-dev/core';\nimport {\n  LEGEND_VALUE_CONFIG,\n  PanelProps,\n  useTimeRange,\n  validateLegendSpec,\n  legendValues,\n} from '@perses-dev/plugin-system';\nimport {\n  ChartInstance,\n  YAxisLabel,\n  ZoomEventData,\n  useChartsTheme,\n  SelectedLegendItemState,\n  ContentWithLegend,\n  TableColumnConfig,\n  LegendItem,\n  LegendProps,\n  useId,\n  TooltipConfig,\n  DEFAULT_TOOLTIP_CONFIG,\n  TimeChartSeriesMapping,\n} from '@perses-dev/components';\nimport {\n  TimeSeriesChartOptions,\n  DEFAULT_FORMAT,\n  DEFAULT_VISUAL,\n  THRESHOLD_PLOT_INTERVAL,\n  QuerySettingsOptions,\n} from './time-series-chart-model';\nimport {\n  getTimeSeries,\n  getCommonTimeScaleForQueries,\n  convertPanelYAxis,\n  getThresholdSeries,\n  convertPercentThreshold,\n} from './utils/data-transform';\nimport { getSeriesColor } from './utils/palette-gen';\nimport { TimeSeriesChartBase } from './TimeSeriesChartBase';\n\nexport type TimeSeriesChartProps = PanelProps<TimeSeriesChartOptions, TimeSeriesData>;\n\n// Using an \"ALL\" value to handle the case on first loading the chart where we\n// want to select all, but do not want all of the legend items to be visually highlighted.\n// This helps us differentiate those cases more clearly instead of inferring it\n// based on the state of the data. This also helps us avoid some coding\n// complexity around initializing a full record for the initial load that would\n// currently require significantly more refactoring of this component.\n// TODO: simplify this if we switch the list-based legend UI to use checkboxes,\n// where we *would* want to visually select all items in this case.\n\nexport function TimeSeriesChartPanel(props: TimeSeriesChartProps): ReactElement | null {\n  const {\n    spec: { thresholds, yAxis, tooltip, querySettings: querySettingsList },\n    contentDimensions,\n    queryResults,\n  } = props;\n  const chartsTheme = useChartsTheme();\n  const muiTheme = useTheme();\n  const chartId = useId('time-series-panel');\n\n  const chartRef = useRef<ChartInstance>(null);\n\n  // ECharts theme comes from ChartsProvider, more info: https://echarts.apache.org/en/option.html#color\n  // Colors are manually applied since our legend and tooltip are built custom with React.\n  const categoricalPalette = chartsTheme.echartsTheme.color;\n\n  // TODO: consider refactoring how the layout/spacing/alignment are calculated\n  // the next time significant changes are made to the time series panel (e.g.\n  // when making improvements to the legend to more closely match designs).\n  // This may also want to include moving some of this logic down to the shared,\n  // embeddable components.\n  const contentPadding = chartsTheme.container.padding.default;\n  const adjustedContentDimensions: typeof contentDimensions = contentDimensions\n    ? {\n        width: contentDimensions.width - contentPadding * 2,\n        height: contentDimensions.height - contentPadding * 2,\n      }\n    : undefined;\n\n  // populate default 'position' and other future properties\n  const legend = useMemo(() => {\n    return props.spec.legend && validateLegendSpec(props.spec.legend)\n      ? merge({}, DEFAULT_LEGEND, props.spec.legend)\n      : undefined;\n  }, [props.spec.legend]);\n\n  // TODO: add support for y_axis_alt.format\n  const format = props.spec.yAxis?.format ?? DEFAULT_FORMAT;\n\n  // ensures there are fallbacks for unset properties since most\n  // users should not need to customize visual display\n  const visual = useMemo(() => {\n    return merge({}, DEFAULT_VISUAL, props.spec.visual);\n  }, [props.spec.visual]);\n\n  // convert Perses dashboard format to be ECharts compatible\n  const echartsYAxis = useMemo(() => {\n    return convertPanelYAxis(yAxis);\n  }, [yAxis]);\n\n  const [selectedLegendItems, setSelectedLegendItems] = useState<SelectedLegendItemState>('ALL');\n  const [legendSorting, setLegendSorting] = useState<NonNullable<LegendProps['tableProps']>['sorting']>();\n\n  const { setTimeRange } = useTimeRange();\n\n  // Populate series data based on query results\n  const { timeScale, timeChartData, timeSeriesMapping, legendItems } = useMemo(() => {\n    const timeScale = getCommonTimeScaleForQueries(queryResults);\n    if (timeScale === undefined) {\n      return {\n        timeChartData: [],\n        timeSeriesMapping: [],\n      };\n    }\n\n    const legendItems: LegendItem[] = [];\n\n    // Utilizes ECharts dataset so raw data is separate from series option style properties\n    // https://apache.github.io/echarts-handbook/en/concepts/dataset/\n    const timeChartData: TimeSeries[] = [];\n    const timeSeriesMapping: TimeChartSeriesMapping = [];\n\n    // Index is counted across multiple queries which ensures the categorical color palette does not reset for every query\n    let seriesIndex = 0;\n\n    // Mapping of each set of query results to be ECharts option compatible\n    // TODO: Look into performance optimizations and moving parts of mapping to the lower level chart\n    for (let queryIndex = 0; queryIndex < queryResults.length; queryIndex++) {\n      const result = queryResults[queryIndex];\n\n      // Retrieve querySettings for this query, if exists.\n      // queries & querySettings indices do not necessarily match, so we have to check the tail value of the $ref attribute\n      let querySettings: QuerySettingsOptions | undefined;\n      for (const item of querySettingsList ?? []) {\n        if (item.queryIndex === queryIndex) {\n          querySettings = item;\n          // We don't break the loop here just in case there are multiple querySettings defined for the\n          // same queryIndex, because in that case we want the last one to take precedence.\n        }\n      }\n\n      if (result) {\n        for (let i = 0; i < result.data.series.length; i++) {\n          const timeSeries: TimeSeries | undefined = result.data.series[i];\n          if (timeSeries === undefined) {\n            return { timeChartData: [], timeSeriesMapping: [], legendItems: [] };\n          }\n\n          // Format is determined by seriesNameFormat in query spec\n          const formattedSeriesName = timeSeries.formattedName ?? timeSeries.name;\n\n          // Color is used for line, tooltip, and legend\n          const seriesColor = getSeriesColor({\n            // ECharts type for color is not always an array but it is always an array in ChartsProvider\n            categoricalPalette: categoricalPalette as string[],\n            visual,\n            muiPrimaryColor: muiTheme.palette.primary.main,\n            seriesName: formattedSeriesName,\n            seriesIndex,\n            querySettings: querySettings,\n            queryHasMultipleResults: (queryResults[queryIndex]?.data?.series?.length ?? 0) > 1,\n          });\n\n          // We add a unique id for the chart to disambiguate items across charts\n          // when there are multiple on the page.\n          const seriesId = chartId + timeSeries.name + seriesIndex;\n\n          const legendCalculations = legend?.values ? getCalculations(timeSeries.values, legend.values) : undefined;\n\n          // When we initially load the chart, we want to show all series, but\n          // DO NOT want to visualy highlight all the items in the legend.\n          const isSelectAll = selectedLegendItems === 'ALL';\n          const isSelected = !isSelectAll && !!selectedLegendItems[seriesId];\n          const showTimeSeries = isSelected || isSelectAll;\n\n          if (showTimeSeries) {\n            // Use timeChartData.length to ensure the data that is passed into the tooltip accounts for\n            // which legend items are selected. This must happen before timeChartData.push to avoid an\n            // off-by-one error, seriesIndex cannot be used since it's needed to cycle through palette\n            const datasetIndex = timeChartData.length;\n\n            // Each series is stored as a separate dataset source.\n            // https://apache.github.io/echarts-handbook/en/concepts/dataset/#how-to-reference-several-datasets\n            timeSeriesMapping.push(\n              getTimeSeries(seriesId, datasetIndex, formattedSeriesName, visual, timeScale, seriesColor)\n            );\n\n            timeChartData.push({\n              name: formattedSeriesName,\n              values: getTimeSeriesValues(timeSeries, timeScale),\n            });\n          }\n\n          if (legend && legendItems) {\n            legendItems.push({\n              id: seriesId, // Avoids duplicate key console errors when there are duplicate series names\n              label: formattedSeriesName,\n              color: seriesColor,\n              data: legendCalculations,\n            });\n          }\n\n          // Used for repeating colors in Categorical palette\n          seriesIndex++;\n        }\n      }\n    }\n\n    if (thresholds && thresholds.steps) {\n      // Convert how thresholds are defined in the panel spec to valid ECharts 'line' series.\n      // These are styled with predefined colors and a dashed style to look different than series from query results.\n      // Regular series are used instead of markLines since thresholds currently show in our React TimeSeriesTooltip.\n      const thresholdsColors = chartsTheme.thresholds;\n      const defaultThresholdColor = thresholds.defaultColor ?? thresholdsColors.defaultColor;\n      thresholds.steps.forEach((step: StepOptions, index: number) => {\n        const stepPaletteColor = thresholdsColors.palette[index] ?? defaultThresholdColor;\n        const thresholdLineColor = step.color ?? stepPaletteColor;\n        const stepOption: StepOptions = {\n          color: thresholdLineColor,\n          value:\n            // yAxis is passed here since it corresponds to dashboard JSON instead of the already converted ECharts yAxis\n            thresholds.mode === 'percent'\n              ? convertPercentThreshold(step.value, timeChartData, yAxis?.max, yAxis?.min)\n              : step.value,\n        };\n        const thresholdName = step.name ?? `Threshold ${index + 1}`;\n\n        // Generates array of [time, step.value] where time ranges from timescale.startMs to timescale.endMs with an interval of 15s\n        const thresholdTimeValueTuple: TimeSeriesValueTuple[] = [];\n        let currentTimestamp = timeScale.startMs;\n        while (currentTimestamp <= timeScale.endMs) {\n          thresholdTimeValueTuple.push([currentTimestamp, stepOption.value]);\n          // Used to plot fake thresholds datapoints so correct nearby threshold series shows in tooltip without flicker\n          currentTimestamp += 1000 * THRESHOLD_PLOT_INTERVAL;\n        }\n\n        timeChartData.push({\n          name: thresholdName,\n          values: thresholdTimeValueTuple,\n        });\n        timeSeriesMapping.push(getThresholdSeries(thresholdName, stepOption, seriesIndex));\n        seriesIndex++;\n      });\n    }\n\n    return {\n      timeScale,\n      timeChartData,\n      timeSeriesMapping,\n      legendItems,\n    };\n  }, [\n    queryResults,\n    thresholds,\n    selectedLegendItems,\n    legend,\n    visual,\n    querySettingsList,\n    yAxis?.max,\n    yAxis?.min,\n    categoricalPalette,\n    chartId,\n    chartsTheme.thresholds,\n    muiTheme.palette.primary.main,\n  ]);\n\n  // Translate the legend values into columns for the table legend.\n  const legendColumns = useMemo(() => {\n    if (!legend?.values) {\n      return [];\n    }\n\n    // Iterating the predefined list of possible values to retain a specific\n    // intended order of values.\n    return legendValues.reduce(\n      (columns, legendValue) => {\n        const legendConfig = LEGEND_VALUE_CONFIG[legendValue];\n\n        if (legendConfig && legend?.values?.includes(legendValue)) {\n          columns.push({\n            accessorKey: `data.${legendValue}`,\n            header: legendConfig.label,\n            headerDescription: legendConfig.description,\n            // Intentionally hardcoding a column width to start based on discussions\n            // with design around keeping this simple to start. This may need\n            // revisiting in the future to handle edge cases with very large values.\n            width: 72,\n            align: 'right',\n            cell: ({ getValue }) => {\n              const cellValue = getValue();\n              return typeof cellValue === 'number' && format ? formatValue(cellValue, format) : cellValue;\n            },\n            cellDescription: true,\n            enableSorting: true,\n          });\n        }\n\n        return columns;\n      },\n      [] as Array<TableColumnConfig<LegendItem>>\n    );\n  }, [legend?.values, format]);\n\n  if (adjustedContentDimensions === undefined) {\n    return null;\n  }\n\n  // override default spacing, see: https://echarts.apache.org/en/option.html#grid\n  const gridLeft = yAxis && yAxis.label ? 30 : 20;\n  const gridOverrides: GridComponentOption = {\n    left: !echartsYAxis.show ? 0 : gridLeft,\n    right: 20,\n    bottom: 0,\n  };\n\n  const handleDataZoom = (event: ZoomEventData): void => {\n    // TODO: add ECharts transition animation on zoom\n    setTimeRange({ start: new Date(event.start), end: new Date(event.end) });\n  };\n\n  // Used to opt in to ECharts trigger item which show subgroup data accurately\n  const isStackedBar = visual.display === 'bar' && visual.stack === 'all';\n\n  // Turn on tooltip pinning by default but opt out for stacked bar or if explicitly set in tooltip panel spec\n  let enablePinning = true;\n  if (isStackedBar) {\n    enablePinning = false;\n  } else if (tooltip?.enablePinning !== undefined) {\n    enablePinning = tooltip.enablePinning;\n  }\n  const tooltipConfig: TooltipConfig = {\n    ...DEFAULT_TOOLTIP_CONFIG,\n    enablePinning,\n  };\n\n  return (\n    <Box sx={{ padding: `${contentPadding}px` }}>\n      <ContentWithLegend\n        width={adjustedContentDimensions.width}\n        height={adjustedContentDimensions.height}\n        // Making this small enough that the medium size doesn't get\n        // responsive-handling-ed away when in the panel options editor.\n        minChildrenHeight={50}\n        legendSize={legend?.size}\n        legendProps={\n          legend && {\n            options: legend,\n            data: legendItems || [],\n            selectedItems: selectedLegendItems,\n            onSelectedItemsChange: setSelectedLegendItems,\n            tableProps: {\n              columns: legendColumns,\n              sorting: legendSorting,\n              onSortingChange: setLegendSorting,\n            },\n            onItemMouseOver: (e, { id }): void => {\n              chartRef.current?.highlightSeries({ name: id });\n            },\n            onItemMouseOut: (): void => {\n              chartRef.current?.clearHighlightedSeries();\n            },\n          }\n        }\n      >\n        {({ height, width }) => {\n          return (\n            <Box style={{ height, width }}>\n              {yAxis && yAxis.show && yAxis.label && <YAxisLabel name={yAxis.label} height={height} />}\n              <TimeSeriesChartBase\n                ref={chartRef}\n                height={height}\n                data={timeChartData}\n                seriesMapping={timeSeriesMapping}\n                timeScale={timeScale}\n                yAxis={echartsYAxis}\n                format={format}\n                grid={gridOverrides}\n                isStackedBar={isStackedBar}\n                tooltipConfig={tooltipConfig}\n                syncGroup=\"default-panel-group\" // TODO: make configurable from dashboard settings and per panel-group overrides\n                onDataZoom={handleDataZoom}\n                //  Show an empty chart when there is no data because the user unselected all items in\n                // the legend. Otherwise, show a \"no data\" message.\n                noDataVariant={!timeChartData.length && legendItems && legendItems.length > 0 ? 'chart' : 'message'}\n              />\n            </Box>\n          );\n        }}\n      </ContentWithLegend>\n    </Box>\n  );\n}\n"],"names":["useMemo","useRef","useState","Box","useTheme","merge","getTimeSeriesValues","DEFAULT_LEGEND","getCalculations","formatValue","LEGEND_VALUE_CONFIG","useTimeRange","validateLegendSpec","legendValues","YAxisLabel","useChartsTheme","ContentWithLegend","useId","DEFAULT_TOOLTIP_CONFIG","DEFAULT_FORMAT","DEFAULT_VISUAL","THRESHOLD_PLOT_INTERVAL","getTimeSeries","getCommonTimeScaleForQueries","convertPanelYAxis","getThresholdSeries","convertPercentThreshold","getSeriesColor","TimeSeriesChartBase","TimeSeriesChartPanel","props","spec","thresholds","yAxis","tooltip","querySettings","querySettingsList","contentDimensions","queryResults","chartsTheme","muiTheme","chartId","chartRef","categoricalPalette","echartsTheme","color","contentPadding","container","padding","default","adjustedContentDimensions","width","height","undefined","legend","format","visual","echartsYAxis","selectedLegendItems","setSelectedLegendItems","legendSorting","setLegendSorting","setTimeRange","timeScale","timeChartData","timeSeriesMapping","legendItems","seriesIndex","queryIndex","length","result","item","i","data","series","timeSeries","formattedSeriesName","formattedName","name","seriesColor","muiPrimaryColor","palette","primary","main","seriesName","queryHasMultipleResults","seriesId","legendCalculations","values","isSelectAll","isSelected","showTimeSeries","datasetIndex","push","id","label","steps","thresholdsColors","defaultThresholdColor","defaultColor","forEach","step","index","stepPaletteColor","thresholdLineColor","stepOption","value","mode","max","min","thresholdName","thresholdTimeValueTuple","currentTimestamp","startMs","endMs","legendColumns","reduce","columns","legendValue","legendConfig","includes","accessorKey","header","headerDescription","description","align","cell","getValue","cellValue","cellDescription","enableSorting","gridLeft","gridOverrides","left","show","right","bottom","handleDataZoom","event","start","Date","end","isStackedBar","display","stack","enablePinning","tooltipConfig","sx","minChildrenHeight","legendSize","size","legendProps","options","selectedItems","onSelectedItemsChange","tableProps","sorting","onSortingChange","onItemMouseOver","e","current","highlightSeries","onItemMouseOut","clearHighlightedSeries","style","ref","seriesMapping","grid","syncGroup","onDataZoom","noDataVariant"],"mappings":"AAAA,oCAAoC;AACpC,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAEjC,SAAuBA,OAAO,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,QAAQ;AAChE,SAASC,GAAG,EAAEC,QAAQ,QAAQ,gBAAgB;AAE9C,OAAOC,WAAW,eAAe;AACjC,SACEC,mBAAmB,EACnBC,cAAc,EACdC,eAAe,EACfC,WAAW,QAKN,mBAAmB;AAC1B,SACEC,mBAAmB,EAEnBC,YAAY,EACZC,kBAAkB,EAClBC,YAAY,QACP,4BAA4B;AACnC,SAEEC,UAAU,EAEVC,cAAc,EAEdC,iBAAiB,EAIjBC,KAAK,EAELC,sBAAsB,QAEjB,yBAAyB;AAChC,SAEEC,cAAc,EACdC,cAAc,EACdC,uBAAuB,QAElB,4BAA4B;AACnC,SACEC,aAAa,EACbC,4BAA4B,EAC5BC,iBAAiB,EACjBC,kBAAkB,EAClBC,uBAAuB,QAClB,yBAAyB;AAChC,SAASC,cAAc,QAAQ,sBAAsB;AACrD,SAASC,mBAAmB,QAAQ,wBAAwB;AAI5D,8EAA8E;AAC9E,0FAA0F;AAC1F,+EAA+E;AAC/E,uEAAuE;AACvE,+EAA+E;AAC/E,sEAAsE;AACtE,+EAA+E;AAC/E,mEAAmE;AAEnE,OAAO,SAASC,qBAAqBC,KAA2B;IAC9D,MAAM,EACJC,MAAM,EAAEC,UAAU,EAAEC,KAAK,EAAEC,OAAO,EAAEC,eAAeC,iBAAiB,EAAE,EACtEC,iBAAiB,EACjBC,YAAY,EACb,GAAGR;IACJ,MAAMS,cAAcxB;IACpB,MAAMyB,WAAWpC;IACjB,MAAMqC,UAAUxB,MAAM;IAEtB,MAAMyB,WAAWzC,OAAsB;IAEvC,sGAAsG;IACtG,wFAAwF;IACxF,MAAM0C,qBAAqBJ,YAAYK,YAAY,CAACC,KAAK;IAEzD,6EAA6E;IAC7E,4EAA4E;IAC5E,yEAAyE;IACzE,8EAA8E;IAC9E,yBAAyB;IACzB,MAAMC,iBAAiBP,YAAYQ,SAAS,CAACC,OAAO,CAACC,OAAO;IAC5D,MAAMC,4BAAsDb,oBACxD;QACEc,OAAOd,kBAAkBc,KAAK,GAAGL,iBAAiB;QAClDM,QAAQf,kBAAkBe,MAAM,GAAGN,iBAAiB;IACtD,IACAO;IAEJ,0DAA0D;IAC1D,MAAMC,SAAStD,QAAQ;QACrB,OAAO8B,MAAMC,IAAI,CAACuB,MAAM,IAAI1C,mBAAmBkB,MAAMC,IAAI,CAACuB,MAAM,IAC5DjD,MAAM,CAAC,GAAGE,gBAAgBuB,MAAMC,IAAI,CAACuB,MAAM,IAC3CD;IACN,GAAG;QAACvB,MAAMC,IAAI,CAACuB,MAAM;KAAC;IAEtB,0CAA0C;IAC1C,MAAMC,SAASzB,MAAMC,IAAI,CAACE,KAAK,EAAEsB,UAAUpC;IAE3C,8DAA8D;IAC9D,oDAAoD;IACpD,MAAMqC,SAASxD,QAAQ;QACrB,OAAOK,MAAM,CAAC,GAAGe,gBAAgBU,MAAMC,IAAI,CAACyB,MAAM;IACpD,GAAG;QAAC1B,MAAMC,IAAI,CAACyB,MAAM;KAAC;IAEtB,2DAA2D;IAC3D,MAAMC,eAAezD,QAAQ;QAC3B,OAAOwB,kBAAkBS;IAC3B,GAAG;QAACA;KAAM;IAEV,MAAM,CAACyB,qBAAqBC,uBAAuB,GAAGzD,SAAkC;IACxF,MAAM,CAAC0D,eAAeC,iBAAiB,GAAG3D;IAE1C,MAAM,EAAE4D,YAAY,EAAE,GAAGnD;IAEzB,8CAA8C;IAC9C,MAAM,EAAEoD,SAAS,EAAEC,aAAa,EAAEC,iBAAiB,EAAEC,WAAW,EAAE,GAAGlE,QAAQ;QAC3E,MAAM+D,YAAYxC,6BAA6Be;QAC/C,IAAIyB,cAAcV,WAAW;YAC3B,OAAO;gBACLW,eAAe,EAAE;gBACjBC,mBAAmB,EAAE;YACvB;QACF;QAEA,MAAMC,cAA4B,EAAE;QAEpC,uFAAuF;QACvF,iEAAiE;QACjE,MAAMF,gBAA8B,EAAE;QACtC,MAAMC,oBAA4C,EAAE;QAEpD,sHAAsH;QACtH,IAAIE,cAAc;QAElB,uEAAuE;QACvE,iGAAiG;QACjG,IAAK,IAAIC,aAAa,GAAGA,aAAa9B,aAAa+B,MAAM,EAAED,aAAc;YACvE,MAAME,SAAShC,YAAY,CAAC8B,WAAW;YAEvC,oDAAoD;YACpD,qHAAqH;YACrH,IAAIjC;YACJ,KAAK,MAAMoC,QAAQnC,qBAAqB,EAAE,CAAE;gBAC1C,IAAImC,KAAKH,UAAU,KAAKA,YAAY;oBAClCjC,gBAAgBoC;gBAChB,6FAA6F;gBAC7F,iFAAiF;gBACnF;YACF;YAEA,IAAID,QAAQ;gBACV,IAAK,IAAIE,IAAI,GAAGA,IAAIF,OAAOG,IAAI,CAACC,MAAM,CAACL,MAAM,EAAEG,IAAK;oBAClD,MAAMG,aAAqCL,OAAOG,IAAI,CAACC,MAAM,CAACF,EAAE;oBAChE,IAAIG,eAAetB,WAAW;wBAC5B,OAAO;4BAAEW,eAAe,EAAE;4BAAEC,mBAAmB,EAAE;4BAAEC,aAAa,EAAE;wBAAC;oBACrE;oBAEA,yDAAyD;oBACzD,MAAMU,sBAAsBD,WAAWE,aAAa,IAAIF,WAAWG,IAAI;oBAEvE,8CAA8C;oBAC9C,MAAMC,cAAcpD,eAAe;wBACjC,4FAA4F;wBAC5FgB,oBAAoBA;wBACpBa;wBACAwB,iBAAiBxC,SAASyC,OAAO,CAACC,OAAO,CAACC,IAAI;wBAC9CC,YAAYR;wBACZT;wBACAhC,eAAeA;wBACfkD,yBAAyB,AAAC/C,CAAAA,YAAY,CAAC8B,WAAW,EAAEK,MAAMC,QAAQL,UAAU,CAAA,IAAK;oBACnF;oBAEA,uEAAuE;oBACvE,uCAAuC;oBACvC,MAAMiB,WAAW7C,UAAUkC,WAAWG,IAAI,GAAGX;oBAE7C,MAAMoB,qBAAqBjC,QAAQkC,SAAShF,gBAAgBmE,WAAWa,MAAM,EAAElC,OAAOkC,MAAM,IAAInC;oBAEhG,oEAAoE;oBACpE,gEAAgE;oBAChE,MAAMoC,cAAc/B,wBAAwB;oBAC5C,MAAMgC,aAAa,CAACD,eAAe,CAAC,CAAC/B,mBAAmB,CAAC4B,SAAS;oBAClE,MAAMK,iBAAiBD,cAAcD;oBAErC,IAAIE,gBAAgB;wBAClB,2FAA2F;wBAC3F,0FAA0F;wBAC1F,0FAA0F;wBAC1F,MAAMC,eAAe5B,cAAcK,MAAM;wBAEzC,sDAAsD;wBACtD,mGAAmG;wBACnGJ,kBAAkB4B,IAAI,CACpBvE,cAAcgE,UAAUM,cAAchB,qBAAqBpB,QAAQO,WAAWgB;wBAGhFf,cAAc6B,IAAI,CAAC;4BACjBf,MAAMF;4BACNY,QAAQlF,oBAAoBqE,YAAYZ;wBAC1C;oBACF;oBAEA,IAAIT,UAAUY,aAAa;wBACzBA,YAAY2B,IAAI,CAAC;4BACfC,IAAIR;4BACJS,OAAOnB;4BACP/B,OAAOkC;4BACPN,MAAMc;wBACR;oBACF;oBAEA,mDAAmD;oBACnDpB;gBACF;YACF;QACF;QAEA,IAAInC,cAAcA,WAAWgE,KAAK,EAAE;YAClC,uFAAuF;YACvF,+GAA+G;YAC/G,+GAA+G;YAC/G,MAAMC,mBAAmB1D,YAAYP,UAAU;YAC/C,MAAMkE,wBAAwBlE,WAAWmE,YAAY,IAAIF,iBAAiBE,YAAY;YACtFnE,WAAWgE,KAAK,CAACI,OAAO,CAAC,CAACC,MAAmBC;gBAC3C,MAAMC,mBAAmBN,iBAAiBhB,OAAO,CAACqB,MAAM,IAAIJ;gBAC5D,MAAMM,qBAAqBH,KAAKxD,KAAK,IAAI0D;gBACzC,MAAME,aAA0B;oBAC9B5D,OAAO2D;oBACPE,OACE,6GAA6G;oBAC7G1E,WAAW2E,IAAI,KAAK,YAChBjF,wBAAwB2E,KAAKK,KAAK,EAAE1C,eAAe/B,OAAO2E,KAAK3E,OAAO4E,OACtER,KAAKK,KAAK;gBAClB;gBACA,MAAMI,gBAAgBT,KAAKvB,IAAI,IAAI,CAAC,UAAU,EAAEwB,QAAQ,GAAG;gBAE3D,4HAA4H;gBAC5H,MAAMS,0BAAkD,EAAE;gBAC1D,IAAIC,mBAAmBjD,UAAUkD,OAAO;gBACxC,MAAOD,oBAAoBjD,UAAUmD,KAAK,CAAE;oBAC1CH,wBAAwBlB,IAAI,CAAC;wBAACmB;wBAAkBP,WAAWC,KAAK;qBAAC;oBACjE,8GAA8G;oBAC9GM,oBAAoB,OAAO3F;gBAC7B;gBAEA2C,cAAc6B,IAAI,CAAC;oBACjBf,MAAMgC;oBACNtB,QAAQuB;gBACV;gBACA9C,kBAAkB4B,IAAI,CAACpE,mBAAmBqF,eAAeL,YAAYtC;gBACrEA;YACF;QACF;QAEA,OAAO;YACLJ;YACAC;YACAC;YACAC;QACF;IACF,GAAG;QACD5B;QACAN;QACA0B;QACAJ;QACAE;QACApB;QACAH,OAAO2E;QACP3E,OAAO4E;QACPlE;QACAF;QACAF,YAAYP,UAAU;QACtBQ,SAASyC,OAAO,CAACC,OAAO,CAACC,IAAI;KAC9B;IAED,iEAAiE;IACjE,MAAMgC,gBAAgBnH,QAAQ;QAC5B,IAAI,CAACsD,QAAQkC,QAAQ;YACnB,OAAO,EAAE;QACX;QAEA,wEAAwE;QACxE,4BAA4B;QAC5B,OAAO3E,aAAauG,MAAM,CACxB,CAACC,SAASC;YACR,MAAMC,eAAe7G,mBAAmB,CAAC4G,YAAY;YAErD,IAAIC,gBAAgBjE,QAAQkC,QAAQgC,SAASF,cAAc;gBACzDD,QAAQxB,IAAI,CAAC;oBACX4B,aAAa,CAAC,KAAK,EAAEH,aAAa;oBAClCI,QAAQH,aAAaxB,KAAK;oBAC1B4B,mBAAmBJ,aAAaK,WAAW;oBAC3C,wEAAwE;oBACxE,iEAAiE;oBACjE,wEAAwE;oBACxEzE,OAAO;oBACP0E,OAAO;oBACPC,MAAM,CAAC,EAAEC,QAAQ,EAAE;wBACjB,MAAMC,YAAYD;wBAClB,OAAO,OAAOC,cAAc,YAAYzE,SAAS9C,YAAYuH,WAAWzE,UAAUyE;oBACpF;oBACAC,iBAAiB;oBACjBC,eAAe;gBACjB;YACF;YAEA,OAAOb;QACT,GACA,EAAE;IAEN,GAAG;QAAC/D,QAAQkC;QAAQjC;KAAO;IAE3B,IAAIL,8BAA8BG,WAAW;QAC3C,OAAO;IACT;IAEA,gFAAgF;IAChF,MAAM8E,WAAWlG,SAASA,MAAM8D,KAAK,GAAG,KAAK;IAC7C,MAAMqC,gBAAqC;QACzCC,MAAM,CAAC5E,aAAa6E,IAAI,GAAG,IAAIH;QAC/BI,OAAO;QACPC,QAAQ;IACV;IAEA,MAAMC,iBAAiB,CAACC;QACtB,iDAAiD;QACjD5E,aAAa;YAAE6E,OAAO,IAAIC,KAAKF,MAAMC,KAAK;YAAGE,KAAK,IAAID,KAAKF,MAAMG,GAAG;QAAE;IACxE;IAEA,6EAA6E;IAC7E,MAAMC,eAAetF,OAAOuF,OAAO,KAAK,SAASvF,OAAOwF,KAAK,KAAK;IAElE,4GAA4G;IAC5G,IAAIC,gBAAgB;IACpB,IAAIH,cAAc;QAChBG,gBAAgB;IAClB,OAAO,IAAI/G,SAAS+G,kBAAkB5F,WAAW;QAC/C4F,gBAAgB/G,QAAQ+G,aAAa;IACvC;IACA,MAAMC,gBAA+B;QACnC,GAAGhI,sBAAsB;QACzB+H;IACF;IAEA,qBACE,KAAC9I;QAAIgJ,IAAI;YAAEnG,SAAS,GAAGF,eAAe,EAAE,CAAC;QAAC;kBACxC,cAAA,KAAC9B;YACCmC,OAAOD,0BAA0BC,KAAK;YACtCC,QAAQF,0BAA0BE,MAAM;YACxC,4DAA4D;YAC5D,gEAAgE;YAChEgG,mBAAmB;YACnBC,YAAY/F,QAAQgG;YACpBC,aACEjG,UAAU;gBACRkG,SAASlG;gBACTmB,MAAMP,eAAe,EAAE;gBACvBuF,eAAe/F;gBACfgG,uBAAuB/F;gBACvBgG,YAAY;oBACVtC,SAASF;oBACTyC,SAAShG;oBACTiG,iBAAiBhG;gBACnB;gBACAiG,iBAAiB,CAACC,GAAG,EAAEjE,EAAE,EAAE;oBACzBpD,SAASsH,OAAO,EAAEC,gBAAgB;wBAAEnF,MAAMgB;oBAAG;gBAC/C;gBACAoE,gBAAgB;oBACdxH,SAASsH,OAAO,EAAEG;gBACpB;YACF;sBAGD,CAAC,EAAE/G,MAAM,EAAED,KAAK,EAAE;gBACjB,qBACE,MAAChD;oBAAIiK,OAAO;wBAAEhH;wBAAQD;oBAAM;;wBACzBlB,SAASA,MAAMqG,IAAI,IAAIrG,MAAM8D,KAAK,kBAAI,KAACjF;4BAAWgE,MAAM7C,MAAM8D,KAAK;4BAAE3C,QAAQA;;sCAC9E,KAACxB;4BACCyI,KAAK3H;4BACLU,QAAQA;4BACRqB,MAAMT;4BACNsG,eAAerG;4BACfF,WAAWA;4BACX9B,OAAOwB;4BACPF,QAAQA;4BACRgH,MAAMnC;4BACNU,cAAcA;4BACdI,eAAeA;4BACfsB,WAAU,sBAAsB,gFAAgF;;4BAChHC,YAAYhC;4BACZ,sFAAsF;4BACtF,mDAAmD;4BACnDiC,eAAe,CAAC1G,cAAcK,MAAM,IAAIH,eAAeA,YAAYG,MAAM,GAAG,IAAI,UAAU;;;;YAIlG;;;AAIR"}