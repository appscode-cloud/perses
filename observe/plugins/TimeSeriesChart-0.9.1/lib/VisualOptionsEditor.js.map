{"version":3,"sources":["../../src/VisualOptionsEditor.tsx"],"sourcesContent":["// Copyright 2023 The Perses Authors\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { produce } from 'immer';\nimport { Slider, Switch, ToggleButton, ToggleButtonGroup } from '@mui/material';\nimport { OptionsEditorControl, OptionsEditorGroup, SettingsAutocomplete } from '@perses-dev/components';\nimport { ReactElement } from 'react';\nimport {\n  DEFAULT_AREA_OPACITY,\n  DEFAULT_CONNECT_NULLS,\n  DEFAULT_LINE_WIDTH,\n  DEFAULT_POINT_RADIUS,\n  POINT_SIZE_OFFSET,\n  STACK_CONFIG,\n  StackOptions,\n  STACK_OPTIONS,\n  VISUAL_CONFIG,\n  TimeSeriesChartVisualOptions,\n} from './time-series-chart-model';\n\nexport interface VisualOptionsEditorProps {\n  value: TimeSeriesChartVisualOptions;\n  onChange: (visual: TimeSeriesChartVisualOptions) => void;\n}\n\nexport function VisualOptionsEditor({ value, onChange }: VisualOptionsEditorProps): ReactElement {\n  const handleLineWidthChange = (_: Event, sliderValue: number | number[]): void => {\n    const newValue = Array.isArray(sliderValue) ? sliderValue[0] : sliderValue;\n    const symbolSize = newValue !== undefined ? newValue + POINT_SIZE_OFFSET : DEFAULT_POINT_RADIUS;\n    onChange(\n      produce(value, (draft) => {\n        draft.lineWidth = newValue;\n        draft.pointRadius = symbolSize;\n      })\n    );\n  };\n\n  const handleAreaOpacityChange = (_: Event, sliderValue: number | number[]): void => {\n    const newValue = Array.isArray(sliderValue) ? sliderValue[0] : sliderValue;\n    onChange(\n      produce(value, (draft) => {\n        draft.areaOpacity = newValue;\n      })\n    );\n  };\n\n  const currentStack: StackOptions = value.stack ?? 'none';\n  const stackConfig = STACK_CONFIG[currentStack];\n\n  return (\n    <OptionsEditorGroup title=\"Visual\">\n      <OptionsEditorControl\n        label=\"Display\"\n        control={\n          <ToggleButtonGroup\n            color=\"primary\"\n            exclusive\n            value={value.display}\n            onChange={(__, newValue) => {\n              onChange({\n                ...value,\n                display: newValue,\n              });\n            }}\n          >\n            <ToggleButton\n              value=\"line\"\n              selected={value.display === undefined || value.display === 'line'}\n              aria-label=\"display line series\"\n            >\n              Line\n            </ToggleButton>\n            <ToggleButton value=\"bar\" aria-label=\"display bar series\">\n              Bar\n            </ToggleButton>\n          </ToggleButtonGroup>\n        }\n      />\n      <OptionsEditorControl\n        label={VISUAL_CONFIG.lineWidth.label}\n        control={\n          <Slider\n            data-testid={VISUAL_CONFIG.lineWidth.testId}\n            value={value.lineWidth ?? DEFAULT_LINE_WIDTH}\n            valueLabelDisplay=\"auto\"\n            step={VISUAL_CONFIG.lineWidth.step}\n            marks\n            min={VISUAL_CONFIG.lineWidth.min}\n            max={VISUAL_CONFIG.lineWidth.max}\n            disabled={value.display === 'bar'}\n            onChange={handleLineWidthChange}\n          />\n        }\n      />\n      <OptionsEditorControl\n        label={VISUAL_CONFIG.areaOpacity.label}\n        control={\n          <Slider\n            data-testid={VISUAL_CONFIG.areaOpacity.testId}\n            value={value.areaOpacity ?? DEFAULT_AREA_OPACITY}\n            valueLabelDisplay=\"auto\"\n            step={VISUAL_CONFIG.areaOpacity.step}\n            marks\n            min={VISUAL_CONFIG.areaOpacity.min}\n            max={VISUAL_CONFIG.areaOpacity.max}\n            disabled={value.display === 'bar'}\n            onChange={handleAreaOpacityChange}\n          />\n        }\n      />\n      <OptionsEditorControl\n        label={VISUAL_CONFIG.stack.label}\n        control={\n          <SettingsAutocomplete\n            value={{\n              ...stackConfig,\n              id: currentStack,\n            }}\n            options={STACK_OPTIONS}\n            onChange={(__, newValue) => {\n              const updatedValue: TimeSeriesChartVisualOptions = {\n                ...value,\n                stack: newValue.id === 'none' ? undefined : newValue.id, // stack is optional so remove property when 'None' is selected\n              };\n              // stacked area chart preset to automatically set area under a curve shading\n              if (newValue.id === 'all' && !value.areaOpacity) {\n                updatedValue.areaOpacity = 0.3;\n              }\n              onChange(updatedValue);\n            }}\n            disabled={value === undefined}\n            disableClearable\n          ></SettingsAutocomplete>\n        }\n      />\n      <OptionsEditorControl\n        label={VISUAL_CONFIG.connectNulls.label}\n        control={\n          <Switch\n            checked={value.connectNulls ?? DEFAULT_CONNECT_NULLS}\n            disabled={value.display === 'bar'}\n            onChange={(e) => {\n              onChange({\n                ...value,\n                connectNulls: e.target.checked,\n              });\n            }}\n          />\n        }\n      />\n    </OptionsEditorGroup>\n  );\n}\n"],"names":["produce","Slider","Switch","ToggleButton","ToggleButtonGroup","OptionsEditorControl","OptionsEditorGroup","SettingsAutocomplete","DEFAULT_AREA_OPACITY","DEFAULT_CONNECT_NULLS","DEFAULT_LINE_WIDTH","DEFAULT_POINT_RADIUS","POINT_SIZE_OFFSET","STACK_CONFIG","STACK_OPTIONS","VISUAL_CONFIG","VisualOptionsEditor","value","onChange","handleLineWidthChange","_","sliderValue","newValue","Array","isArray","symbolSize","undefined","draft","lineWidth","pointRadius","handleAreaOpacityChange","areaOpacity","currentStack","stack","stackConfig","title","label","control","color","exclusive","display","__","selected","aria-label","data-testid","testId","valueLabelDisplay","step","marks","min","max","disabled","id","options","updatedValue","disableClearable","connectNulls","checked","e","target"],"mappings":"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"}