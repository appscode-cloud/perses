{"version":3,"sources":["../../src/QuerySettingsEditor.tsx"],"sourcesContent":["// Copyright 2023 The Perses Authors\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { IconButton, MenuItem, Stack, TextField, Typography } from '@mui/material';\nimport { InfoTooltip, OptionsEditorGroup, OptionsColorPicker } from '@perses-dev/components';\nimport { ReactElement, RefObject, useEffect, useMemo, useRef } from 'react';\nimport DeleteIcon from 'mdi-material-ui/DeleteOutline';\nimport PlusIcon from 'mdi-material-ui/Plus';\nimport { produce } from 'immer';\nimport { useQueryCountContext } from '@perses-dev/plugin-system';\nimport { QuerySettingsOptions } from './time-series-chart-model';\n\nconst DEFAULT_COLOR_MODE = 'fixed';\nconst DEFAULT_COLOR_VALUE = '#555';\nconst NO_INDEX_AVAILABLE = -1; // invalid array index value used to represent the fact that no query index is available\n\nexport interface QuerySettingsEditorProps {\n  querySettingsList?: QuerySettingsOptions[];\n  onChange: (querySettingsList: QuerySettingsOptions[]) => void;\n}\n\nexport function QuerySettingsEditor({ querySettingsList, onChange }: QuerySettingsEditorProps): ReactElement {\n  // Every time a new query settings input is added, we want to focus the recently added input\n  const recentlyAddedInputRef = useRef<HTMLInputElement | null>(null);\n  const focusRef = useRef(false);\n  useEffect(() => {\n    if (!recentlyAddedInputRef.current || !focusRef.current) return;\n    recentlyAddedInputRef.current?.focus();\n    focusRef.current = false;\n  }, [querySettingsList?.length]);\n\n  const handleQueryIndexChange = (e: React.ChangeEvent<HTMLInputElement>, i: number): void => {\n    if (querySettingsList !== undefined) {\n      onChange(\n        produce(querySettingsList, (draft) => {\n          const querySettings = draft?.[i];\n          if (querySettings) {\n            querySettings.queryIndex = parseInt(e.target.value);\n          }\n        })\n      );\n    }\n  };\n\n  const handleColorModeChange = (e: React.ChangeEvent<HTMLInputElement>, i: number): void => {\n    if (querySettingsList !== undefined) {\n      onChange(\n        produce(querySettingsList, (draft) => {\n          if (draft !== undefined) {\n            const querySettings = draft[i];\n            if (querySettings) {\n              querySettings.colorMode = e.target.value as QuerySettingsOptions['colorMode'];\n            }\n          }\n        })\n      );\n    }\n  };\n\n  const handleColorValueChange = (colorValue: string, i: number): void => {\n    if (querySettingsList !== undefined) {\n      onChange(\n        produce(querySettingsList, (draft) => {\n          if (draft !== undefined) {\n            const querySettings = draft[i];\n            if (querySettings) {\n              querySettings.colorValue = colorValue;\n            }\n          }\n        })\n      );\n    }\n  };\n\n  const deleteQuerySettingsInput = (i: number): void => {\n    if (querySettingsList !== undefined) {\n      const updatedQuerySettingsList = produce(querySettingsList, (draft) => {\n        draft.splice(i, 1);\n      });\n      onChange(updatedQuerySettingsList);\n    }\n  };\n\n  const queryCount = useQueryCountContext();\n\n  // Compute the list of query indexes for which query settings are not already defined.\n  // This is to avoid already-booked indexes to still be selectable in the dropdown(s)\n  const availableQueryIndexes = useMemo(() => {\n    const bookedQueryIndexes = querySettingsList?.map((querySettings) => querySettings.queryIndex) ?? [];\n    const allQueryIndexes = Array.from({ length: queryCount }, (_, i) => i);\n    return allQueryIndexes.filter((_, queryIndex) => !bookedQueryIndexes.includes(queryIndex));\n  }, [querySettingsList, queryCount]);\n\n  const firstAvailableQueryIndex = useMemo(() => {\n    return availableQueryIndexes[0] ?? NO_INDEX_AVAILABLE;\n  }, [availableQueryIndexes]);\n\n  const defaultQuerySettings: QuerySettingsOptions = {\n    queryIndex: firstAvailableQueryIndex,\n    colorMode: DEFAULT_COLOR_MODE,\n    colorValue: DEFAULT_COLOR_VALUE,\n  };\n\n  const addQuerySettingsInput = (): void => {\n    focusRef.current = true;\n    if (querySettingsList === undefined) {\n      onChange([defaultQuerySettings]);\n    } else {\n      onChange(\n        produce(querySettingsList, (draft) => {\n          draft.push(defaultQuerySettings);\n        })\n      );\n    }\n  };\n\n  return (\n    <OptionsEditorGroup\n      title=\"Query settings\"\n      icon={\n        firstAvailableQueryIndex !== NO_INDEX_AVAILABLE ? (\n          <InfoTooltip description=\"Add query settings\">\n            <IconButton size=\"small\" aria-label=\"add query settings\" onClick={addQuerySettingsInput}>\n              <PlusIcon />\n            </IconButton>\n          </InfoTooltip>\n        ) : null\n      }\n    >\n      {querySettingsList && querySettingsList.length > 0 ? (\n        querySettingsList.map((querySettings, i) => (\n          <QuerySettingsInput\n            inputRef={i === querySettingsList.length - 1 ? recentlyAddedInputRef : undefined}\n            key={i}\n            querySettings={querySettings}\n            availableQueryIndexes={availableQueryIndexes}\n            onQueryIndexChange={(e) => {\n              handleQueryIndexChange(e, i);\n            }}\n            onColorModeChange={(e) => handleColorModeChange(e, i)}\n            onColorValueChange={(color) => handleColorValueChange(color, i)}\n            onDelete={() => {\n              deleteQuerySettingsInput(i);\n            }}\n          />\n        ))\n      ) : (\n        <Typography mb={2} fontStyle=\"italic\">\n          No query settings defined\n        </Typography>\n      )}\n    </OptionsEditorGroup>\n  );\n}\n\nexport interface QuerySettingsInputProps {\n  querySettings: QuerySettingsOptions;\n  availableQueryIndexes: number[];\n  onQueryIndexChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onColorModeChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onColorValueChange: (colorValue: string) => void;\n  onDelete: () => void;\n  inputRef?: RefObject<HTMLInputElement | null>;\n}\n\nexport function QuerySettingsInput({\n  querySettings: { queryIndex, colorMode, colorValue },\n  availableQueryIndexes,\n  onQueryIndexChange,\n  onColorModeChange,\n  onColorValueChange,\n  onDelete,\n  inputRef,\n}: QuerySettingsInputProps): ReactElement {\n  // current query index should also be selectable\n  const selectableQueryIndexes = availableQueryIndexes.concat(queryIndex).sort((a, b) => a - b);\n\n  return (\n    <Stack flex={1} direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" spacing={1}>\n      <TextField\n        select\n        inputRef={inputRef}\n        value={queryIndex}\n        label=\"Query\"\n        onChange={onQueryIndexChange}\n        sx={{ minWidth: '75px' }} // instead of `fullWidth` otherwise it's taking too much space\n      >\n        {selectableQueryIndexes.map((queryIndex) => (\n          <MenuItem key={`query-${queryIndex}`} value={queryIndex}>\n            #{queryIndex + 1}\n          </MenuItem>\n        ))}\n      </TextField>\n      <TextField select value={colorMode} fullWidth label=\"Color mode\" onChange={onColorModeChange}>\n        <MenuItem value=\"fixed-single\">Fixed (single)</MenuItem>\n        <MenuItem value=\"fixed\">Fixed</MenuItem>\n      </TextField>\n      <OptionsColorPicker label={'Query n°' + queryIndex} color={colorValue} onColorChange={onColorValueChange} />\n      <IconButton aria-label={`delete settings for query n°${queryIndex + 1}`} size=\"small\" onClick={onDelete}>\n        <DeleteIcon />\n      </IconButton>\n    </Stack>\n  );\n}\n"],"names":["IconButton","MenuItem","Stack","TextField","Typography","InfoTooltip","OptionsEditorGroup","OptionsColorPicker","useEffect","useMemo","useRef","DeleteIcon","PlusIcon","produce","useQueryCountContext","DEFAULT_COLOR_MODE","DEFAULT_COLOR_VALUE","NO_INDEX_AVAILABLE","QuerySettingsEditor","querySettingsList","onChange","recentlyAddedInputRef","focusRef","current","focus","length","handleQueryIndexChange","e","i","undefined","draft","querySettings","queryIndex","parseInt","target","value","handleColorModeChange","colorMode","handleColorValueChange","colorValue","deleteQuerySettingsInput","updatedQuerySettingsList","splice","queryCount","availableQueryIndexes","bookedQueryIndexes","map","allQueryIndexes","Array","from","_","filter","includes","firstAvailableQueryIndex","defaultQuerySettings","addQuerySettingsInput","push","title","icon","description","size","aria-label","onClick","QuerySettingsInput","inputRef","onQueryIndexChange","onColorModeChange","onColorValueChange","color","onDelete","mb","fontStyle","selectableQueryIndexes","concat","sort","a","b","flex","direction","alignItems","justifyContent","spacing","select","label","sx","minWidth","fullWidth","onColorChange"],"mappings":"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"}